{"version":3,"sources":["/Users/chrispauley/tools/asmcrypto.js/src/utils.js","/Users/chrispauley/tools/asmcrypto.js/src/errors.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/aes.asm.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/aes.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/cbc/cbc.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/cbc/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/gcm/gcm.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/hash.js","/Users/chrispauley/tools/asmcrypto.js/src/aes/gcm/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha1/sha1.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha1/sha1.asm.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha1/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha256/sha256.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha256/sha256.asm.js","/Users/chrispauley/tools/asmcrypto.js/src/hash/sha256/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/hmac/hmac.js","/Users/chrispauley/tools/asmcrypto.js/src/hmac/hmac-sha1.js","/Users/chrispauley/tools/asmcrypto.js/src/hmac/exports-hmac-sha1.js","/Users/chrispauley/tools/asmcrypto.js/src/hmac/hmac-sha256.js","/Users/chrispauley/tools/asmcrypto.js/src/hmac/exports-hmac-sha256.js","/Users/chrispauley/tools/asmcrypto.js/src/pbkdf2/pbkdf2.js","/Users/chrispauley/tools/asmcrypto.js/src/pbkdf2/pbkdf2-hmac-sha1.js","/Users/chrispauley/tools/asmcrypto.js/src/pbkdf2/exports-pbkdf2-hmac-sha1.js","/Users/chrispauley/tools/asmcrypto.js/src/pbkdf2/pbkdf2-hmac-sha256.js","/Users/chrispauley/tools/asmcrypto.js/src/pbkdf2/exports-pbkdf2-hmac-sha256.js","/Users/chrispauley/tools/asmcrypto.js/src/random/random.js","/Users/chrispauley/tools/asmcrypto.js/src/random/isaac.js","/Users/chrispauley/tools/asmcrypto.js/src/bignum/bigint.asm.js","/Users/chrispauley/tools/asmcrypto.js/src/bignum/extgcd.js","/Users/chrispauley/tools/asmcrypto.js/src/bignum/bignum.js","/Users/chrispauley/tools/asmcrypto.js/src/rsa/rsa.js","/Users/chrispauley/tools/asmcrypto.js/src/bignum/exports.js","/Users/chrispauley/tools/asmcrypto.js/src/rsa/pkcs1.js","/Users/chrispauley/tools/asmcrypto.js/src/origin.js"],"names":["FloatArray","Float64Array","Float32Array","string_to_bytes","str","utf8","len","length","bytes","Uint8Array","i","j","c","charCodeAt","Error","subarray","bytes_to_string","chars","Array","b","String","fromCharCode","apply","slice","bytes_to_hex","arr","h","toString","bytes_to_base64","btoa","is_number","a","is_string","is_buffer","ArrayBuffer","is_bytes","is_typed_array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","_heap_init","constructor","heap","heapSize","size","byteLength","_heap_write","hpos","data","dpos","dlen","hlen","wlen","set","IllegalStateError","err","this","arguments","message","stack","IllegalArgumentError","SecurityError","prototype","Object","create","name","value","AES_asm","gexp3","glog3","ginit_done","gmul","aes_sbox","aes_sinv","aes_enc","aes_dec","aes_init","_s","s","x","ginv","d","ginit","t","wrapper","foreign","buffer","asm","stdlib","S0","S1","S2","S3","I0","I1","I2","I3","N0","N1","N2","N3","M0","M1","M2","M3","H0","H1","H2","H3","R","HEAP","DATA","_core","k","r","x0","x1","x2","x3","t1","t2","t3","y0","y1","y2","y3","_ecb_enc","_ecb_dec","_cbc_enc","_cbc_dec","_cfb_enc","_cfb_dec","_ofb","_ctr","_gcm_mac","z0","z1","z2","z3","set_rounds","set_state","s0","s1","s2","s3","set_iv","i0","i1","i2","i3","set_nonce","n0","n1","n2","n3","set_mask","m0","m1","m2","m3","set_counter","c0","c1","c2","c3","get_state","pos","get_iv","gcm_init","cipher","mode","ret","_cipher_modes","mac","_mac_modes","set_key","ks","k0","k1","k2","k3","k4","k5","k6","k7","ekeys","dkeys","rcon","jj","ENC","ECB","CBC","CFB","OFB","CTR","DEC","MAC","GCM","HEAP_DATA","_AES_heap_instance","_AES_asm_instance","AES","[object Object]","key","iv","padding","nonce","counter","counterSize","AES_reset","undefined","TypeError","keylen","keyview","DataView","byteOffset","getUint32","mask","Math","pow","view","ivview","result","AES_set_key","AES_set_iv","AES_set_padding","amode","rpos","presult","prlen","AES_Encrypt_process","plen","rlen","hasOwnProperty","p","AES_Decrypt_process","pad","pcheck","AES_CBC","super","BLOCK_SIZE","AES_Encrypt_finish","AES_Decrypt_finish","encrypt","SyntaxError","decrypt","_AES_GCM_data_maxLength","AES_GCM","adata","tagSize","reset","AES_GCM_reset","AES_GCM_encrypt","AES_GCM_decrypt","RangeError","alen","clen","gamma0","tlen","atag","acheck","result1","AES_GCM_Decrypt_process","result2","AES_GCM_Decrypt_finish","AES_GCM_Encrypt_process","AES_GCM_Encrypt_finish","noncelen","noncebuf","_gcm_mac_process","nonceview","hash_reset","hash_process","process","hash_finish","finish","HASH_SIZE","_sha1_block_size","_sha1_hash_size","sha1_constructor","options","H4","TOTAL0","TOTAL1","I4","O0","O1","O2","O3","O4","w0","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","e","n","w16","w17","w18","w19","w20","w21","w22","w23","w24","w25","w26","w27","w28","w29","w30","w31","w32","w33","w34","w35","w36","w37","w38","w39","w40","w41","w42","w43","w44","w45","w46","w47","w48","w49","w50","w51","w52","w53","w54","w55","w56","w57","w58","w59","w60","w61","w62","w63","w64","w65","w66","w67","w68","w69","w70","w71","w72","w73","w74","w75","w76","w77","w78","w79","_core_heap","offset","_state_to_heap","output","init","h0","h1","h2","h3","h4","total0","total1","hashed","hmac_reset","_hmac_opad","hmac_init","p0","p1","p2","p3","p4","p5","p6","p7","p8","p9","p10","p11","p12","p13","p14","p15","hmac_finish","t0","t4","pbkdf2_generate_block","block","count","sha1_asm","NAME","sha1_prototype","sha1_instance","get_sha1_instance","sha1_bytes","SHA1","hex","base64","_sha256_block_size","_sha256_hash_size","sha256_constructor","H5","H6","H7","I5","I6","I7","O5","O6","O7","f","g","h5","h6","h7","t5","t6","t7","sha256_asm","sha256_prototype","sha256_instance","get_sha256_instance","sha256_bytes","SHA256","hmac_constructor","hash","HMAC_SIZE","verify","password","_hmac_key","ipad","_hmac_init_verify","inner_result","opad","diff","hmac_sha1_constructor","hmac_sha1_instance","get_hmac_sha1_instance","hmac_sha1_bytes","HMAC_SHA1","hmac_sha256_constructor","hmac_sha256_instance","get_hmac_sha256_instance","hmac_sha256_bytes","HMAC_SHA256","pbkdf2_constructor","hmac","salt","blocks","ceil","l","tmp","pbkdf2_hmac_sha1_constructor","pbkdf2_hmac_sha1_instance","pbkdf2_hmac_sha1_bytes","iterations","dklen","generate","pbkdf2_hmac_sha1_hex","pbkdf2_hmac_sha1_base64","PBKDF2","PBKDF2_HMAC_SHA1","pbkdf2_hmac_sha256_constructor","pbkdf2_hmac_sha256_instance","get_pbkdf2_hmac_sha256_instance","pbkdf2_hmac_sha256_bytes","_global_crypto_getRandomValues","PBKDF2_HMAC_SHA256","ISAAC","m","acc","brs","cnt","gnt","randinit","mix","prng","y","seed","rand","_global_console","console","_global_date_now","Date","now","_global_math_random","random","_global_performance","performance","_global_crypto","crypto","msCrypto","getRandomValues","_hires_now","_isaac_rand","_isaac_seed","_isaac_counter","_isaac_weak_seeded","_isaac_seeded","_random_estimated_entropy","_random_required_entropy","_random_warn_callstacks","exports","_random_skip_system_rng_warning","_random_allow_weak","_hires_epoch","Random_weak_seed","call","location","href","pid","title","pbkdf2","Random_seed","bpos","blen","buff","nonzero","Random_getValues","error","warn","Random_getNumber","bigint_asm","SP","HEAP32","imul","sreset","salloc","sfree","cp","A","B","z","neg","lA","lR","cmp","lB","tst","add","sub","mul","al0","al1","al2","al3","al4","al5","al6","al7","ah0","ah1","ah2","ah3","ah4","ah5","ah6","ah7","bl0","bl1","bl2","bl3","bl4","bl5","bl6","bl7","bh0","bh1","bh2","bh3","bh4","bh5","bh6","bh7","r0","r1","r2","r3","r4","r5","r6","r7","r8","r9","r10","r11","r12","r13","r14","r15","u","v","w","Ai","Bj","Rk","sqr","dd","Aj","div","N","lN","D","lD","Q","u1","u0","v0","vh","vl","qh","ql","rh","rl","mredc","T","uh","ul","BigNumber_extGCD","is_big_number","BigNumber","sa","sign","sb","negate","a_cmp_b","compare","q","xi","BigNumber_ONE","xj","BigNumber_ZERO","lx","bitLength","yi","yj","ly","divide","remainder","quotient","subtract","multiply","clamp","gcd","defineProperty","get","_bigint_asm","_bigint_stdlib","_bigint_heap","_BigNumber_ZERO_limbs","num","limbs","bitlen","absnum","abs","fromConfig","obj","bn","radix","substr","replace","bytelen","bits","clamped","sliced","slimbs","negative","that","alimbs","alimbcnt","blimbs","blimbcnt","rbitlen","rlimbcnt","rsign","rof","abitlen","asign","bbitlen","bsign","pA","pB","pR","qlimbcnt","pQ","rounds","Modulus","power","square","paranoia","s5","s17","l3","l5","l17","isMillerRabinProbablePrime","fromNumber","number","valueOf","comodulus","floor","Number_extGCD","coefficient","comodulusRemainder","comodulusRemainderSquare","reduce","g2","_Montgomery_reduce","gn","nlimbs","nlimbcnt","pN","RSA_reset","RSA_encrypt","msg","toBytes","RSA_decrypt","dp","dq","ZERO","ONE","extGCD","RSA_MGF1_generate","hash_size","chunks","submask","chunk","HASH_PREFIXES","sha1","sha256","sha384","sha512","getHashPrefix","hashName","prefix","protocol","search","parseInt","atob","label","key_size","data_length","ps_length","data_block","data_block_mask","seed_mask","lhash","ps_end","psz","saltLength","slen","key_bits","message_length","salt_length","h_block","d_block","d_salt","m_block","m_hash","m_salt","d_block_mask","zbits","signature","h_block_verify","t_len","em","res","decryptedSignature"],"mappings":"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KuQ,EAAO,IAAI,GAAKvQ,EAAKuQ,EAAO,IAAI,EAAIvQ,EAAKuQ,EAAO,GAC1EvQ,EAAKuQ,EAAO,IAAI,GAAKvQ,EAAKuQ,EAAO,IAAI,GAAKvQ,EAAKuQ,EAAO,IAAI,EAAIvQ,EAAKuQ,EAAO,GAC1EvQ,EAAKuQ,EAAO,IAAI,GAAKvQ,EAAKuQ,EAAO,IAAI,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC3EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,EAAO,KAAK,EAAIvQ,EAAKuQ,EAAO,IAC7EvQ,EAAKuQ,EAAO,KAAK,GAAKvQ,EAAKuQ,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","file":"asmcrypto.min.js","sourcesContent":["export var FloatArray = typeof Float64Array !== 'undefined' ? Float64Array : Float32Array; // make PhantomJS happy\n\n/**\n * @param {string} str\n * @param {boolean} [utf8]\n * @return {Uint8Array}\n */\nexport function string_to_bytes(str, utf8) {\n  utf8 = !!utf8;\n\n  var len = str.length,\n    bytes = new Uint8Array(utf8 ? 4 * len : len);\n\n  for (var i = 0, j = 0; i < len; i++) {\n    var c = str.charCodeAt(i);\n\n    if (utf8 && 0xd800 <= c && c <= 0xdbff) {\n      if (++i >= len) throw new Error('Malformed string, low surrogate expected at position ' + i);\n      c = ((c ^ 0xd800) << 10) | 0x10000 | (str.charCodeAt(i) ^ 0xdc00);\n    } else if (!utf8 && c >>> 8) {\n      throw new Error('Wide characters are not allowed.');\n    }\n\n    if (!utf8 || c <= 0x7f) {\n      bytes[j++] = c;\n    } else if (c <= 0x7ff) {\n      bytes[j++] = 0xc0 | (c >> 6);\n      bytes[j++] = 0x80 | (c & 0x3f);\n    } else if (c <= 0xffff) {\n      bytes[j++] = 0xe0 | (c >> 12);\n      bytes[j++] = 0x80 | ((c >> 6) & 0x3f);\n      bytes[j++] = 0x80 | (c & 0x3f);\n    } else {\n      bytes[j++] = 0xf0 | (c >> 18);\n      bytes[j++] = 0x80 | ((c >> 12) & 0x3f);\n      bytes[j++] = 0x80 | ((c >> 6) & 0x3f);\n      bytes[j++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return bytes.subarray(0, j);\n}\n\nexport function hex_to_bytes(str) {\n  var len = str.length;\n  if (len & 1) {\n    str = '0' + str;\n    len++;\n  }\n  var bytes = new Uint8Array(len >> 1);\n  for (var i = 0; i < len; i += 2) {\n    bytes[i >> 1] = parseInt(str.substr(i, 2), 16);\n  }\n  return bytes;\n}\n\nexport function base64_to_bytes(str) {\n  return string_to_bytes(atob(str));\n}\n\nexport function bytes_to_string(bytes, utf8) {\n  utf8 = !!utf8;\n\n  var len = bytes.length,\n    chars = new Array(len);\n\n  for (var i = 0, j = 0; i < len; i++) {\n    var b = bytes[i];\n    if (!utf8 || b < 128) {\n      chars[j++] = b;\n    } else if (b >= 192 && b < 224 && i + 1 < len) {\n      chars[j++] = ((b & 0x1f) << 6) | (bytes[++i] & 0x3f);\n    } else if (b >= 224 && b < 240 && i + 2 < len) {\n      chars[j++] = ((b & 0xf) << 12) | ((bytes[++i] & 0x3f) << 6) | (bytes[++i] & 0x3f);\n    } else if (b >= 240 && b < 248 && i + 3 < len) {\n      var c = ((b & 7) << 18) | ((bytes[++i] & 0x3f) << 12) | ((bytes[++i] & 0x3f) << 6) | (bytes[++i] & 0x3f);\n      if (c <= 0xffff) {\n        chars[j++] = c;\n      } else {\n        c ^= 0x10000;\n        chars[j++] = 0xd800 | (c >> 10);\n        chars[j++] = 0xdc00 | (c & 0x3ff);\n      }\n    } else {\n      throw new Error('Malformed UTF8 character at byte offset ' + i);\n    }\n  }\n\n  var str = '',\n    bs = 16384;\n  for (var i = 0; i < j; i += bs) {\n    str += String.fromCharCode.apply(String, chars.slice(i, i + bs <= j ? i + bs : j));\n  }\n\n  return str;\n}\n\nexport function bytes_to_hex(arr) {\n  var str = '';\n  for (var i = 0; i < arr.length; i++) {\n    var h = (arr[i] & 0xff).toString(16);\n    if (h.length < 2) str += '0';\n    str += h;\n  }\n  return str;\n}\n\nexport function bytes_to_base64(arr) {\n  return btoa(bytes_to_string(arr));\n}\n\nexport function pow2_ceil(a) {\n  a -= 1;\n  a |= a >>> 1;\n  a |= a >>> 2;\n  a |= a >>> 4;\n  a |= a >>> 8;\n  a |= a >>> 16;\n  a += 1;\n  return a;\n}\n\nexport function is_number(a) {\n  return typeof a === 'number';\n}\n\nexport function is_string(a) {\n  return typeof a === 'string';\n}\n\nexport function is_buffer(a) {\n  return a instanceof ArrayBuffer;\n}\n\nexport function is_bytes(a) {\n  return a instanceof Uint8Array;\n}\n\nexport function is_typed_array(a) {\n  return (\n    a instanceof Int8Array ||\n    a instanceof Uint8Array ||\n    a instanceof Int16Array ||\n    a instanceof Uint16Array ||\n    a instanceof Int32Array ||\n    a instanceof Uint32Array ||\n    a instanceof Float32Array ||\n    a instanceof Float64Array\n  );\n}\n\nexport function _heap_init(constructor, heap, heapSize) {\n  var size = heap ? heap.byteLength : heapSize || 65536;\n\n  if (size & 0xfff || size <= 0) throw new Error('heap size must be a positive integer and a multiple of 4096');\n\n  heap = heap || new constructor(new ArrayBuffer(size));\n\n  return heap;\n}\n\nexport function _heap_write(heap, hpos, data, dpos, dlen) {\n  var hlen = heap.length - hpos,\n    wlen = hlen < dlen ? hlen : dlen;\n\n  heap.set(data.subarray(dpos, dpos + wlen), hpos);\n\n  return wlen;\n}\n","export function IllegalStateError() {\n  var err = Error.apply(this, arguments);\n  (this.message = err.message), (this.stack = err.stack);\n}\nIllegalStateError.prototype = Object.create(Error.prototype, { name: { value: 'IllegalStateError' } });\n\nexport function IllegalArgumentError() {\n  var err = Error.apply(this, arguments);\n  (this.message = err.message), (this.stack = err.stack);\n}\nIllegalArgumentError.prototype = Object.create(Error.prototype, { name: { value: 'IllegalArgumentError' } });\n\nexport function SecurityError() {\n  var err = Error.apply(this, arguments);\n  (this.message = err.message), (this.stack = err.stack);\n}\nSecurityError.prototype = Object.create(Error.prototype, { name: { value: 'SecurityError' } });\n","/**\n * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.\n * @author Artem S Vybornov <vybornov@gmail.com>\n * @license MIT\n */\nexport var AES_asm = function () {\n  \"use strict\";\n\n  /**\n   * Galois Field stuff init flag\n   */\n  var ginit_done = false;\n\n  /**\n   * Galois Field exponentiation and logarithm tables for 3 (the generator)\n   */\n  var gexp3, glog3;\n\n  /**\n   * Init Galois Field tables\n   */\n  function ginit() {\n    gexp3 = [],\n      glog3 = [];\n\n    var a = 1, c, d;\n    for (c = 0; c < 255; c++) {\n      gexp3[c] = a;\n\n      // Multiply by three\n      d = a & 0x80, a <<= 1, a &= 255;\n      if (d === 0x80) a ^= 0x1b;\n      a ^= gexp3[c];\n\n      // Set the log table value\n      glog3[gexp3[c]] = c;\n    }\n    gexp3[255] = gexp3[0];\n    glog3[0] = 0;\n\n    ginit_done = true;\n  }\n\n  /**\n   * Galois Field multiplication\n   * @param {number} a\n   * @param {number} b\n   * @return {number}\n   */\n  function gmul(a, b) {\n    var c = gexp3[(glog3[a] + glog3[b]) % 255];\n    if (a === 0 || b === 0) c = 0;\n    return c;\n  }\n\n  /**\n   * Galois Field reciprocal\n   * @param {number} a\n   * @return {number}\n   */\n  function ginv(a) {\n    var i = gexp3[255 - glog3[a]];\n    if (a === 0) i = 0;\n    return i;\n  }\n\n  /**\n   * AES stuff init flag\n   */\n  var aes_init_done = false;\n\n  /**\n   * Encryption, Decryption, S-Box and KeyTransform tables\n   *\n   * @type {number[]}\n   */\n  var aes_sbox;\n\n  /**\n   * @type {number[]}\n   */\n  var aes_sinv;\n\n  /**\n   * @type {number[][]}\n   */\n  var aes_enc;\n\n  /**\n   * @type {number[][]}\n   */\n  var aes_dec;\n\n  /**\n   * Init AES tables\n   */\n  function aes_init() {\n    if (!ginit_done) ginit();\n\n    // Calculates AES S-Box value\n    function _s(a) {\n      var c, s, x;\n      s = x = ginv(a);\n      for (c = 0; c < 4; c++) {\n        s = ((s << 1) | (s >>> 7)) & 255;\n        x ^= s;\n      }\n      x ^= 99;\n      return x;\n    }\n\n    // Tables\n    aes_sbox = [],\n      aes_sinv = [],\n      aes_enc = [[], [], [], []],\n      aes_dec = [[], [], [], []];\n\n    for (var i = 0; i < 256; i++) {\n      var s = _s(i);\n\n      // S-Box and its inverse\n      aes_sbox[i] = s;\n      aes_sinv[s] = i;\n\n      // Ecryption and Decryption tables\n      aes_enc[0][i] = (gmul(2, s) << 24) | (s << 16) | (s << 8) | gmul(3, s);\n      aes_dec[0][s] = (gmul(14, i) << 24) | (gmul(9, i) << 16) | (gmul(13, i) << 8) | gmul(11, i);\n      // Rotate tables\n      for (var t = 1; t < 4; t++) {\n        aes_enc[t][i] = (aes_enc[t - 1][i] >>> 8) | (aes_enc[t - 1][i] << 24);\n        aes_dec[t][s] = (aes_dec[t - 1][s] >>> 8) | (aes_dec[t - 1][s] << 24);\n      }\n    }\n  }\n\n  /**\n   * Asm.js module constructor.\n   *\n   * <p>\n   * Heap buffer layout by offset:\n   * <pre>\n   * 0x0000   encryption key schedule\n   * 0x0400   decryption key schedule\n   * 0x0800   sbox\n   * 0x0c00   inv sbox\n   * 0x1000   encryption tables\n   * 0x2000   decryption tables\n   * 0x3000   reserved (future GCM multiplication lookup table)\n   * 0x4000   data\n   * </pre>\n   * Don't touch anything before <code>0x400</code>.\n   * </p>\n   *\n   * @alias AES_asm\n   * @class\n   * @param {Object} foreign - <i>ignored</i>\n   * @param {ArrayBuffer} buffer - heap buffer to link with\n   */\n  var wrapper = function (foreign, buffer) {\n    // Init AES stuff for the first time\n    if (!aes_init_done) aes_init();\n\n    // Fill up AES tables\n    var heap = new Uint32Array(buffer);\n    heap.set(aes_sbox, 0x0800 >> 2);\n    heap.set(aes_sinv, 0x0c00 >> 2);\n    for (var i = 0; i < 4; i++) {\n      heap.set(aes_enc[i], (0x1000 + 0x400 * i) >> 2);\n      heap.set(aes_dec[i], (0x2000 + 0x400 * i) >> 2);\n    }\n\n    /**\n     * Calculate AES key schedules.\n     * @instance\n     * @memberof AES_asm\n     * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)\n     * @param {number} k0 - key vector components\n     * @param {number} k1 - key vector components\n     * @param {number} k2 - key vector components\n     * @param {number} k3 - key vector components\n     * @param {number} k4 - key vector components\n     * @param {number} k5 - key vector components\n     * @param {number} k6 - key vector components\n     * @param {number} k7 - key vector components\n     */\n    function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {\n      var ekeys = heap.subarray(0x000, 60),\n        dkeys = heap.subarray(0x100, 0x100 + 60);\n\n      // Encryption key schedule\n      ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);\n      for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {\n        var k = ekeys[i - 1];\n        if ((i % ks === 0) || (ks === 8 && i % ks === 4)) {\n          k = aes_sbox[k >>> 24] << 24 ^ aes_sbox[k >>> 16 & 255] << 16 ^ aes_sbox[k >>> 8 & 255] << 8 ^ aes_sbox[k & 255];\n        }\n        if (i % ks === 0) {\n          k = (k << 8) ^ (k >>> 24) ^ (rcon << 24);\n          rcon = (rcon << 1) ^ ((rcon & 0x80) ? 0x1b : 0);\n        }\n        ekeys[i] = ekeys[i - ks] ^ k;\n      }\n\n      // Decryption key schedule\n      for (var j = 0; j < i; j += 4) {\n        for (var jj = 0; jj < 4; jj++) {\n          var k = ekeys[i - (4 + j) + (4 - jj) % 4];\n          if (j < 4 || j >= i - 4) {\n            dkeys[j + jj] = k;\n          } else {\n            dkeys[j + jj] = aes_dec[0][aes_sbox[k >>> 24]]\n              ^ aes_dec[1][aes_sbox[k >>> 16 & 255]]\n              ^ aes_dec[2][aes_sbox[k >>> 8 & 255]]\n              ^ aes_dec[3][aes_sbox[k & 255]];\n          }\n        }\n      }\n\n      // Set rounds number\n      asm.set_rounds(ks + 5);\n    }\n\n    // create library object with necessary properties\n    var stdlib = {Uint8Array: Uint8Array, Uint32Array: Uint32Array};\n\n    var asm = function (stdlib, foreign, buffer) {\n      \"use asm\";\n\n      var S0 = 0, S1 = 0, S2 = 0, S3 = 0,\n        I0 = 0, I1 = 0, I2 = 0, I3 = 0,\n        N0 = 0, N1 = 0, N2 = 0, N3 = 0,\n        M0 = 0, M1 = 0, M2 = 0, M3 = 0,\n        H0 = 0, H1 = 0, H2 = 0, H3 = 0,\n        R = 0;\n\n      var HEAP = new stdlib.Uint32Array(buffer),\n        DATA = new stdlib.Uint8Array(buffer);\n\n      /**\n       * AES core\n       * @param {number} k - precomputed key schedule offset\n       * @param {number} s - precomputed sbox table offset\n       * @param {number} t - precomputed round table offset\n       * @param {number} r - number of inner rounds to perform\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _core(k, s, t, r, x0, x1, x2, x3) {\n        k = k | 0;\n        s = s | 0;\n        t = t | 0;\n        r = r | 0;\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var t1 = 0, t2 = 0, t3 = 0,\n          y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n          i = 0;\n\n        t1 = t | 0x400, t2 = t | 0x800, t3 = t | 0xc00;\n\n        // round 0\n        x0 = x0 ^ HEAP[(k | 0) >> 2],\n          x1 = x1 ^ HEAP[(k | 4) >> 2],\n          x2 = x2 ^ HEAP[(k | 8) >> 2],\n          x3 = x3 ^ HEAP[(k | 12) >> 2];\n\n        // round 1..r\n        for (i = 16; (i | 0) <= (r << 4); i = (i + 16) | 0) {\n          y0 = HEAP[(t | x0 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x1 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x2 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2],\n            y1 = HEAP[(t | x1 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x2 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x3 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2],\n            y2 = HEAP[(t | x2 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x3 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x0 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2],\n            y3 = HEAP[(t | x3 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x0 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x1 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];\n          x0 = y0, x1 = y1, x2 = y2, x3 = y3;\n        }\n\n        // final round\n        S0 = HEAP[(s | x0 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x1 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x2 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2],\n          S1 = HEAP[(s | x1 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x2 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x3 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2],\n          S2 = HEAP[(s | x2 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x3 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x0 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2],\n          S3 = HEAP[(s | x3 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x0 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x1 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];\n      }\n\n      /**\n       * ECB mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _ecb_enc(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          x0,\n          x1,\n          x2,\n          x3,\n        );\n      }\n\n      /**\n       * ECB mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _ecb_dec(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var t = 0;\n\n        _core(\n          0x0400, 0x0c00, 0x2000,\n          R,\n          x0,\n          x3,\n          x2,\n          x1,\n        );\n\n        t = S1, S1 = S3, S3 = t;\n      }\n\n\n      /**\n       * CBC mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cbc_enc(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          I0 ^ x0,\n          I1 ^ x1,\n          I2 ^ x2,\n          I3 ^ x3,\n        );\n\n        I0 = S0,\n          I1 = S1,\n          I2 = S2,\n          I3 = S3;\n      }\n\n      /**\n       * CBC mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cbc_dec(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var t = 0;\n\n        _core(\n          0x0400, 0x0c00, 0x2000,\n          R,\n          x0,\n          x3,\n          x2,\n          x1,\n        );\n\n        t = S1, S1 = S3, S3 = t;\n\n        S0 = S0 ^ I0,\n          S1 = S1 ^ I1,\n          S2 = S2 ^ I2,\n          S3 = S3 ^ I3;\n\n        I0 = x0,\n          I1 = x1,\n          I2 = x2,\n          I3 = x3;\n      }\n\n      /**\n       * CFB mode encryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cfb_enc(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          I0,\n          I1,\n          I2,\n          I3,\n        );\n\n        I0 = S0 = S0 ^ x0,\n          I1 = S1 = S1 ^ x1,\n          I2 = S2 = S2 ^ x2,\n          I3 = S3 = S3 ^ x3;\n      }\n\n\n      /**\n       * CFB mode decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _cfb_dec(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          I0,\n          I1,\n          I2,\n          I3,\n        );\n\n        S0 = S0 ^ x0,\n          S1 = S1 ^ x1,\n          S2 = S2 ^ x2,\n          S3 = S3 ^ x3;\n\n        I0 = x0,\n          I1 = x1,\n          I2 = x2,\n          I3 = x3;\n      }\n\n      /**\n       * OFB mode encryption / decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _ofb(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          I0,\n          I1,\n          I2,\n          I3,\n        );\n\n        I0 = S0,\n          I1 = S1,\n          I2 = S2,\n          I3 = S3;\n\n        S0 = S0 ^ x0,\n          S1 = S1 ^ x1,\n          S2 = S2 ^ x2,\n          S3 = S3 ^ x3;\n      }\n\n      /**\n       * CTR mode encryption / decryption\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _ctr(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        _core(\n          0x0000, 0x0800, 0x1000,\n          R,\n          N0,\n          N1,\n          N2,\n          N3,\n        );\n\n        N3 = (~M3 & N3) | M3 & (N3 + 1);\n          N2 = (~M2 & N2) | M2 & (N2 + ((N3 | 0) == 0));\n          N1 = (~M1 & N1) | M1 & (N1 + ((N2 | 0) == 0));\n          N0 = (~M0 & N0) | M0 & (N0 + ((N1 | 0) == 0));\n\n        S0 = S0 ^ x0;\n          S1 = S1 ^ x1;\n          S2 = S2 ^ x2;\n          S3 = S3 ^ x3;\n      }\n\n      /**\n       * GCM mode MAC calculation\n       * @param {number} x0 - 128-bit input block vector\n       * @param {number} x1 - 128-bit input block vector\n       * @param {number} x2 - 128-bit input block vector\n       * @param {number} x3 - 128-bit input block vector\n       */\n      function _gcm_mac(x0, x1, x2, x3) {\n        x0 = x0 | 0;\n        x1 = x1 | 0;\n        x2 = x2 | 0;\n        x3 = x3 | 0;\n\n        var y0 = 0, y1 = 0, y2 = 0, y3 = 0,\n          z0 = 0, z1 = 0, z2 = 0, z3 = 0,\n          i = 0, c = 0;\n\n        x0 = x0 ^ I0,\n          x1 = x1 ^ I1,\n          x2 = x2 ^ I2,\n          x3 = x3 ^ I3;\n\n        y0 = H0 | 0,\n          y1 = H1 | 0,\n          y2 = H2 | 0,\n          y3 = H3 | 0;\n\n        for (; (i | 0) < 128; i = (i + 1) | 0) {\n          if (y0 >>> 31) {\n            z0 = z0 ^ x0,\n              z1 = z1 ^ x1,\n              z2 = z2 ^ x2,\n              z3 = z3 ^ x3;\n          }\n\n          y0 = (y0 << 1) | (y1 >>> 31),\n            y1 = (y1 << 1) | (y2 >>> 31),\n            y2 = (y2 << 1) | (y3 >>> 31),\n            y3 = (y3 << 1);\n\n          c = x3 & 1;\n\n          x3 = (x3 >>> 1) | (x2 << 31),\n            x2 = (x2 >>> 1) | (x1 << 31),\n            x1 = (x1 >>> 1) | (x0 << 31),\n            x0 = (x0 >>> 1);\n\n          if (c) x0 = x0 ^ 0xe1000000;\n        }\n\n        I0 = z0,\n          I1 = z1,\n          I2 = z2,\n          I3 = z3;\n      }\n\n      /**\n       * Set the internal rounds number.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} r - number if inner AES rounds\n       */\n      function set_rounds(r) {\n        r = r | 0;\n        R = r;\n      }\n\n      /**\n       * Populate the internal state of the module.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} s0 - state vector\n       * @param {number} s1 - state vector\n       * @param {number} s2 - state vector\n       * @param {number} s3 - state vector\n       */\n      function set_state(s0, s1, s2, s3) {\n        s0 = s0 | 0;\n        s1 = s1 | 0;\n        s2 = s2 | 0;\n        s3 = s3 | 0;\n\n        S0 = s0,\n          S1 = s1,\n          S2 = s2,\n          S3 = s3;\n      }\n\n      /**\n       * Populate the internal iv of the module.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} i0 - iv vector\n       * @param {number} i1 - iv vector\n       * @param {number} i2 - iv vector\n       * @param {number} i3 - iv vector\n       */\n      function set_iv(i0, i1, i2, i3) {\n        i0 = i0 | 0;\n        i1 = i1 | 0;\n        i2 = i2 | 0;\n        i3 = i3 | 0;\n\n        I0 = i0,\n          I1 = i1,\n          I2 = i2,\n          I3 = i3;\n      }\n\n      /**\n       * Set nonce for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} n0 - nonce vector\n       * @param {number} n1 - nonce vector\n       * @param {number} n2 - nonce vector\n       * @param {number} n3 - nonce vector\n       */\n      function set_nonce(n0, n1, n2, n3) {\n        n0 = n0 | 0;\n        n1 = n1 | 0;\n        n2 = n2 | 0;\n        n3 = n3 | 0;\n\n        N0 = n0,\n          N1 = n1,\n          N2 = n2,\n          N3 = n3;\n      }\n\n      /**\n       * Set counter mask for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} m0 - counter mask vector\n       * @param {number} m1 - counter mask vector\n       * @param {number} m2 - counter mask vector\n       * @param {number} m3 - counter mask vector\n       */\n      function set_mask(m0, m1, m2, m3) {\n        m0 = m0 | 0;\n        m1 = m1 | 0;\n        m2 = m2 | 0;\n        m3 = m3 | 0;\n\n        M0 = m0,\n          M1 = m1,\n          M2 = m2,\n          M3 = m3;\n      }\n\n      /**\n       * Set counter for CTR-family modes.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} c0 - counter vector\n       * @param {number} c1 - counter vector\n       * @param {number} c2 - counter vector\n       * @param {number} c3 - counter vector\n       */\n      function set_counter(c0, c1, c2, c3) {\n        c0 = c0 | 0;\n        c1 = c1 | 0;\n        c2 = c2 | 0;\n        c3 = c3 | 0;\n\n        N3 = (~M3 & N3) | M3 & c3,\n          N2 = (~M2 & N2) | M2 & c2,\n          N1 = (~M1 & N1) | M1 & c1,\n          N0 = (~M0 & N0) | M0 & c0;\n      }\n\n      /**\n       * Store the internal state vector into the heap.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} pos - offset where to put the data\n       * @return {number} The number of bytes have been written into the heap, always 16.\n       */\n      function get_state(pos) {\n        pos = pos | 0;\n\n        if (pos & 15) return -1;\n\n        DATA[pos | 0] = S0 >>> 24,\n          DATA[pos | 1] = S0 >>> 16 & 255,\n          DATA[pos | 2] = S0 >>> 8 & 255,\n          DATA[pos | 3] = S0 & 255,\n          DATA[pos | 4] = S1 >>> 24,\n          DATA[pos | 5] = S1 >>> 16 & 255,\n          DATA[pos | 6] = S1 >>> 8 & 255,\n          DATA[pos | 7] = S1 & 255,\n          DATA[pos | 8] = S2 >>> 24,\n          DATA[pos | 9] = S2 >>> 16 & 255,\n          DATA[pos | 10] = S2 >>> 8 & 255,\n          DATA[pos | 11] = S2 & 255,\n          DATA[pos | 12] = S3 >>> 24,\n          DATA[pos | 13] = S3 >>> 16 & 255,\n          DATA[pos | 14] = S3 >>> 8 & 255,\n          DATA[pos | 15] = S3 & 255;\n\n        return 16;\n      }\n\n      /**\n       * Store the internal iv vector into the heap.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} pos - offset where to put the data\n       * @return {number} The number of bytes have been written into the heap, always 16.\n       */\n      function get_iv(pos) {\n        pos = pos | 0;\n\n        if (pos & 15) return -1;\n\n        DATA[pos | 0] = I0 >>> 24,\n          DATA[pos | 1] = I0 >>> 16 & 255,\n          DATA[pos | 2] = I0 >>> 8 & 255,\n          DATA[pos | 3] = I0 & 255,\n          DATA[pos | 4] = I1 >>> 24,\n          DATA[pos | 5] = I1 >>> 16 & 255,\n          DATA[pos | 6] = I1 >>> 8 & 255,\n          DATA[pos | 7] = I1 & 255,\n          DATA[pos | 8] = I2 >>> 24,\n          DATA[pos | 9] = I2 >>> 16 & 255,\n          DATA[pos | 10] = I2 >>> 8 & 255,\n          DATA[pos | 11] = I2 & 255,\n          DATA[pos | 12] = I3 >>> 24,\n          DATA[pos | 13] = I3 >>> 16 & 255,\n          DATA[pos | 14] = I3 >>> 8 & 255,\n          DATA[pos | 15] = I3 & 255;\n\n        return 16;\n      }\n\n      /**\n       * GCM initialization.\n       * @instance\n       * @memberof AES_asm\n       */\n      function gcm_init() {\n        _ecb_enc(0, 0, 0, 0);\n        H0 = S0,\n          H1 = S1,\n          H2 = S2,\n          H3 = S3;\n      }\n\n      /**\n       * Perform ciphering operation on the supplied data.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)\n       * @param {number} pos - offset of the data being processed\n       * @param {number} len - length of the data being processed\n       * @return {number} Actual amount of data have been processed.\n       */\n      function cipher(mode, pos, len) {\n        mode = mode | 0;\n        pos = pos | 0;\n        len = len | 0;\n\n        var ret = 0;\n\n        if (pos & 15) return -1;\n\n        while ((len | 0) >= 16) {\n          _cipher_modes[mode & 7](\n            DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3],\n            DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7],\n            DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11],\n            DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15],\n          );\n\n          DATA[pos | 0] = S0 >>> 24,\n            DATA[pos | 1] = S0 >>> 16 & 255,\n            DATA[pos | 2] = S0 >>> 8 & 255,\n            DATA[pos | 3] = S0 & 255,\n            DATA[pos | 4] = S1 >>> 24,\n            DATA[pos | 5] = S1 >>> 16 & 255,\n            DATA[pos | 6] = S1 >>> 8 & 255,\n            DATA[pos | 7] = S1 & 255,\n            DATA[pos | 8] = S2 >>> 24,\n            DATA[pos | 9] = S2 >>> 16 & 255,\n            DATA[pos | 10] = S2 >>> 8 & 255,\n            DATA[pos | 11] = S2 & 255,\n            DATA[pos | 12] = S3 >>> 24,\n            DATA[pos | 13] = S3 >>> 16 & 255,\n            DATA[pos | 14] = S3 >>> 8 & 255,\n            DATA[pos | 15] = S3 & 255;\n\n          ret = (ret + 16) | 0,\n            pos = (pos + 16) | 0,\n            len = (len - 16) | 0;\n        }\n\n        return ret | 0;\n      }\n\n      /**\n       * Calculates MAC of the supplied data.\n       * @instance\n       * @memberof AES_asm\n       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)\n       * @param {number} pos - offset of the data being processed\n       * @param {number} len - length of the data being processed\n       * @return {number} Actual amount of data have been processed.\n       */\n      function mac(mode, pos, len) {\n        mode = mode | 0;\n        pos = pos | 0;\n        len = len | 0;\n\n        var ret = 0;\n\n        if (pos & 15) return -1;\n\n        while ((len | 0) >= 16) {\n          _mac_modes[mode & 1](\n            DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3],\n            DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7],\n            DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11],\n            DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15],\n          );\n\n          ret = (ret + 16) | 0,\n            pos = (pos + 16) | 0,\n            len = (len - 16) | 0;\n        }\n\n        return ret | 0;\n      }\n\n      /**\n       * AES cipher modes table (virual methods)\n       */\n      var _cipher_modes = [_ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr];\n\n      /**\n       * AES MAC modes table (virual methods)\n       */\n      var _mac_modes = [_cbc_enc, _gcm_mac];\n\n      /**\n       * Asm.js module exports\n       */\n      return {\n        set_rounds: set_rounds,\n        set_state: set_state,\n        set_iv: set_iv,\n        set_nonce: set_nonce,\n        set_mask: set_mask,\n        set_counter: set_counter,\n        get_state: get_state,\n        get_iv: get_iv,\n        gcm_init: gcm_init,\n        cipher: cipher,\n        mac: mac,\n      };\n    }(stdlib, foreign, buffer);\n\n    asm.set_key = set_key;\n\n    return asm;\n  };\n\n  /**\n   * AES enciphering mode constants\n   * @enum {number}\n   * @const\n   */\n  wrapper.ENC = {\n    ECB: 0,\n    CBC: 2,\n    CFB: 4,\n    OFB: 6,\n    CTR: 7,\n  },\n\n    /**\n     * AES deciphering mode constants\n     * @enum {number}\n     * @const\n     */\n    wrapper.DEC = {\n      ECB: 1,\n      CBC: 3,\n      CFB: 5,\n      OFB: 6,\n      CTR: 7,\n    },\n\n    /**\n     * AES MAC mode constants\n     * @enum {number}\n     * @const\n     */\n    wrapper.MAC = {\n      CBC: 0,\n      GCM: 1,\n    };\n\n  /**\n   * Heap data offset\n   * @type {number}\n   * @const\n   */\n  wrapper.HEAP_DATA = 0x4000;\n\n  return wrapper;\n}();\n","// shared asm.js module and heap\nimport { AES_asm } from './aes.asm';\n\nexport var _AES_heap_instance = new Uint8Array(0x100000); // 1MB\nexport var _AES_asm_instance = AES_asm(null, _AES_heap_instance.buffer);\n","import { AES_asm } from './aes.asm';\nimport { _heap_init, _heap_write, is_bytes, is_number } from '../utils';\nimport { IllegalArgumentError, SecurityError } from '../errors';\n\nexport class AES {\n  constructor(key, iv, padding, heap, asm) {\n    this.nonce = null;\n    this.counter = 0;\n    this.counterSize = 0;\n\n    this.heap = _heap_init(Uint8Array, heap).subarray(AES_asm.HEAP_DATA);\n    this.asm = asm || AES_asm(null, this.heap.buffer);\n    this.mode = null;\n    this.key = null;\n\n    this.AES_reset(key, iv, padding);\n  }\n\n  /**\n   * @param {Uint8Array} key\n   */\n  AES_set_key(key) {\n    if (key !== undefined) {\n      if (!is_bytes(key)) {\n        throw new TypeError('unexpected key type');\n      }\n\n      var keylen = key.length;\n      if (keylen !== 16 && keylen !== 24 && keylen !== 32) throw new IllegalArgumentError('illegal key size');\n\n      var keyview = new DataView(key.buffer, key.byteOffset, key.byteLength);\n      this.asm.set_key(\n        keylen >> 2,\n        keyview.getUint32(0),\n        keyview.getUint32(4),\n        keyview.getUint32(8),\n        keyview.getUint32(12),\n        keylen > 16 ? keyview.getUint32(16) : 0,\n        keylen > 16 ? keyview.getUint32(20) : 0,\n        keylen > 24 ? keyview.getUint32(24) : 0,\n        keylen > 24 ? keyview.getUint32(28) : 0,\n      );\n\n      this.key = key;\n    } else if (!this.key) {\n      throw new Error('key is required');\n    }\n  }\n\n  /**\n   * This should be mixin instead of inheritance\n   *\n   * @param {Uint8Array} nonce\n   * @param {number} [counter]\n   * @param {number} [size]\n   */\n  AES_CTR_set_options(nonce, counter, size) {\n    if (size !== undefined) {\n      if (size < 8 || size > 48) throw new IllegalArgumentError('illegal counter size');\n\n      this.counterSize = size;\n\n      var mask = Math.pow(2, size) - 1;\n      this.asm.set_mask(0, 0, (mask / 0x100000000) | 0, mask | 0);\n    } else {\n      this.counterSize = size = 48;\n      this.asm.set_mask(0, 0, 0xffff, 0xffffffff);\n    }\n\n    if (nonce !== undefined) {\n      if (!is_bytes(nonce)) {\n        throw new TypeError('unexpected nonce type');\n      }\n\n      var len = nonce.length;\n      if (!len || len > 16) throw new IllegalArgumentError('illegal nonce size');\n\n      this.nonce = nonce;\n\n      var view = new DataView(new ArrayBuffer(16));\n      new Uint8Array(view.buffer).set(nonce);\n\n      this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));\n    } else {\n      throw new Error('nonce is required');\n    }\n\n    if (counter !== undefined) {\n      if (!is_number(counter)) throw new TypeError('unexpected counter type');\n\n      if (counter < 0 || counter >= Math.pow(2, size)) throw new IllegalArgumentError('illegal counter value');\n\n      this.counter = counter;\n\n      this.asm.set_counter(0, 0, (counter / 0x100000000) | 0, counter | 0);\n    } else {\n      this.counter = 0;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} iv\n   */\n  AES_set_iv(iv) {\n    if (iv !== undefined && iv !== null) {\n      if (!is_bytes(iv)) {\n        throw new TypeError('unexpected iv type');\n      }\n\n      if (iv.length !== 16) throw new IllegalArgumentError('illegal iv size');\n\n      var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);\n\n      this.iv = iv;\n      this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));\n    } else {\n      this.iv = null;\n      this.asm.set_iv(0, 0, 0, 0);\n    }\n  }\n\n  /**\n   * @param {boolean} padding\n   */\n  AES_set_padding(padding) {\n    if (padding !== undefined) {\n      this.padding = !!padding;\n    } else {\n      this.padding = true;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv]\n   * @param {boolean} [padding]\n   */\n  AES_reset(key, iv, padding) {\n    this.result = null;\n    this.pos = 0;\n    this.len = 0;\n\n    this.AES_set_key(key);\n    this.AES_set_iv(iv);\n    this.AES_set_padding(padding);\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Encrypt_process(data) {\n    if (!is_bytes(data)) throw new TypeError(\"data isn't of expected type\");\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.ENC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      dpos = 0,\n      dlen = data.length || 0,\n      rpos = 0,\n      rlen = (len + dlen) & -16,\n      wlen = 0;\n\n    var result = new Uint8Array(rlen);\n\n    while (dlen > 0) {\n      wlen = _heap_write(heap, pos + len, data, dpos, dlen);\n      len += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher(amode, hpos + pos, len);\n\n      if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);\n      rpos += wlen;\n\n      if (wlen < len) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Encrypt_finish(data) {\n    var presult = null,\n      prlen = 0;\n\n    if (data !== undefined) {\n      presult = this.AES_Encrypt_process(data).result;\n      prlen = presult.length;\n    }\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.ENC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      plen = 16 - len % 16,\n      rlen = len;\n\n    if (this.hasOwnProperty('padding')) {\n      if (this.padding) {\n        for (var p = 0; p < plen; ++p) heap[pos + len + p] = plen;\n        len += plen;\n        rlen = len;\n      } else if (len % 16) {\n        throw new IllegalArgumentError('data length must be a multiple of the block size');\n      }\n    } else {\n      len += plen;\n    }\n\n    var result = new Uint8Array(prlen + rlen);\n\n    if (prlen) result.set(presult);\n\n    if (len) asm.cipher(amode, hpos + pos, len);\n\n    if (rlen) result.set(heap.subarray(pos, pos + rlen), prlen);\n\n    this.result = result;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Decrypt_process(data) {\n    if (!is_bytes(data)) throw new TypeError(\"data isn't of expected type\");\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.DEC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      dpos = 0,\n      dlen = data.length || 0,\n      rpos = 0,\n      rlen = (len + dlen) & -16,\n      plen = 0,\n      wlen = 0;\n\n    if (this.padding) {\n      plen = len + dlen - rlen || 16;\n      rlen -= plen;\n    }\n\n    var result = new Uint8Array(rlen);\n\n    while (dlen > 0) {\n      wlen = _heap_write(heap, pos + len, data, dpos, dlen);\n      len += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher(amode, hpos + pos, len - (!dlen ? plen : 0));\n\n      if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);\n      rpos += wlen;\n\n      if (wlen < len) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   */\n  AES_Decrypt_finish(data) {\n    var presult = null,\n      prlen = 0;\n\n    if (data !== undefined) {\n      presult = this.AES_Decrypt_process(data).result;\n      prlen = presult.length;\n    }\n\n    var asm = this.asm,\n      heap = this.heap,\n      amode = AES_asm.DEC[this.mode],\n      hpos = AES_asm.HEAP_DATA,\n      pos = this.pos,\n      len = this.len,\n      rlen = len;\n\n    if (len > 0) {\n      if (len % 16) {\n        if (this.hasOwnProperty('padding')) {\n          throw new IllegalArgumentError('data length must be a multiple of the block size');\n        } else {\n          len += 16 - len % 16;\n        }\n      }\n\n      asm.cipher(amode, hpos + pos, len);\n\n      if (this.hasOwnProperty('padding') && this.padding) {\n        var pad = heap[pos + rlen - 1];\n        if (pad < 1 || pad > 16 || pad > rlen) throw new SecurityError('bad padding');\n\n        var pcheck = 0;\n        for (var i = pad; i > 1; i--) pcheck |= pad ^ heap[pos + rlen - i];\n        if (pcheck) throw new SecurityError('bad padding');\n\n        rlen -= pad;\n      }\n    }\n\n    var result = new Uint8Array(prlen + rlen);\n\n    if (prlen > 0) {\n      result.set(presult);\n    }\n\n    if (rlen > 0) {\n      result.set(heap.subarray(pos, pos + rlen), prlen);\n    }\n\n    this.result = result;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n}\n","/**\n * Cipher Block Chaining Mode (CBC)\n */\nimport { AES } from '../aes';\n\nexport class AES_CBC extends AES {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv = null, padding = true, heap, asm) {\n    super(key, iv, padding, heap, asm);\n\n    this.mode = 'CBC';\n    this.BLOCK_SIZE = 16;\n  }\n\n  encrypt(data) {\n    return this.AES_Encrypt_finish(data);\n  }\n\n  decrypt(data) {\n    return this.AES_Decrypt_finish(data);\n  }\n}\n\nexport class AES_CBC_Encrypt extends AES_CBC {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv, padding, heap, asm) {\n    super(key, iv, padding, heap, asm);\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @returns {AES_CBC_Encrypt}\n   */\n  reset(key) {\n    return this.AES_reset(key, null, true);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Encrypt}\n   */\n  process(data) {\n    return this.AES_Encrypt_process(data);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Encrypt}\n   */\n  finish(data) {\n    return this.AES_Encrypt_finish(data);\n  }\n}\n\nexport class AES_CBC_Decrypt extends AES_CBC {\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} [iv=null]\n   * @param {boolean} [padding=true]\n   * @param {Uint8Array} [heap]\n   * @param {Uint8Array} [asm]\n   */\n  constructor(key, iv, padding, heap, asm) {\n    super(key, iv, padding, heap, asm);\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @returns {AES_CBC_Decrypt}\n   */\n  reset(key) {\n    return this.AES_reset(key, null, true);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Decrypt}\n   */\n  process(data) {\n    return this.AES_Decrypt_process(data);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @returns {AES_CBC_Decrypt}\n   */\n  finish(data) {\n    return this.AES_Decrypt_finish(data);\n  }\n}\n","import { _AES_asm_instance, _AES_heap_instance } from '../exports';\nimport { AES_CBC, AES_CBC_Decrypt, AES_CBC_Encrypt } from './cbc';\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {boolean} [padding]\n * @param {Uint8Array} [iv]\n * @returns {Uint8Array}\n */\nfunction AES_CBC_encrypt_bytes(data, key, padding, iv) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (key === undefined) throw new SyntaxError('key required');\n  return new AES_CBC(key, iv, padding, _AES_heap_instance, _AES_asm_instance).encrypt(data).result;\n}\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {boolean} [padding]\n * @param {Uint8Array} [iv]\n * @returns {Uint8Array}\n */\nfunction AES_CBC_decrypt_bytes(data, key, padding, iv) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (key === undefined) throw new SyntaxError('key required');\n  return new AES_CBC(key, iv, padding, _AES_heap_instance, _AES_asm_instance).decrypt(data).result;\n}\n\nAES_CBC.encrypt = AES_CBC_encrypt_bytes;\nAES_CBC.decrypt = AES_CBC_decrypt_bytes;\n\nexport { AES_CBC, AES_CBC_Encrypt, AES_CBC_Decrypt };\n","/**\n * Galois/Counter mode\n */\n\nimport { IllegalArgumentError, IllegalStateError, SecurityError } from '../../errors';\nimport { _heap_write, is_bytes, is_number } from '../../utils';\nimport { AES } from '../aes';\nimport { AES_asm } from '../aes.asm';\n\nvar _AES_GCM_data_maxLength = 68719476704; // 2^36 - 2^5\n\nexport class AES_GCM extends AES {\n  constructor(key, nonce, adata, tagSize, heap, asm) {\n    super(key, undefined, false, heap, asm);\n\n    this.nonce = null;\n    this.adata = null;\n    this.iv = null;\n    this.counter = 1;\n    this.tagSize = 16;\n    this.mode = 'GCM';\n    this.BLOCK_SIZE = 16;\n\n    this.reset(key, tagSize, nonce, adata);\n  }\n\n  reset(key, tagSize, nonce, adata) {\n    return this.AES_GCM_reset(key, tagSize, nonce, adata);\n  }\n\n  encrypt(data) {\n    return this.AES_GCM_encrypt(data);\n  }\n\n  decrypt(data) {\n    return this.AES_GCM_decrypt(data);\n  }\n\n  AES_GCM_Encrypt_process(data) {\n    if (!is_bytes(data)) throw new TypeError(\"data isn't of expected type\");\n\n    var dpos = 0,\n      dlen = data.length || 0,\n      asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      pos = this.pos,\n      len = this.len,\n      rpos = 0,\n      rlen = (len + dlen) & -16,\n      wlen = 0;\n\n    if (((counter - 1) << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');\n\n    var result = new Uint8Array(rlen);\n\n    while (dlen > 0) {\n      wlen = _heap_write(heap, pos + len, data, dpos, dlen);\n      len += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len);\n      wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);\n\n      if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);\n      counter += wlen >>> 4;\n      rpos += wlen;\n\n      if (wlen < len) {\n        pos += wlen;\n        len -= wlen;\n      } else {\n        pos = 0;\n        len = 0;\n      }\n    }\n\n    this.result = result;\n    this.counter = counter;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  AES_GCM_Encrypt_finish() {\n    var asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      tagSize = this.tagSize,\n      adata = this.adata,\n      pos = this.pos,\n      len = this.len;\n\n    var result = new Uint8Array(len + tagSize);\n\n    asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, (len + 15) & -16);\n    if (len) result.set(heap.subarray(pos, pos + len));\n\n    for (var i = len; i & 15; i++) heap[pos + i] = 0;\n    asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);\n\n    var alen = adata !== null ? adata.length : 0,\n      clen = ((counter - 1) << 4) + len;\n    (heap[0] = heap[1] = heap[2] = 0),\n      (heap[3] = alen >>> 29),\n      (heap[4] = alen >>> 21),\n      (heap[5] = (alen >>> 13) & 255),\n      (heap[6] = (alen >>> 5) & 255),\n      (heap[7] = (alen << 3) & 255),\n      (heap[8] = heap[9] = heap[10] = 0),\n      (heap[11] = clen >>> 29),\n      (heap[12] = (clen >>> 21) & 255),\n      (heap[13] = (clen >>> 13) & 255),\n      (heap[14] = (clen >>> 5) & 255),\n      (heap[15] = (clen << 3) & 255);\n    asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);\n    asm.get_iv(AES_asm.HEAP_DATA);\n\n    asm.set_counter(0, 0, 0, this.gamma0);\n    asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);\n    result.set(heap.subarray(0, tagSize), len);\n\n    this.result = result;\n    this.counter = 1;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  AES_GCM_Decrypt_process(data) {\n    if (!is_bytes(data)) throw new TypeError(\"data isn't of expected type\");\n\n    var dpos = 0,\n      dlen = data.length || 0,\n      asm = this.asm,\n      heap = this.heap,\n      counter = this.counter,\n      tagSize = this.tagSize,\n      pos = this.pos,\n      len = this.len,\n      rpos = 0,\n      rlen = len + dlen > tagSize ? (len + dlen - tagSize) & -16 : 0,\n      tlen = len + dlen - rlen,\n      wlen = 0;\n\n    if (((counter - 1) << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');\n\n    var result = new Uint8Array(rlen);\n\n    while (dlen > tlen) {\n      wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);\n      len += wlen;\n      dpos += wlen;\n      dlen -= wlen;\n\n      wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);\n      wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);\n\n      if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);\n      counter += wlen >>> 4;\n      rpos += wlen;\n\n      pos = 0;\n      len = 0;\n    }\n\n    if (dlen > 0) {\n      len += _heap_write(heap, 0, data, dpos, dlen);\n    }\n\n    this.result = result;\n    this.counter = counter;\n    this.pos = pos;\n    this.len = len;\n\n    return this;\n  }\n\n  AES_GCM_Decrypt_finish() {\n    var asm = this.asm,\n      heap = this.heap,\n      tagSize = this.tagSize,\n      adata = this.adata,\n      counter = this.counter,\n      pos = this.pos,\n      len = this.len,\n      rlen = len - tagSize,\n      wlen = 0;\n\n    if (len < tagSize) throw new IllegalStateError('authentication tag not found');\n\n    var result = new Uint8Array(rlen),\n      atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));\n\n    for (var i = rlen; i & 15; i++) heap[pos + i] = 0;\n\n    wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);\n    wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, i);\n    if (rlen) result.set(heap.subarray(pos, pos + rlen));\n\n    var alen = adata !== null ? adata.length : 0,\n      clen = ((counter - 1) << 4) + len - tagSize;\n    (heap[0] = heap[1] = heap[2] = 0),\n      (heap[3] = alen >>> 29),\n      (heap[4] = alen >>> 21),\n      (heap[5] = (alen >>> 13) & 255),\n      (heap[6] = (alen >>> 5) & 255),\n      (heap[7] = (alen << 3) & 255),\n      (heap[8] = heap[9] = heap[10] = 0),\n      (heap[11] = clen >>> 29),\n      (heap[12] = (clen >>> 21) & 255),\n      (heap[13] = (clen >>> 13) & 255),\n      (heap[14] = (clen >>> 5) & 255),\n      (heap[15] = (clen << 3) & 255);\n    asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);\n    asm.get_iv(AES_asm.HEAP_DATA);\n\n    asm.set_counter(0, 0, 0, this.gamma0);\n    asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);\n\n    var acheck = 0;\n    for (var i = 0; i < tagSize; ++i) acheck |= atag[i] ^ heap[i];\n    if (acheck) throw new SecurityError('data integrity check failed');\n\n    this.result = result;\n    this.counter = 1;\n    this.pos = 0;\n    this.len = 0;\n\n    return this;\n  }\n\n  AES_GCM_decrypt(data) {\n    var result1 = this.AES_GCM_Decrypt_process(data).result;\n    var result2 = this.AES_GCM_Decrypt_finish().result;\n\n    var result = new Uint8Array(result1.length + result2.length);\n    if (result1.length) result.set(result1);\n    if (result2.length) result.set(result2, result1.length);\n    this.result = result;\n\n    return this;\n  }\n\n  AES_GCM_encrypt(data) {\n    var result1 = this.AES_GCM_Encrypt_process(data).result;\n    var result2 = this.AES_GCM_Encrypt_finish().result;\n\n    var result = new Uint8Array(result1.length + result2.length);\n    if (result1.length) result.set(result1);\n    if (result2.length) result.set(result2, result1.length);\n    this.result = result;\n\n    return this;\n  }\n\n  AES_GCM_reset(key, tagSize, nonce, adata, counter, iv) {\n    this.AES_reset(key, undefined, false);\n\n    var asm = this.asm;\n    var heap = this.heap;\n\n    asm.gcm_init();\n\n    var tagSize = tagSize;\n    if (tagSize !== undefined) {\n      if (!is_number(tagSize)) throw new TypeError('tagSize must be a number');\n\n      if (tagSize < 4 || tagSize > 16) throw new IllegalArgumentError('illegal tagSize value');\n\n      this.tagSize = tagSize;\n    } else {\n      this.tagSize = 16;\n    }\n\n    if (nonce !== undefined) {\n      if (!is_bytes(nonce)) {\n        throw new TypeError('unexpected nonce type');\n      }\n\n      this.nonce = nonce;\n\n      var noncelen = nonce.length || 0,\n        noncebuf = new Uint8Array(16);\n      if (noncelen !== 12) {\n        this._gcm_mac_process(nonce);\n\n        (heap[0] = heap[1] = heap[2] = heap[3] = heap[4] = heap[5] = heap[6] = heap[7] = heap[8] = heap[9] = heap[10] = 0),\n          (heap[11] = noncelen >>> 29),\n          (heap[12] = (noncelen >>> 21) & 255),\n          (heap[13] = (noncelen >>> 13) & 255),\n          (heap[14] = (noncelen >>> 5) & 255),\n          (heap[15] = (noncelen << 3) & 255);\n        asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);\n\n        asm.get_iv(AES_asm.HEAP_DATA);\n        asm.set_iv();\n\n        noncebuf.set(heap.subarray(0, 16));\n      } else {\n        noncebuf.set(nonce);\n        noncebuf[15] = 1;\n      }\n\n      var nonceview = new DataView(noncebuf.buffer);\n      this.gamma0 = nonceview.getUint32(12);\n\n      asm.set_nonce(nonceview.getUint32(0), nonceview.getUint32(4), nonceview.getUint32(8), 0);\n      asm.set_mask(0, 0, 0, 0xffffffff);\n    } else {\n      throw new Error('nonce is required');\n    }\n\n    if (adata !== undefined && adata !== null) {\n      if (!is_bytes(adata)) {\n        throw new TypeError('unexpected adata type');\n      }\n\n      if (adata.length > _AES_GCM_data_maxLength) throw new IllegalArgumentError('illegal adata length');\n\n      if (adata.length) {\n        this.adata = adata;\n        this._gcm_mac_process(adata);\n      } else {\n        this.adata = null;\n      }\n    } else {\n      this.adata = null;\n    }\n\n    if (counter !== undefined) {\n      if (!is_number(counter)) throw new TypeError('counter must be a number');\n\n      if (counter < 1 || counter > 0xffffffff) throw new RangeError('counter must be a positive 32-bit integer');\n\n      this.counter = counter;\n      asm.set_counter(0, 0, 0, (this.gamma0 + counter) | 0);\n    } else {\n      this.counter = 1;\n      asm.set_counter(0, 0, 0, (this.gamma0 + 1) | 0);\n    }\n\n    if (iv !== undefined) {\n      if (!is_number(iv)) throw new TypeError('iv must be a number');\n\n      this.iv = iv;\n\n      this.AES_set_iv(iv);\n    }\n\n    return this;\n  }\n\n  _gcm_mac_process(data) {\n    var heap = this.heap,\n      asm = this.asm,\n      dpos = 0,\n      dlen = data.length || 0,\n      wlen = 0;\n\n    while (dlen > 0) {\n      wlen = _heap_write(heap, 0, data, dpos, dlen);\n      dpos += wlen;\n      dlen -= wlen;\n\n      while (wlen & 15) heap[wlen++] = 0;\n\n      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, wlen);\n    }\n  }\n}\n\nexport class AES_GCM_Encrypt extends AES_GCM {\n  constructor(key, nonce, adata, tagSize, heap, asm) {\n    super(key, nonce, adata, tagSize, heap, asm);\n  }\n  process(data) {\n    return this.AES_GCM_Encrypt_process(data);\n  }\n  finish() {\n    return this.AES_GCM_Encrypt_finish();\n  }\n}\n\nexport class AES_GCM_Decrypt extends AES_GCM {\n  constructor(key, nonce, adata, tagSize, heap, asm) {\n    super(key, nonce, adata, tagSize, heap, asm);\n  }\n\n  process(data) {\n    return this.AES_GCM_Decrypt_process(data);\n  }\n  finish() {\n    return this.AES_GCM_Decrypt_finish();\n  }\n}\n","import { _heap_write, is_buffer, is_bytes, is_string, string_to_bytes } from '../utils';\nimport { IllegalStateError } from '../errors';\n\nexport function hash_reset() {\n  this.result = null;\n  this.pos = 0;\n  this.len = 0;\n\n  this.asm.reset();\n\n  return this;\n}\n\nexport function hash_process(data) {\n  if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n  if (is_string(data)) data = string_to_bytes(data);\n\n  if (is_buffer(data)) data = new Uint8Array(data);\n\n  if (!is_bytes(data)) throw new TypeError(\"data isn't of expected type\");\n\n  var asm = this.asm,\n    heap = this.heap,\n    hpos = this.pos,\n    hlen = this.len,\n    dpos = 0,\n    dlen = data.length,\n    wlen = 0;\n\n  while (dlen > 0) {\n    wlen = _heap_write(heap, hpos + hlen, data, dpos, dlen);\n    hlen += wlen;\n    dpos += wlen;\n    dlen -= wlen;\n\n    wlen = asm.process(hpos, hlen);\n\n    hpos += wlen;\n    hlen -= wlen;\n\n    if (!hlen) hpos = 0;\n  }\n\n  this.pos = hpos;\n  this.len = hlen;\n\n  return this;\n}\n\nexport function hash_finish() {\n  if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n  this.asm.finish(this.pos, this.len, 0);\n\n  this.result = new Uint8Array(this.HASH_SIZE);\n  this.result.set(this.heap.subarray(0, this.HASH_SIZE));\n\n  this.pos = 0;\n  this.len = 0;\n\n  return this;\n}\n","/**\n * AES-GCM exports\n */\n\nimport { _AES_asm_instance, _AES_heap_instance } from '../exports';\nimport { AES_GCM, AES_GCM_Decrypt, AES_GCM_Encrypt } from './gcm';\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {Uint8Array} nonce\n * @param {Uint8Array} [adata]\n * @param {number} [tagSize]\n * @return {Uint8Array}\n */\nfunction AES_GCM_encrypt_bytes(data, key, nonce, adata, tagSize) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (key === undefined) throw new SyntaxError('key required');\n  if (nonce === undefined) throw new SyntaxError('nonce required');\n  return new AES_GCM(key, nonce, adata, tagSize, _AES_heap_instance, _AES_asm_instance).encrypt(data).result;\n}\n\n/**\n * @param {Uint8Array} data\n * @param {Uint8Array} key\n * @param {Uint8Array} nonce\n * @param {Uint8Array} [adata]\n * @param {number} [tagSize]\n * @return {Uint8Array}\n */\nfunction AES_GCM_decrypt_bytes(data, key, nonce, adata, tagSize) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (key === undefined) throw new SyntaxError('key required');\n  if (nonce === undefined) throw new SyntaxError('nonce required');\n  return new AES_GCM(key, nonce, adata, tagSize, _AES_heap_instance, _AES_asm_instance).decrypt(data).result;\n}\n\nAES_GCM.encrypt = AES_GCM_encrypt_bytes;\nAES_GCM.decrypt = AES_GCM_decrypt_bytes;\n\nexport { AES_GCM, AES_GCM_Encrypt, AES_GCM_Decrypt };\n","import { sha1_asm } from './sha1.asm';\nimport { hash_finish, hash_process, hash_reset } from '../hash';\nimport { _heap_init } from '../../utils';\n\nexport var _sha1_block_size = 64;\nexport var _sha1_hash_size = 20;\n\nexport function sha1_constructor(options) {\n  options = options || {};\n\n  this.heap = _heap_init(Uint8Array, options.heap);\n  this.asm = options.asm || sha1_asm({ Uint8Array: Uint8Array }, null, this.heap.buffer);\n\n  this.BLOCK_SIZE = _sha1_block_size;\n  this.HASH_SIZE = _sha1_hash_size;\n\n  this.reset();\n}\n\nsha1_constructor.BLOCK_SIZE = _sha1_block_size;\nsha1_constructor.NAME = 'sha1';\n\nsha1_constructor.HASH_SIZE = _sha1_hash_size;\nvar sha1_prototype = sha1_constructor.prototype;\nsha1_prototype.reset = hash_reset;\nsha1_prototype.process = hash_process;\nsha1_prototype.finish = hash_finish;\n\nvar sha1_instance = null;\n\nexport function get_sha1_instance() {\n  if (sha1_instance === null) sha1_instance = new sha1_constructor({ heapSize: 0x100000 });\n  return sha1_instance;\n}\n","export function sha1_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    // SHA256 state\n    var H0 = 0, H1 = 0, H2 = 0, H3 = 0, H4 = 0,\n        TOTAL0 = 0, TOTAL1 = 0;\n\n    // HMAC state\n    var I0 = 0, I1 = 0, I2 = 0, I3 = 0, I4 = 0,\n        O0 = 0, O1 = 0, O2 = 0, O3 = 0, O4 = 0;\n\n    // I/O buffer\n    var HEAP = new stdlib.Uint8Array(buffer);\n\n    function _core ( w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15 ) {\n        w0 = w0|0;\n        w1 = w1|0;\n        w2 = w2|0;\n        w3 = w3|0;\n        w4 = w4|0;\n        w5 = w5|0;\n        w6 = w6|0;\n        w7 = w7|0;\n        w8 = w8|0;\n        w9 = w9|0;\n        w10 = w10|0;\n        w11 = w11|0;\n        w12 = w12|0;\n        w13 = w13|0;\n        w14 = w14|0;\n        w15 = w15|0;\n\n        var a = 0, b = 0, c = 0, d = 0, e = 0, n = 0, t = 0,\n            w16 = 0, w17 = 0, w18 = 0, w19 = 0,\n            w20 = 0, w21 = 0, w22 = 0, w23 = 0, w24 = 0, w25 = 0, w26 = 0, w27 = 0, w28 = 0, w29 = 0,\n            w30 = 0, w31 = 0, w32 = 0, w33 = 0, w34 = 0, w35 = 0, w36 = 0, w37 = 0, w38 = 0, w39 = 0,\n            w40 = 0, w41 = 0, w42 = 0, w43 = 0, w44 = 0, w45 = 0, w46 = 0, w47 = 0, w48 = 0, w49 = 0,\n            w50 = 0, w51 = 0, w52 = 0, w53 = 0, w54 = 0, w55 = 0, w56 = 0, w57 = 0, w58 = 0, w59 = 0,\n            w60 = 0, w61 = 0, w62 = 0, w63 = 0, w64 = 0, w65 = 0, w66 = 0, w67 = 0, w68 = 0, w69 = 0,\n            w70 = 0, w71 = 0, w72 = 0, w73 = 0, w74 = 0, w75 = 0, w76 = 0, w77 = 0, w78 = 0, w79 = 0;\n\n        a = H0;\n        b = H1;\n        c = H2;\n        d = H3;\n        e = H4;\n\n        // 0\n        t = ( w0 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 1\n        t = ( w1 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 2\n        t = ( w2 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 3\n        t = ( w3 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 4\n        t = ( w4 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 5\n        t = ( w5 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 6\n        t = ( w6 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 7\n        t = ( w7 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 8\n        t = ( w8 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 9\n        t = ( w9 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 10\n        t = ( w10 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 11\n        t = ( w11 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 12\n        t = ( w12 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 13\n        t = ( w13 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 14\n        t = ( w14 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 15\n        t = ( w15 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 16\n        n = w13 ^ w8 ^ w2 ^ w0;\n        w16 = (n << 1) | (n >>> 31);\n        t = (w16 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 17\n        n = w14 ^ w9 ^ w3 ^ w1;\n        w17 = (n << 1) | (n >>> 31);\n        t = (w17 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 18\n        n = w15 ^ w10 ^ w4 ^ w2;\n        w18 = (n << 1) | (n >>> 31);\n        t = (w18 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 19\n        n = w16 ^ w11 ^ w5 ^ w3;\n        w19 = (n << 1) | (n >>> 31);\n        t = (w19 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (~b & d)) + 0x5a827999 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 20\n        n = w17 ^ w12 ^ w6 ^ w4;\n        w20 = (n << 1) | (n >>> 31);\n        t = (w20 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 21\n        n = w18 ^ w13 ^ w7 ^ w5;\n        w21 = (n << 1) | (n >>> 31);\n        t = (w21 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 22\n        n = w19 ^ w14 ^ w8 ^ w6;\n        w22 = (n << 1) | (n >>> 31);\n        t = (w22 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 23\n        n = w20 ^ w15 ^ w9 ^ w7;\n        w23 = (n << 1) | (n >>> 31);\n        t = (w23 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 24\n        n = w21 ^ w16 ^ w10 ^ w8;\n        w24 = (n << 1) | (n >>> 31);\n        t = (w24 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 25\n        n = w22 ^ w17 ^ w11 ^ w9;\n        w25 = (n << 1) | (n >>> 31);\n        t = (w25 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 26\n        n = w23 ^ w18 ^ w12 ^ w10;\n        w26 = (n << 1) | (n >>> 31);\n        t = (w26 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 27\n        n = w24 ^ w19 ^ w13 ^ w11;\n        w27 = (n << 1) | (n >>> 31);\n        t = (w27 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 28\n        n = w25 ^ w20 ^ w14 ^ w12;\n        w28 = (n << 1) | (n >>> 31);\n        t = (w28 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 29\n        n = w26 ^ w21 ^ w15 ^ w13;\n        w29 = (n << 1) | (n >>> 31);\n        t = (w29 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 30\n        n = w27 ^ w22 ^ w16 ^ w14;\n        w30 = (n << 1) | (n >>> 31);\n        t = (w30 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 31\n        n = w28 ^ w23 ^ w17 ^ w15;\n        w31 = (n << 1) | (n >>> 31);\n        t = (w31 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 32\n        n = w29 ^ w24 ^ w18 ^ w16;\n        w32 = (n << 1) | (n >>> 31);\n        t = (w32 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 33\n        n = w30 ^ w25 ^ w19 ^ w17;\n        w33 = (n << 1) | (n >>> 31);\n        t = (w33 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 34\n        n = w31 ^ w26 ^ w20 ^ w18;\n        w34 = (n << 1) | (n >>> 31);\n        t = (w34 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 35\n        n = w32 ^ w27 ^ w21 ^ w19;\n        w35 = (n << 1) | (n >>> 31);\n        t = (w35 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 36\n        n = w33 ^ w28 ^ w22 ^ w20;\n        w36 = (n << 1) | (n >>> 31);\n        t = (w36 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 37\n        n = w34 ^ w29 ^ w23 ^ w21;\n        w37 = (n << 1) | (n >>> 31);\n        t = (w37 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 38\n        n = w35 ^ w30 ^ w24 ^ w22;\n        w38 = (n << 1) | (n >>> 31);\n        t = (w38 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 39\n        n = w36 ^ w31 ^ w25 ^ w23;\n        w39 = (n << 1) | (n >>> 31);\n        t = (w39 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) + 0x6ed9eba1 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 40\n        n = w37 ^ w32 ^ w26 ^ w24;\n        w40 = (n << 1) | (n >>> 31);\n        t = (w40 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 41\n        n = w38 ^ w33 ^ w27 ^ w25;\n        w41 = (n << 1) | (n >>> 31);\n        t = (w41 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 42\n        n = w39 ^ w34 ^ w28 ^ w26;\n        w42 = (n << 1) | (n >>> 31);\n        t = (w42 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 43\n        n = w40 ^ w35 ^ w29 ^ w27;\n        w43 = (n << 1) | (n >>> 31);\n        t = (w43 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 44\n        n = w41 ^ w36 ^ w30 ^ w28;\n        w44 = (n << 1) | (n >>> 31);\n        t = (w44 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 45\n        n = w42 ^ w37 ^ w31 ^ w29;\n        w45 = (n << 1) | (n >>> 31);\n        t = (w45 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 46\n        n = w43 ^ w38 ^ w32 ^ w30;\n        w46 = (n << 1) | (n >>> 31);\n        t = (w46 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 47\n        n = w44 ^ w39 ^ w33 ^ w31;\n        w47 = (n << 1) | (n >>> 31);\n        t = (w47 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 48\n        n = w45 ^ w40 ^ w34 ^ w32;\n        w48 = (n << 1) | (n >>> 31);\n        t = (w48 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 49\n        n = w46 ^ w41 ^ w35 ^ w33;\n        w49 = (n << 1) | (n >>> 31);\n        t = (w49 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 50\n        n = w47 ^ w42 ^ w36 ^ w34;\n        w50 = (n << 1) | (n >>> 31);\n        t = (w50 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 51\n        n = w48 ^ w43 ^ w37 ^ w35;\n        w51 = (n << 1) | (n >>> 31);\n        t = (w51 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 52\n        n = w49 ^ w44 ^ w38 ^ w36;\n        w52 = (n << 1) | (n >>> 31);\n        t = (w52 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 53\n        n = w50 ^ w45 ^ w39 ^ w37;\n        w53 = (n << 1) | (n >>> 31);\n        t = (w53 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 54\n        n = w51 ^ w46 ^ w40 ^ w38;\n        w54 = (n << 1) | (n >>> 31);\n        t = (w54 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 55\n        n = w52 ^ w47 ^ w41 ^ w39;\n        w55 = (n << 1) | (n >>> 31);\n        t = (w55 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 56\n        n = w53 ^ w48 ^ w42 ^ w40;\n        w56 = (n << 1) | (n >>> 31);\n        t = (w56 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 57\n        n = w54 ^ w49 ^ w43 ^ w41;\n        w57 = (n << 1) | (n >>> 31);\n        t = (w57 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 58\n        n = w55 ^ w50 ^ w44 ^ w42;\n        w58 = (n << 1) | (n >>> 31);\n        t = (w58 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 59\n        n = w56 ^ w51 ^ w45 ^ w43;\n        w59 = (n << 1) | (n >>> 31);\n        t = (w59 + ((a << 5) | (a >>> 27)) + e + ((b & c) | (b & d) | (c & d)) - 0x70e44324 )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 60\n        n = w57 ^ w52 ^ w46 ^ w44;\n        w60 = (n << 1) | (n >>> 31);\n        t = (w60 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 61\n        n = w58 ^ w53 ^ w47 ^ w45;\n        w61 = (n << 1) | (n >>> 31);\n        t = (w61 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 62\n        n = w59 ^ w54 ^ w48 ^ w46;\n        w62 = (n << 1) | (n >>> 31);\n        t = (w62 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 63\n        n = w60 ^ w55 ^ w49 ^ w47;\n        w63 = (n << 1) | (n >>> 31);\n        t = (w63 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 64\n        n = w61 ^ w56 ^ w50 ^ w48;\n        w64 = (n << 1) | (n >>> 31);\n        t = (w64 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 65\n        n = w62 ^ w57 ^ w51 ^ w49;\n        w65 = (n << 1) | (n >>> 31);\n        t = (w65 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 66\n        n = w63 ^ w58 ^ w52 ^ w50;\n        w66 = (n << 1) | (n >>> 31);\n        t = (w66 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 67\n        n = w64 ^ w59 ^ w53 ^ w51;\n        w67 = (n << 1) | (n >>> 31);\n        t = (w67 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 68\n        n = w65 ^ w60 ^ w54 ^ w52;\n        w68 = (n << 1) | (n >>> 31);\n        t = (w68 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 69\n        n = w66 ^ w61 ^ w55 ^ w53;\n        w69 = (n << 1) | (n >>> 31);\n        t = (w69 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 70\n        n = w67 ^ w62 ^ w56 ^ w54;\n        w70 = (n << 1) | (n >>> 31);\n        t = (w70 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 71\n        n = w68 ^ w63 ^ w57 ^ w55;\n        w71 = (n << 1) | (n >>> 31);\n        t = (w71 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 72\n        n = w69 ^ w64 ^ w58 ^ w56;\n        w72 = (n << 1) | (n >>> 31);\n        t = (w72 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 73\n        n = w70 ^ w65 ^ w59 ^ w57;\n        w73 = (n << 1) | (n >>> 31);\n        t = (w73 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 74\n        n = w71 ^ w66 ^ w60 ^ w58;\n        w74 = (n << 1) | (n >>> 31);\n        t = (w74 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 75\n        n = w72 ^ w67 ^ w61 ^ w59;\n        w75 = (n << 1) | (n >>> 31);\n        t = (w75 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 76\n        n = w73 ^ w68 ^ w62 ^ w60;\n        w76 = (n << 1) | (n >>> 31);\n        t = (w76 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 77\n        n = w74 ^ w69 ^ w63 ^ w61;\n        w77 = (n << 1) | (n >>> 31);\n        t = (w77 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 78\n        n = w75 ^ w70 ^ w64 ^ w62;\n        w78 = (n << 1) | (n >>> 31);\n        t = (w78 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        // 79\n        n = w76 ^ w71 ^ w65 ^ w63;\n        w79 = (n << 1) | (n >>> 31);\n        t = (w79 + ((a << 5) | (a >>> 27)) + e + (b ^ c ^ d) - 0x359d3e2a )|0;\n        e = d; d = c; c = (b << 30) | (b >>> 2); b = a; a = t;\n\n        H0 = ( H0 + a )|0;\n        H1 = ( H1 + b )|0;\n        H2 = ( H2 + c )|0;\n        H3 = ( H3 + d )|0;\n        H4 = ( H4 + e )|0;\n\n    }\n\n    function _core_heap ( offset ) {\n        offset = offset|0;\n\n        _core(\n            HEAP[offset|0]<<24 | HEAP[offset|1]<<16 | HEAP[offset|2]<<8 | HEAP[offset|3],\n            HEAP[offset|4]<<24 | HEAP[offset|5]<<16 | HEAP[offset|6]<<8 | HEAP[offset|7],\n            HEAP[offset|8]<<24 | HEAP[offset|9]<<16 | HEAP[offset|10]<<8 | HEAP[offset|11],\n            HEAP[offset|12]<<24 | HEAP[offset|13]<<16 | HEAP[offset|14]<<8 | HEAP[offset|15],\n            HEAP[offset|16]<<24 | HEAP[offset|17]<<16 | HEAP[offset|18]<<8 | HEAP[offset|19],\n            HEAP[offset|20]<<24 | HEAP[offset|21]<<16 | HEAP[offset|22]<<8 | HEAP[offset|23],\n            HEAP[offset|24]<<24 | HEAP[offset|25]<<16 | HEAP[offset|26]<<8 | HEAP[offset|27],\n            HEAP[offset|28]<<24 | HEAP[offset|29]<<16 | HEAP[offset|30]<<8 | HEAP[offset|31],\n            HEAP[offset|32]<<24 | HEAP[offset|33]<<16 | HEAP[offset|34]<<8 | HEAP[offset|35],\n            HEAP[offset|36]<<24 | HEAP[offset|37]<<16 | HEAP[offset|38]<<8 | HEAP[offset|39],\n            HEAP[offset|40]<<24 | HEAP[offset|41]<<16 | HEAP[offset|42]<<8 | HEAP[offset|43],\n            HEAP[offset|44]<<24 | HEAP[offset|45]<<16 | HEAP[offset|46]<<8 | HEAP[offset|47],\n            HEAP[offset|48]<<24 | HEAP[offset|49]<<16 | HEAP[offset|50]<<8 | HEAP[offset|51],\n            HEAP[offset|52]<<24 | HEAP[offset|53]<<16 | HEAP[offset|54]<<8 | HEAP[offset|55],\n            HEAP[offset|56]<<24 | HEAP[offset|57]<<16 | HEAP[offset|58]<<8 | HEAP[offset|59],\n            HEAP[offset|60]<<24 | HEAP[offset|61]<<16 | HEAP[offset|62]<<8 | HEAP[offset|63]\n        );\n    }\n\n    // offset — multiple of 32\n    function _state_to_heap ( output ) {\n        output = output|0;\n\n        HEAP[output|0] = H0>>>24;\n        HEAP[output|1] = H0>>>16&255;\n        HEAP[output|2] = H0>>>8&255;\n        HEAP[output|3] = H0&255;\n        HEAP[output|4] = H1>>>24;\n        HEAP[output|5] = H1>>>16&255;\n        HEAP[output|6] = H1>>>8&255;\n        HEAP[output|7] = H1&255;\n        HEAP[output|8] = H2>>>24;\n        HEAP[output|9] = H2>>>16&255;\n        HEAP[output|10] = H2>>>8&255;\n        HEAP[output|11] = H2&255;\n        HEAP[output|12] = H3>>>24;\n        HEAP[output|13] = H3>>>16&255;\n        HEAP[output|14] = H3>>>8&255;\n        HEAP[output|15] = H3&255;\n        HEAP[output|16] = H4>>>24;\n        HEAP[output|17] = H4>>>16&255;\n        HEAP[output|18] = H4>>>8&255;\n        HEAP[output|19] = H4&255;\n    }\n\n    function reset () {\n        H0 = 0x67452301;\n        H1 = 0xefcdab89;\n        H2 = 0x98badcfe;\n        H3 = 0x10325476;\n        H4 = 0xc3d2e1f0;\n        TOTAL0 = TOTAL1 = 0;\n    }\n\n    function init ( h0, h1, h2, h3, h4, total0, total1 ) {\n        h0 = h0|0;\n        h1 = h1|0;\n        h2 = h2|0;\n        h3 = h3|0;\n        h4 = h4|0;\n        total0 = total0|0;\n        total1 = total1|0;\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        TOTAL0 = total0;\n        TOTAL1 = total1;\n    }\n\n    // offset — multiple of 64\n    function process ( offset, length ) {\n        offset = offset|0;\n        length = length|0;\n\n        var hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        while ( (length|0) >= 64 ) {\n            _core_heap(offset);\n\n            offset = ( offset + 64 )|0;\n            length = ( length - 64 )|0;\n\n            hashed = ( hashed + 64 )|0;\n        }\n\n        TOTAL0 = ( TOTAL0 + hashed )|0;\n        if ( TOTAL0>>>0 < hashed>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        return hashed|0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var hashed = 0,\n            i = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        if ( (length|0) >= 64 ) {\n            hashed = process( offset, length )|0;\n            if ( (hashed|0) == -1 )\n                return -1;\n\n            offset = ( offset + hashed )|0;\n            length = ( length - hashed )|0;\n        }\n\n        hashed = ( hashed + length )|0;\n        TOTAL0 = ( TOTAL0 + length )|0;\n        if ( TOTAL0>>>0 < length>>>0 ) TOTAL1 = (TOTAL1 + 1)|0;\n\n        HEAP[offset|length] = 0x80;\n\n        if ( (length|0) >= 56 ) {\n            for ( i = (length+1)|0; (i|0) < 64; i = (i+1)|0 )\n                HEAP[offset|i] = 0x00;\n            _core_heap(offset);\n\n            length = 0;\n\n            HEAP[offset|0] = 0;\n        }\n\n        for ( i = (length+1)|0; (i|0) < 59; i = (i+1)|0 )\n            HEAP[offset|i] = 0;\n\n        HEAP[offset|56] = TOTAL1>>>21&255;\n        HEAP[offset|57] = TOTAL1>>>13&255;\n        HEAP[offset|58] = TOTAL1>>>5&255;\n        HEAP[offset|59] = TOTAL1<<3&255 | TOTAL0>>>29;\n        HEAP[offset|60] = TOTAL0>>>21&255;\n        HEAP[offset|61] = TOTAL0>>>13&255;\n        HEAP[offset|62] = TOTAL0>>>5&255;\n        HEAP[offset|63] = TOTAL0<<3&255;\n        _core_heap(offset);\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    function hmac_reset () {\n        H0 = I0;\n        H1 = I1;\n        H2 = I2;\n        H3 = I3;\n        H4 = I4;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function _hmac_opad () {\n        H0 = O0;\n        H1 = O1;\n        H2 = O2;\n        H3 = O3;\n        H4 = O4;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function hmac_init ( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15 ) {\n        p0 = p0|0;\n        p1 = p1|0;\n        p2 = p2|0;\n        p3 = p3|0;\n        p4 = p4|0;\n        p5 = p5|0;\n        p6 = p6|0;\n        p7 = p7|0;\n        p8 = p8|0;\n        p9 = p9|0;\n        p10 = p10|0;\n        p11 = p11|0;\n        p12 = p12|0;\n        p13 = p13|0;\n        p14 = p14|0;\n        p15 = p15|0;\n\n        // opad\n        reset();\n        _core(\n            p0 ^ 0x5c5c5c5c,\n            p1 ^ 0x5c5c5c5c,\n            p2 ^ 0x5c5c5c5c,\n            p3 ^ 0x5c5c5c5c,\n            p4 ^ 0x5c5c5c5c,\n            p5 ^ 0x5c5c5c5c,\n            p6 ^ 0x5c5c5c5c,\n            p7 ^ 0x5c5c5c5c,\n            p8 ^ 0x5c5c5c5c,\n            p9 ^ 0x5c5c5c5c,\n            p10 ^ 0x5c5c5c5c,\n            p11 ^ 0x5c5c5c5c,\n            p12 ^ 0x5c5c5c5c,\n            p13 ^ 0x5c5c5c5c,\n            p14 ^ 0x5c5c5c5c,\n            p15 ^ 0x5c5c5c5c\n        );\n        O0 = H0;\n        O1 = H1;\n        O2 = H2;\n        O3 = H3;\n        O4 = H4;\n\n        // ipad\n        reset();\n        _core(\n            p0 ^ 0x36363636,\n            p1 ^ 0x36363636,\n            p2 ^ 0x36363636,\n            p3 ^ 0x36363636,\n            p4 ^ 0x36363636,\n            p5 ^ 0x36363636,\n            p6 ^ 0x36363636,\n            p7 ^ 0x36363636,\n            p8 ^ 0x36363636,\n            p9 ^ 0x36363636,\n            p10 ^ 0x36363636,\n            p11 ^ 0x36363636,\n            p12 ^ 0x36363636,\n            p13 ^ 0x36363636,\n            p14 ^ 0x36363636,\n            p15 ^ 0x36363636\n        );\n        I0 = H0;\n        I1 = H1;\n        I2 = H2;\n        I3 = H3;\n        I4 = H4;\n\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function hmac_finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        hashed = finish( offset, length, -1 )|0;\n        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n        _hmac_opad();\n        _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    // salt is assumed to be already processed\n    // offset — multiple of 64\n    // output — multiple of 32\n    function pbkdf2_generate_block ( offset, length, block, count, output ) {\n        offset = offset|0;\n        length = length|0;\n        block = block|0;\n        count = count|0;\n        output = output|0;\n\n        var h0 = 0, h1 = 0, h2 = 0, h3 = 0, h4 = 0,\n            t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        // pad block number into heap\n        // FIXME probable OOB write\n        HEAP[(offset+length)|0]   = block>>>24;\n        HEAP[(offset+length+1)|0] = block>>>16&255;\n        HEAP[(offset+length+2)|0] = block>>>8&255;\n        HEAP[(offset+length+3)|0] = block&255;\n\n        // finish first iteration\n        hmac_finish( offset, (length+4)|0, -1 )|0;\n        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4;\n        count = (count-1)|0;\n\n        // perform the rest iterations\n        while ( (count|0) > 0 ) {\n            hmac_reset();\n            _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n            _hmac_opad();\n            _core( t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;\n\n            h0 = h0 ^ H0;\n            h1 = h1 ^ H1;\n            h2 = h2 ^ H2;\n            h3 = h3 ^ H3;\n            h4 = h4 ^ H4;\n\n            count = (count-1)|0;\n        }\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return 0;\n    }\n\n    return {\n        // SHA1\n        reset: reset,\n        init: init,\n        process: process,\n        finish: finish,\n\n        // HMAC-SHA1\n        hmac_reset: hmac_reset,\n        hmac_init: hmac_init,\n        hmac_finish: hmac_finish,\n\n        // PBKDF2-HMAC-SHA1\n        pbkdf2_generate_block: pbkdf2_generate_block\n    }\n}\n","/**\n * SHA1 exports\n */\n\nimport { get_sha1_instance, sha1_constructor } from './sha1';\nimport { bytes_to_base64, bytes_to_hex } from '../../utils';\n\nfunction sha1_bytes(data) {\n  if (data === undefined) throw new SyntaxError('data required');\n  return get_sha1_instance()\n    .reset()\n    .process(data)\n    .finish().result;\n}\n\nfunction sha1_hex(data) {\n  var result = sha1_bytes(data);\n  return bytes_to_hex(result);\n}\n\nfunction sha1_base64(data) {\n  var result = sha1_bytes(data);\n  return bytes_to_base64(result);\n}\n\nexport var SHA1 = sha1_constructor;\n\nSHA1.bytes = sha1_bytes;\nSHA1.hex = sha1_hex;\nSHA1.base64 = sha1_base64;\n","import { sha256_asm } from './sha256.asm';\nimport { hash_finish, hash_process, hash_reset } from '../hash';\nimport { _heap_init } from '../../utils';\n\nexport var _sha256_block_size = 64;\nexport var _sha256_hash_size = 32;\n\nexport function sha256_constructor(options) {\n  options = options || {};\n\n  this.heap = _heap_init(Uint8Array, options.heap);\n  this.asm = options.asm || sha256_asm({ Uint8Array: Uint8Array }, null, this.heap.buffer);\n\n  this.BLOCK_SIZE = _sha256_block_size;\n  this.HASH_SIZE = _sha256_hash_size;\n\n  this.reset();\n}\n\nsha256_constructor.BLOCK_SIZE = _sha256_block_size;\nsha256_constructor.HASH_SIZE = _sha256_hash_size;\nsha256_constructor.NAME = 'sha256';\n\nvar sha256_prototype = sha256_constructor.prototype;\nsha256_prototype.reset = hash_reset;\nsha256_prototype.process = hash_process;\nsha256_prototype.finish = hash_finish;\n\nvar sha256_instance = null;\n\nexport function get_sha256_instance() {\n  if (sha256_instance === null) sha256_instance = new sha256_constructor({ heapSize: 0x100000 });\n  return sha256_instance;\n}\n","export function sha256_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    // SHA256 state\n    var H0 = 0, H1 = 0, H2 = 0, H3 = 0, H4 = 0, H5 = 0, H6 = 0, H7 = 0,\n        TOTAL0 = 0, TOTAL1 = 0;\n\n    // HMAC state\n    var I0 = 0, I1 = 0, I2 = 0, I3 = 0, I4 = 0, I5 = 0, I6 = 0, I7 = 0,\n        O0 = 0, O1 = 0, O2 = 0, O3 = 0, O4 = 0, O5 = 0, O6 = 0, O7 = 0;\n\n    // I/O buffer\n    var HEAP = new stdlib.Uint8Array(buffer);\n\n    function _core ( w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15 ) {\n        w0 = w0|0;\n        w1 = w1|0;\n        w2 = w2|0;\n        w3 = w3|0;\n        w4 = w4|0;\n        w5 = w5|0;\n        w6 = w6|0;\n        w7 = w7|0;\n        w8 = w8|0;\n        w9 = w9|0;\n        w10 = w10|0;\n        w11 = w11|0;\n        w12 = w12|0;\n        w13 = w13|0;\n        w14 = w14|0;\n        w15 = w15|0;\n\n        var a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;\n\n        a = H0;\n        b = H1;\n        c = H2;\n        d = H3;\n        e = H4;\n        f = H5;\n        g = H6;\n        h = H7;\n        \n        // 0\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x428a2f98 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 1\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x71374491 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 2\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xb5c0fbcf )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 3\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xe9b5dba5 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 4\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x3956c25b )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 5\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x59f111f1 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 6\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x923f82a4 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 7\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xab1c5ed5 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 8\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xd807aa98 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 9\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x12835b01 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 10\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x243185be )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 11\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x550c7dc3 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 12\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x72be5d74 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 13\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x80deb1fe )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 14\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x9bdc06a7 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 15\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xc19bf174 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 16\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xe49b69c1 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 17\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xefbe4786 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 18\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x0fc19dc6 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 19\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x240ca1cc )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 20\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x2de92c6f )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 21\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x4a7484aa )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 22\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x5cb0a9dc )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 23\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x76f988da )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 24\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x983e5152 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 25\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xa831c66d )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 26\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xb00327c8 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 27\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xbf597fc7 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 28\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0xc6e00bf3 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 29\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xd5a79147 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 30\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x06ca6351 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 31\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x14292967 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 32\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x27b70a85 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 33\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x2e1b2138 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 34\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x4d2c6dfc )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 35\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x53380d13 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 36\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x650a7354 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 37\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x766a0abb )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 38\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x81c2c92e )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 39\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x92722c85 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 40\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0xa2bfe8a1 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 41\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0xa81a664b )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 42\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0xc24b8b70 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 43\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0xc76c51a3 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 44\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0xd192e819 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 45\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xd6990624 )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 46\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0xf40e3585 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 47\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x106aa070 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 48\n        w0 = ( ( w1>>>7  ^ w1>>>18 ^ w1>>>3  ^ w1<<25 ^ w1<<14 ) + ( w14>>>17 ^ w14>>>19 ^ w14>>>10 ^ w14<<15 ^ w14<<13 ) + w0 + w9 )|0;\n        h = ( w0 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x19a4c116 )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 49\n        w1 = ( ( w2>>>7  ^ w2>>>18 ^ w2>>>3  ^ w2<<25 ^ w2<<14 ) + ( w15>>>17 ^ w15>>>19 ^ w15>>>10 ^ w15<<15 ^ w15<<13 ) + w1 + w10 )|0;\n        g = ( w1 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x1e376c08 )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 50\n        w2 = ( ( w3>>>7  ^ w3>>>18 ^ w3>>>3  ^ w3<<25 ^ w3<<14 ) + ( w0>>>17 ^ w0>>>19 ^ w0>>>10 ^ w0<<15 ^ w0<<13 ) + w2 + w11 )|0;\n        f = ( w2 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x2748774c )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 51\n        w3 = ( ( w4>>>7  ^ w4>>>18 ^ w4>>>3  ^ w4<<25 ^ w4<<14 ) + ( w1>>>17 ^ w1>>>19 ^ w1>>>10 ^ w1<<15 ^ w1<<13 ) + w3 + w12 )|0;\n        e = ( w3 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x34b0bcb5 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 52\n        w4 = ( ( w5>>>7  ^ w5>>>18 ^ w5>>>3  ^ w5<<25 ^ w5<<14 ) + ( w2>>>17 ^ w2>>>19 ^ w2>>>10 ^ w2<<15 ^ w2<<13 ) + w4 + w13 )|0;\n        d = ( w4 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x391c0cb3 )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 53\n        w5 = ( ( w6>>>7  ^ w6>>>18 ^ w6>>>3  ^ w6<<25 ^ w6<<14 ) + ( w3>>>17 ^ w3>>>19 ^ w3>>>10 ^ w3<<15 ^ w3<<13 ) + w5 + w14 )|0;\n        c = ( w5 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0x4ed8aa4a )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 54\n        w6 = ( ( w7>>>7  ^ w7>>>18 ^ w7>>>3  ^ w7<<25 ^ w7<<14 ) + ( w4>>>17 ^ w4>>>19 ^ w4>>>10 ^ w4<<15 ^ w4<<13 ) + w6 + w15 )|0;\n        b = ( w6 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0x5b9cca4f )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 55\n        w7 = ( ( w8>>>7  ^ w8>>>18 ^ w8>>>3  ^ w8<<25 ^ w8<<14 ) + ( w5>>>17 ^ w5>>>19 ^ w5>>>10 ^ w5<<15 ^ w5<<13 ) + w7 + w0 )|0;\n        a = ( w7 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0x682e6ff3 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        // 56\n        w8 = ( ( w9>>>7  ^ w9>>>18 ^ w9>>>3  ^ w9<<25 ^ w9<<14 ) + ( w6>>>17 ^ w6>>>19 ^ w6>>>10 ^ w6<<15 ^ w6<<13 ) + w8 + w1 )|0;\n        h = ( w8 + h + ( e>>>6 ^ e>>>11 ^ e>>>25 ^ e<<26 ^ e<<21 ^ e<<7 ) +  ( g ^ e & (f^g) ) + 0x748f82ee )|0;\n        d = ( d + h )|0;\n        h = ( h + ( (a & b) ^ ( c & (a ^ b) ) ) + ( a>>>2 ^ a>>>13 ^ a>>>22 ^ a<<30 ^ a<<19 ^ a<<10 ) )|0;\n\n        // 57\n        w9 = ( ( w10>>>7  ^ w10>>>18 ^ w10>>>3  ^ w10<<25 ^ w10<<14 ) + ( w7>>>17 ^ w7>>>19 ^ w7>>>10 ^ w7<<15 ^ w7<<13 ) + w9 + w2 )|0;\n        g = ( w9 + g + ( d>>>6 ^ d>>>11 ^ d>>>25 ^ d<<26 ^ d<<21 ^ d<<7 ) +  ( f ^ d & (e^f) ) + 0x78a5636f )|0;\n        c = ( c + g )|0;\n        g = ( g + ( (h & a) ^ ( b & (h ^ a) ) ) + ( h>>>2 ^ h>>>13 ^ h>>>22 ^ h<<30 ^ h<<19 ^ h<<10 ) )|0;\n\n        // 58\n        w10 = ( ( w11>>>7  ^ w11>>>18 ^ w11>>>3  ^ w11<<25 ^ w11<<14 ) + ( w8>>>17 ^ w8>>>19 ^ w8>>>10 ^ w8<<15 ^ w8<<13 ) + w10 + w3 )|0;\n        f = ( w10 + f + ( c>>>6 ^ c>>>11 ^ c>>>25 ^ c<<26 ^ c<<21 ^ c<<7 ) +  ( e ^ c & (d^e) ) + 0x84c87814 )|0;\n        b = ( b + f )|0;\n        f = ( f + ( (g & h) ^ ( a & (g ^ h) ) ) + ( g>>>2 ^ g>>>13 ^ g>>>22 ^ g<<30 ^ g<<19 ^ g<<10 ) )|0;\n\n        // 59\n        w11 = ( ( w12>>>7  ^ w12>>>18 ^ w12>>>3  ^ w12<<25 ^ w12<<14 ) + ( w9>>>17 ^ w9>>>19 ^ w9>>>10 ^ w9<<15 ^ w9<<13 ) + w11 + w4 )|0;\n        e = ( w11 + e + ( b>>>6 ^ b>>>11 ^ b>>>25 ^ b<<26 ^ b<<21 ^ b<<7 ) +  ( d ^ b & (c^d) ) + 0x8cc70208 )|0;\n        a = ( a + e )|0;\n        e = ( e + ( (f & g) ^ ( h & (f ^ g) ) ) + ( f>>>2 ^ f>>>13 ^ f>>>22 ^ f<<30 ^ f<<19 ^ f<<10 ) )|0;\n\n        // 60\n        w12 = ( ( w13>>>7  ^ w13>>>18 ^ w13>>>3  ^ w13<<25 ^ w13<<14 ) + ( w10>>>17 ^ w10>>>19 ^ w10>>>10 ^ w10<<15 ^ w10<<13 ) + w12 + w5 )|0;\n        d = ( w12 + d + ( a>>>6 ^ a>>>11 ^ a>>>25 ^ a<<26 ^ a<<21 ^ a<<7 ) +  ( c ^ a & (b^c) ) + 0x90befffa )|0;\n        h = ( h + d )|0;\n        d = ( d + ( (e & f) ^ ( g & (e ^ f) ) ) + ( e>>>2 ^ e>>>13 ^ e>>>22 ^ e<<30 ^ e<<19 ^ e<<10 ) )|0;\n\n        // 61\n        w13 = ( ( w14>>>7  ^ w14>>>18 ^ w14>>>3  ^ w14<<25 ^ w14<<14 ) + ( w11>>>17 ^ w11>>>19 ^ w11>>>10 ^ w11<<15 ^ w11<<13 ) + w13 + w6 )|0;\n        c = ( w13 + c + ( h>>>6 ^ h>>>11 ^ h>>>25 ^ h<<26 ^ h<<21 ^ h<<7 ) +  ( b ^ h & (a^b) ) + 0xa4506ceb )|0;\n        g = ( g + c )|0;\n        c = ( c + ( (d & e) ^ ( f & (d ^ e) ) ) + ( d>>>2 ^ d>>>13 ^ d>>>22 ^ d<<30 ^ d<<19 ^ d<<10 ) )|0;\n\n        // 62\n        w14 = ( ( w15>>>7  ^ w15>>>18 ^ w15>>>3  ^ w15<<25 ^ w15<<14 ) + ( w12>>>17 ^ w12>>>19 ^ w12>>>10 ^ w12<<15 ^ w12<<13 ) + w14 + w7 )|0;\n        b = ( w14 + b + ( g>>>6 ^ g>>>11 ^ g>>>25 ^ g<<26 ^ g<<21 ^ g<<7 ) +  ( a ^ g & (h^a) ) + 0xbef9a3f7 )|0;\n        f = ( f + b )|0;\n        b = ( b + ( (c & d) ^ ( e & (c ^ d) ) ) + ( c>>>2 ^ c>>>13 ^ c>>>22 ^ c<<30 ^ c<<19 ^ c<<10 ) )|0;\n\n        // 63\n        w15 = ( ( w0>>>7  ^ w0>>>18 ^ w0>>>3  ^ w0<<25 ^ w0<<14 ) + ( w13>>>17 ^ w13>>>19 ^ w13>>>10 ^ w13<<15 ^ w13<<13 ) + w15 + w8 )|0;\n        a = ( w15 + a + ( f>>>6 ^ f>>>11 ^ f>>>25 ^ f<<26 ^ f<<21 ^ f<<7 ) +  ( h ^ f & (g^h) ) + 0xc67178f2 )|0;\n        e = ( e + a )|0;\n        a = ( a + ( (b & c) ^ ( d & (b ^ c) ) ) + ( b>>>2 ^ b>>>13 ^ b>>>22 ^ b<<30 ^ b<<19 ^ b<<10 ) )|0;\n\n        H0 = ( H0 + a )|0;\n        H1 = ( H1 + b )|0;\n        H2 = ( H2 + c )|0;\n        H3 = ( H3 + d )|0;\n        H4 = ( H4 + e )|0;\n        H5 = ( H5 + f )|0;\n        H6 = ( H6 + g )|0;\n        H7 = ( H7 + h )|0;\n    }\n\n    function _core_heap ( offset ) {\n        offset = offset|0;\n\n        _core(\n            HEAP[offset|0]<<24 | HEAP[offset|1]<<16 | HEAP[offset|2]<<8 | HEAP[offset|3],\n            HEAP[offset|4]<<24 | HEAP[offset|5]<<16 | HEAP[offset|6]<<8 | HEAP[offset|7],\n            HEAP[offset|8]<<24 | HEAP[offset|9]<<16 | HEAP[offset|10]<<8 | HEAP[offset|11],\n            HEAP[offset|12]<<24 | HEAP[offset|13]<<16 | HEAP[offset|14]<<8 | HEAP[offset|15],\n            HEAP[offset|16]<<24 | HEAP[offset|17]<<16 | HEAP[offset|18]<<8 | HEAP[offset|19],\n            HEAP[offset|20]<<24 | HEAP[offset|21]<<16 | HEAP[offset|22]<<8 | HEAP[offset|23],\n            HEAP[offset|24]<<24 | HEAP[offset|25]<<16 | HEAP[offset|26]<<8 | HEAP[offset|27],\n            HEAP[offset|28]<<24 | HEAP[offset|29]<<16 | HEAP[offset|30]<<8 | HEAP[offset|31],\n            HEAP[offset|32]<<24 | HEAP[offset|33]<<16 | HEAP[offset|34]<<8 | HEAP[offset|35],\n            HEAP[offset|36]<<24 | HEAP[offset|37]<<16 | HEAP[offset|38]<<8 | HEAP[offset|39],\n            HEAP[offset|40]<<24 | HEAP[offset|41]<<16 | HEAP[offset|42]<<8 | HEAP[offset|43],\n            HEAP[offset|44]<<24 | HEAP[offset|45]<<16 | HEAP[offset|46]<<8 | HEAP[offset|47],\n            HEAP[offset|48]<<24 | HEAP[offset|49]<<16 | HEAP[offset|50]<<8 | HEAP[offset|51],\n            HEAP[offset|52]<<24 | HEAP[offset|53]<<16 | HEAP[offset|54]<<8 | HEAP[offset|55],\n            HEAP[offset|56]<<24 | HEAP[offset|57]<<16 | HEAP[offset|58]<<8 | HEAP[offset|59],\n            HEAP[offset|60]<<24 | HEAP[offset|61]<<16 | HEAP[offset|62]<<8 | HEAP[offset|63]\n        );\n    }\n\n    // offset — multiple of 32\n    function _state_to_heap ( output ) {\n        output = output|0;\n\n        HEAP[output|0] = H0>>>24;\n        HEAP[output|1] = H0>>>16&255;\n        HEAP[output|2] = H0>>>8&255;\n        HEAP[output|3] = H0&255;\n        HEAP[output|4] = H1>>>24;\n        HEAP[output|5] = H1>>>16&255;\n        HEAP[output|6] = H1>>>8&255;\n        HEAP[output|7] = H1&255;\n        HEAP[output|8] = H2>>>24;\n        HEAP[output|9] = H2>>>16&255;\n        HEAP[output|10] = H2>>>8&255;\n        HEAP[output|11] = H2&255;\n        HEAP[output|12] = H3>>>24;\n        HEAP[output|13] = H3>>>16&255;\n        HEAP[output|14] = H3>>>8&255;\n        HEAP[output|15] = H3&255;\n        HEAP[output|16] = H4>>>24;\n        HEAP[output|17] = H4>>>16&255;\n        HEAP[output|18] = H4>>>8&255;\n        HEAP[output|19] = H4&255;\n        HEAP[output|20] = H5>>>24;\n        HEAP[output|21] = H5>>>16&255;\n        HEAP[output|22] = H5>>>8&255;\n        HEAP[output|23] = H5&255;\n        HEAP[output|24] = H6>>>24;\n        HEAP[output|25] = H6>>>16&255;\n        HEAP[output|26] = H6>>>8&255;\n        HEAP[output|27] = H6&255;\n        HEAP[output|28] = H7>>>24;\n        HEAP[output|29] = H7>>>16&255;\n        HEAP[output|30] = H7>>>8&255;\n        HEAP[output|31] = H7&255;\n    }\n\n    function reset () {\n        H0 = 0x6a09e667;\n        H1 = 0xbb67ae85;\n        H2 = 0x3c6ef372;\n        H3 = 0xa54ff53a;\n        H4 = 0x510e527f;\n        H5 = 0x9b05688c;\n        H6 = 0x1f83d9ab;\n        H7 = 0x5be0cd19;\n        TOTAL0 = TOTAL1 = 0;\n    }\n\n    function init ( h0, h1, h2, h3, h4, h5, h6, h7, total0, total1 ) {\n        h0 = h0|0;\n        h1 = h1|0;\n        h2 = h2|0;\n        h3 = h3|0;\n        h4 = h4|0;\n        h5 = h5|0;\n        h6 = h6|0;\n        h7 = h7|0;\n        total0 = total0|0;\n        total1 = total1|0;\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        H5 = h5;\n        H6 = h6;\n        H7 = h7;\n        TOTAL0 = total0;\n        TOTAL1 = total1;\n    }\n\n    // offset — multiple of 64\n    function process ( offset, length ) {\n        offset = offset|0;\n        length = length|0;\n\n        var hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        while ( (length|0) >= 64 ) {\n            _core_heap(offset);\n\n            offset = ( offset + 64 )|0;\n            length = ( length - 64 )|0;\n\n            hashed = ( hashed + 64 )|0;\n        }\n\n        TOTAL0 = ( TOTAL0 + hashed )|0;\n        if ( TOTAL0>>>0 < hashed>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        return hashed|0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var hashed = 0,\n            i = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        if ( (length|0) >= 64 ) {\n            hashed = process( offset, length )|0;\n            if ( (hashed|0) == -1 )\n                return -1;\n\n            offset = ( offset + hashed )|0;\n            length = ( length - hashed )|0;\n        }\n\n        hashed = ( hashed + length )|0;\n        TOTAL0 = ( TOTAL0 + length )|0;\n        if ( TOTAL0>>>0 < length>>>0 ) TOTAL1 = ( TOTAL1 + 1 )|0;\n\n        HEAP[offset|length] = 0x80;\n\n        if ( (length|0) >= 56 ) {\n            for ( i = (length+1)|0; (i|0) < 64; i = (i+1)|0 )\n                HEAP[offset|i] = 0x00;\n\n            _core_heap(offset);\n\n            length = 0;\n\n            HEAP[offset|0] = 0;\n        }\n\n        for ( i = (length+1)|0; (i|0) < 59; i = (i+1)|0 )\n            HEAP[offset|i] = 0;\n\n        HEAP[offset|56] = TOTAL1>>>21&255;\n        HEAP[offset|57] = TOTAL1>>>13&255;\n        HEAP[offset|58] = TOTAL1>>>5&255;\n        HEAP[offset|59] = TOTAL1<<3&255 | TOTAL0>>>29;\n        HEAP[offset|60] = TOTAL0>>>21&255;\n        HEAP[offset|61] = TOTAL0>>>13&255;\n        HEAP[offset|62] = TOTAL0>>>5&255;\n        HEAP[offset|63] = TOTAL0<<3&255;\n        _core_heap(offset);\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    function hmac_reset () {\n        H0 = I0;\n        H1 = I1;\n        H2 = I2;\n        H3 = I3;\n        H4 = I4;\n        H5 = I5;\n        H6 = I6;\n        H7 = I7;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function _hmac_opad () {\n        H0 = O0;\n        H1 = O1;\n        H2 = O2;\n        H3 = O3;\n        H4 = O4;\n        H5 = O5;\n        H6 = O6;\n        H7 = O7;\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    function hmac_init ( p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15 ) {\n        p0 = p0|0;\n        p1 = p1|0;\n        p2 = p2|0;\n        p3 = p3|0;\n        p4 = p4|0;\n        p5 = p5|0;\n        p6 = p6|0;\n        p7 = p7|0;\n        p8 = p8|0;\n        p9 = p9|0;\n        p10 = p10|0;\n        p11 = p11|0;\n        p12 = p12|0;\n        p13 = p13|0;\n        p14 = p14|0;\n        p15 = p15|0;\n\n        // opad\n        reset();\n        _core(\n            p0 ^ 0x5c5c5c5c,\n            p1 ^ 0x5c5c5c5c,\n            p2 ^ 0x5c5c5c5c,\n            p3 ^ 0x5c5c5c5c,\n            p4 ^ 0x5c5c5c5c,\n            p5 ^ 0x5c5c5c5c,\n            p6 ^ 0x5c5c5c5c,\n            p7 ^ 0x5c5c5c5c,\n            p8 ^ 0x5c5c5c5c,\n            p9 ^ 0x5c5c5c5c,\n            p10 ^ 0x5c5c5c5c,\n            p11 ^ 0x5c5c5c5c,\n            p12 ^ 0x5c5c5c5c,\n            p13 ^ 0x5c5c5c5c,\n            p14 ^ 0x5c5c5c5c,\n            p15 ^ 0x5c5c5c5c\n        );\n        O0 = H0;\n        O1 = H1;\n        O2 = H2;\n        O3 = H3;\n        O4 = H4;\n        O5 = H5;\n        O6 = H6;\n        O7 = H7;\n\n        // ipad\n        reset();\n        _core(\n            p0 ^ 0x36363636,\n            p1 ^ 0x36363636,\n            p2 ^ 0x36363636,\n            p3 ^ 0x36363636,\n            p4 ^ 0x36363636,\n            p5 ^ 0x36363636,\n            p6 ^ 0x36363636,\n            p7 ^ 0x36363636,\n            p8 ^ 0x36363636,\n            p9 ^ 0x36363636,\n            p10 ^ 0x36363636,\n            p11 ^ 0x36363636,\n            p12 ^ 0x36363636,\n            p13 ^ 0x36363636,\n            p14 ^ 0x36363636,\n            p15 ^ 0x36363636\n        );\n        I0 = H0;\n        I1 = H1;\n        I2 = H2;\n        I3 = H3;\n        I4 = H4;\n        I5 = H5;\n        I6 = H6;\n        I7 = H7;\n\n        TOTAL0 = 64;\n        TOTAL1 = 0;\n    }\n\n    // offset — multiple of 64\n    // output — multiple of 32\n    function hmac_finish ( offset, length, output ) {\n        offset = offset|0;\n        length = length|0;\n        output = output|0;\n\n        var t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,\n            hashed = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        hashed = finish( offset, length, -1 )|0;\n        t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n        _hmac_opad();\n        _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return hashed|0;\n    }\n\n    // salt is assumed to be already processed\n    // offset — multiple of 64\n    // output — multiple of 32\n    function pbkdf2_generate_block ( offset, length, block, count, output ) {\n        offset = offset|0;\n        length = length|0;\n        block = block|0;\n        count = count|0;\n        output = output|0;\n\n        var h0 = 0, h1 = 0, h2 = 0, h3 = 0, h4 = 0, h5 = 0, h6 = 0, h7 = 0,\n            t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0;\n\n        if ( offset & 63 )\n            return -1;\n\n        if ( ~output )\n            if ( output & 31 )\n                return -1;\n\n        // pad block number into heap\n        // FIXME probable OOB write\n        HEAP[(offset+length)|0]   = block>>>24;\n        HEAP[(offset+length+1)|0] = block>>>16&255;\n        HEAP[(offset+length+2)|0] = block>>>8&255;\n        HEAP[(offset+length+3)|0] = block&255;\n\n        // finish first iteration\n        hmac_finish( offset, (length+4)|0, -1 )|0;\n        h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4, h5 = t5 = H5, h6 = t6 = H6, h7 = t7 = H7;\n        count = (count-1)|0;\n\n        // perform the rest iterations\n        while ( (count|0) > 0 ) {\n            hmac_reset();\n            _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n            _hmac_opad();\n            _core( t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768 );\n            t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;\n\n            h0 = h0 ^ H0;\n            h1 = h1 ^ H1;\n            h2 = h2 ^ H2;\n            h3 = h3 ^ H3;\n            h4 = h4 ^ H4;\n            h5 = h5 ^ H5;\n            h6 = h6 ^ H6;\n            h7 = h7 ^ H7;\n\n            count = (count-1)|0;\n        }\n\n        H0 = h0;\n        H1 = h1;\n        H2 = h2;\n        H3 = h3;\n        H4 = h4;\n        H5 = h5;\n        H6 = h6;\n        H7 = h7;\n\n        if ( ~output )\n            _state_to_heap(output);\n\n        return 0;\n    }\n\n    return {\n        // SHA256\n        reset: reset,\n        init: init,\n        process: process,\n        finish: finish,\n\n        // HMAC-SHA256\n        hmac_reset: hmac_reset,\n        hmac_init: hmac_init,\n        hmac_finish: hmac_finish,\n\n        // PBKDF2-HMAC-SHA256\n        pbkdf2_generate_block: pbkdf2_generate_block\n    }\n}\n","/**\n * SHA256 exports\n */\n\nimport { get_sha256_instance, sha256_constructor } from './sha256';\nimport { bytes_to_base64, bytes_to_hex } from '../../utils';\n\nfunction sha256_bytes(data) {\n  if (data === undefined) throw new SyntaxError('data required');\n  return get_sha256_instance()\n    .reset()\n    .process(data)\n    .finish().result;\n}\n\nfunction sha256_hex(data) {\n  var result = sha256_bytes(data);\n  return bytes_to_hex(result);\n}\n\nfunction sha256_base64(data) {\n  var result = sha256_bytes(data);\n  return bytes_to_base64(result);\n}\n\nexport var SHA256 = sha256_constructor;\nSHA256.bytes = sha256_bytes;\nSHA256.hex = sha256_hex;\nSHA256.base64 = sha256_base64;\n","import { is_buffer, is_bytes, is_string, string_to_bytes } from '../utils';\nimport { IllegalArgumentError, IllegalStateError } from '../errors';\n\nexport class hmac_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!options.hash) throw new SyntaxError(\"option 'hash' is required\");\n\n    if (!options.hash.HASH_SIZE)\n      throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n    this.BLOCK_SIZE = this.hash.BLOCK_SIZE;\n    this.HMAC_SIZE = this.hash.HASH_SIZE;\n\n    this.key = null;\n    this.verify = null;\n    this.result = null;\n\n    if (options.password !== undefined || options.verify !== undefined) this.reset(options);\n\n    return this;\n  }\n\n  reset(options) {\n    options = options || {};\n    var password = options.password;\n\n    if (this.key === null && !is_string(password) && !password)\n      throw new IllegalStateError('no key is associated with the instance');\n\n    this.result = null;\n    this.hash.reset();\n\n    if (password || is_string(password)) this.key = _hmac_key(this.hash, password);\n\n    var ipad = new Uint8Array(this.key);\n    for (var i = 0; i < ipad.length; ++i) ipad[i] ^= 0x36;\n\n    this.hash.process(ipad);\n\n    var verify = options.verify;\n    if (verify !== undefined) {\n      this._hmac_init_verify(verify);\n    } else {\n      this.verify = null;\n    }\n\n    return this;\n  }\n\n  process(data) {\n    if (this.key === null) throw new IllegalStateError('no key is associated with the instance');\n\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    this.hash.process(data);\n\n    return this;\n  }\n\n  finish() {\n    if (this.key === null) throw new IllegalStateError('no key is associated with the instance');\n\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    var inner_result = this.hash.finish().result;\n\n    var opad = new Uint8Array(this.key);\n    for (var i = 0; i < opad.length; ++i) opad[i] ^= 0x5c;\n\n    var verify = this.verify;\n    var result = this.hash\n      .reset()\n      .process(opad)\n      .process(inner_result)\n      .finish().result;\n\n    if (verify) {\n      if (verify.length === result.length) {\n        var diff = 0;\n        for (var i = 0; i < verify.length; i++) {\n          diff |= verify[i] ^ result[i];\n        }\n        this.result = !diff;\n      } else {\n        this.result = false;\n      }\n    } else {\n      this.result = result;\n    }\n\n    return this;\n  }\n\n  _hmac_init_verify(verify) {\n    if (is_buffer(verify) || is_bytes(verify)) {\n      verify = new Uint8Array(verify);\n    } else if (is_string(verify)) {\n      verify = string_to_bytes(verify);\n    } else {\n      throw new TypeError(\"verify tag isn't of expected type\");\n    }\n\n    if (verify.length !== this.HMAC_SIZE) throw new IllegalArgumentError('illegal verification tag size');\n\n    this.verify = verify;\n  }\n}\n\nexport function _hmac_key(hash, password) {\n  if (is_buffer(password)) password = new Uint8Array(password);\n\n  if (is_string(password)) password = string_to_bytes(password);\n\n  if (!is_bytes(password)) throw new TypeError(\"password isn't of expected type\");\n\n  var key = new Uint8Array(hash.BLOCK_SIZE);\n\n  if (password.length > hash.BLOCK_SIZE) {\n    key.set(\n      hash\n        .reset()\n        .process(password)\n        .finish().result,\n    );\n  } else {\n    key.set(password);\n  }\n\n  return key;\n}\n","import { hmac_constructor, _hmac_key } from './hmac';\nimport { _sha1_hash_size, get_sha1_instance, sha1_constructor } from '../hash/sha1/sha1';\nimport { is_string, string_to_bytes } from '../utils';\nimport { IllegalStateError } from '../errors';\n\nexport class hmac_sha1_constructor extends hmac_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!(options.hash instanceof sha1_constructor)) options.hash = get_sha1_instance();\n\n    super(options);\n  }\n\n  reset(options) {\n    options = options || {};\n\n    this.result = null;\n    this.hash.reset();\n\n    var password = options.password;\n    if (password !== undefined) {\n      if (is_string(password)) password = string_to_bytes(password);\n\n      var key = (this.key = _hmac_key(this.hash, password));\n      this.hash\n        .reset()\n        .asm.hmac_init(\n          (key[0] << 24) | (key[1] << 16) | (key[2] << 8) | key[3],\n          (key[4] << 24) | (key[5] << 16) | (key[6] << 8) | key[7],\n          (key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11],\n          (key[12] << 24) | (key[13] << 16) | (key[14] << 8) | key[15],\n          (key[16] << 24) | (key[17] << 16) | (key[18] << 8) | key[19],\n          (key[20] << 24) | (key[21] << 16) | (key[22] << 8) | key[23],\n          (key[24] << 24) | (key[25] << 16) | (key[26] << 8) | key[27],\n          (key[28] << 24) | (key[29] << 16) | (key[30] << 8) | key[31],\n          (key[32] << 24) | (key[33] << 16) | (key[34] << 8) | key[35],\n          (key[36] << 24) | (key[37] << 16) | (key[38] << 8) | key[39],\n          (key[40] << 24) | (key[41] << 16) | (key[42] << 8) | key[43],\n          (key[44] << 24) | (key[45] << 16) | (key[46] << 8) | key[47],\n          (key[48] << 24) | (key[49] << 16) | (key[50] << 8) | key[51],\n          (key[52] << 24) | (key[53] << 16) | (key[54] << 8) | key[55],\n          (key[56] << 24) | (key[57] << 16) | (key[58] << 8) | key[59],\n          (key[60] << 24) | (key[61] << 16) | (key[62] << 8) | key[63],\n        );\n    } else {\n      this.hash.asm.hmac_reset();\n    }\n\n    var verify = options.verify;\n    if (verify !== undefined) {\n      this._hmac_init_verify(verify);\n    } else {\n      this.verify = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * @return {hmac_sha1_constructor}\n   */\n  finish() {\n    if (this.key === null) throw new IllegalStateError('no key is associated with the instance');\n\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    var hash = this.hash,\n      asm = this.hash.asm,\n      heap = this.hash.heap;\n\n    asm.hmac_finish(hash.pos, hash.len, 0);\n\n    var verify = this.verify;\n    var result = new Uint8Array(_sha1_hash_size);\n    result.set(heap.subarray(0, _sha1_hash_size));\n\n    if (verify) {\n      if (verify.length === result.length) {\n        var diff = 0;\n        for (var i = 0; i < verify.length; i++) {\n          diff |= verify[i] ^ result[i];\n        }\n        this.result = !diff;\n      } else {\n        this.result = false;\n      }\n    } else {\n      this.result = result;\n    }\n\n    return this;\n  }\n}\n\nhmac_sha1_constructor.BLOCK_SIZE = sha1_constructor.BLOCK_SIZE;\nhmac_sha1_constructor.HMAC_SIZE = sha1_constructor.HASH_SIZE;\n\nvar hmac_sha1_instance = null;\n\n/**\n * @return {hmac_sha1_constructor}\n */\nexport function get_hmac_sha1_instance() {\n  if (hmac_sha1_instance === null) hmac_sha1_instance = new hmac_sha1_constructor();\n  return hmac_sha1_instance;\n}\n","/**\n * HMAC-SHA1 exports\n */\n\nimport { get_hmac_sha1_instance, hmac_sha1_constructor } from './hmac-sha1';\nimport { bytes_to_base64, bytes_to_hex } from '../utils';\n\nfunction hmac_sha1_bytes(data, password) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (password === undefined) throw new SyntaxError('password required');\n  return get_hmac_sha1_instance()\n    .reset({ password: password })\n    .process(data)\n    .finish().result;\n}\n\nfunction hmac_sha1_hex(data, password) {\n  var result = hmac_sha1_bytes(data, password);\n  return bytes_to_hex(result);\n}\n\nfunction hmac_sha1_base64(data, password) {\n  var result = hmac_sha1_bytes(data, password);\n  return bytes_to_base64(result);\n}\n\nexport var HMAC_SHA1 = hmac_sha1_constructor;\n\nHMAC_SHA1.bytes = hmac_sha1_bytes;\nHMAC_SHA1.hex = hmac_sha1_hex;\nHMAC_SHA1.base64 = hmac_sha1_base64;\n","import { hmac_constructor, _hmac_key } from './hmac';\nimport { _sha256_hash_size, get_sha256_instance, sha256_constructor } from '../hash/sha256/sha256';\nimport { is_string, string_to_bytes } from '../utils';\nimport { IllegalStateError } from '../errors';\n\nexport class hmac_sha256_constructor extends hmac_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!(options.hash instanceof sha256_constructor)) options.hash = get_sha256_instance();\n\n    super(options);\n  }\n\n  reset(options) {\n    options = options || {};\n\n    this.result = null;\n    this.hash.reset();\n\n    var password = options.password;\n    if (password !== undefined) {\n      if (is_string(password)) password = string_to_bytes(password);\n\n      var key = (this.key = _hmac_key(this.hash, password));\n      this.hash\n        .reset()\n        .asm.hmac_init(\n          (key[0] << 24) | (key[1] << 16) | (key[2] << 8) | key[3],\n          (key[4] << 24) | (key[5] << 16) | (key[6] << 8) | key[7],\n          (key[8] << 24) | (key[9] << 16) | (key[10] << 8) | key[11],\n          (key[12] << 24) | (key[13] << 16) | (key[14] << 8) | key[15],\n          (key[16] << 24) | (key[17] << 16) | (key[18] << 8) | key[19],\n          (key[20] << 24) | (key[21] << 16) | (key[22] << 8) | key[23],\n          (key[24] << 24) | (key[25] << 16) | (key[26] << 8) | key[27],\n          (key[28] << 24) | (key[29] << 16) | (key[30] << 8) | key[31],\n          (key[32] << 24) | (key[33] << 16) | (key[34] << 8) | key[35],\n          (key[36] << 24) | (key[37] << 16) | (key[38] << 8) | key[39],\n          (key[40] << 24) | (key[41] << 16) | (key[42] << 8) | key[43],\n          (key[44] << 24) | (key[45] << 16) | (key[46] << 8) | key[47],\n          (key[48] << 24) | (key[49] << 16) | (key[50] << 8) | key[51],\n          (key[52] << 24) | (key[53] << 16) | (key[54] << 8) | key[55],\n          (key[56] << 24) | (key[57] << 16) | (key[58] << 8) | key[59],\n          (key[60] << 24) | (key[61] << 16) | (key[62] << 8) | key[63],\n        );\n    } else {\n      this.hash.asm.hmac_reset();\n    }\n\n    var verify = options.verify;\n    if (verify !== undefined) {\n      this._hmac_init_verify(verify);\n    } else {\n      this.verify = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * @return {hmac_sha256_constructor}\n   */\n  finish() {\n    if (this.key === null) throw new IllegalStateError('no key is associated with the instance');\n\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    var hash = this.hash,\n      asm = this.hash.asm,\n      heap = this.hash.heap;\n\n    asm.hmac_finish(hash.pos, hash.len, 0);\n\n    var verify = this.verify;\n    var result = new Uint8Array(_sha256_hash_size);\n    result.set(heap.subarray(0, _sha256_hash_size));\n\n    if (verify) {\n      if (verify.length === result.length) {\n        var diff = 0;\n        for (var i = 0; i < verify.length; i++) {\n          diff |= verify[i] ^ result[i];\n        }\n        this.result = !diff;\n      } else {\n        this.result = false;\n      }\n    } else {\n      this.result = result;\n    }\n\n    return this;\n  }\n}\n\nhmac_sha256_constructor.BLOCK_SIZE = sha256_constructor.BLOCK_SIZE;\nhmac_sha256_constructor.HMAC_SIZE = sha256_constructor.HASH_SIZE;\n\nvar hmac_sha256_instance = null;\n\n/**\n * @return {hmac_sha256_constructor}\n */\nexport function get_hmac_sha256_instance() {\n  if (hmac_sha256_instance === null) hmac_sha256_instance = new hmac_sha256_constructor();\n  return hmac_sha256_instance;\n}\n","/**\n * HMAC-SHA256 exports\n */\n\nimport { get_hmac_sha256_instance, hmac_sha256_constructor } from './hmac-sha256';\nimport { bytes_to_base64, bytes_to_hex } from '../utils';\n\nfunction hmac_sha256_bytes(data, password) {\n  if (data === undefined) throw new SyntaxError('data required');\n  if (password === undefined) throw new SyntaxError('password required');\n  return get_hmac_sha256_instance()\n    .reset({ password: password })\n    .process(data)\n    .finish().result;\n}\n\nfunction hmac_sha256_hex(data, password) {\n  var result = hmac_sha256_bytes(data, password);\n  return bytes_to_hex(result);\n}\n\nfunction hmac_sha256_base64(data, password) {\n  var result = hmac_sha256_bytes(data, password);\n  return bytes_to_base64(result);\n}\n\nexport var HMAC_SHA256 = hmac_sha256_constructor;\n\nHMAC_SHA256.bytes = hmac_sha256_bytes;\nHMAC_SHA256.hex = hmac_sha256_hex;\nHMAC_SHA256.base64 = hmac_sha256_base64;\n","import { is_string } from '../utils';\nimport { IllegalArgumentError, IllegalStateError } from '../errors';\n\nexport class pbkdf2_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!options.hmac) throw new SyntaxError(\"option 'hmac' is required\");\n\n    if (!options.hmac.HMAC_SIZE)\n      throw new SyntaxError(\"option 'hmac' supplied doesn't seem to be a valid HMAC function\");\n\n    this.hmac = options.hmac;\n    this.count = options.count || 4096;\n    this.length = options.length || this.hmac.HMAC_SIZE;\n\n    this.result = null;\n\n    var password = options.password;\n    if (password || is_string(password)) this.reset(options);\n\n    return this;\n  }\n\n  reset(options) {\n    this.result = null;\n\n    this.hmac.reset(options);\n\n    return this;\n  }\n\n  generate(salt, count, length) {\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    if (!salt && !is_string(salt)) throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil(length / this.hmac.HMAC_SIZE);\n\n    for (var i = 1; i <= blocks; ++i) {\n      var j = (i - 1) * this.hmac.HMAC_SIZE;\n      var l = (i < blocks ? 0 : length % this.hmac.HMAC_SIZE) || this.hmac.HMAC_SIZE;\n      var tmp = new Uint8Array(\n        this.hmac\n          .reset()\n          .process(salt)\n          .process(new Uint8Array([(i >>> 24) & 0xff, (i >>> 16) & 0xff, (i >>> 8) & 0xff, i & 0xff]))\n          .finish().result,\n      );\n      this.result.set(tmp.subarray(0, l), j);\n      for (var k = 1; k < count; ++k) {\n        tmp = new Uint8Array(\n          this.hmac\n            .reset()\n            .process(tmp)\n            .finish().result,\n        );\n        for (var r = 0; r < l; ++r) this.result[j + r] ^= tmp[r];\n      }\n    }\n\n    return this;\n  }\n}\n","import { get_hmac_sha1_instance, hmac_sha1_constructor } from '../hmac/hmac-sha1';\nimport { pbkdf2_constructor } from './pbkdf2';\nimport { is_string } from '../utils';\nimport { IllegalArgumentError, IllegalStateError } from '../errors';\n\nexport class pbkdf2_hmac_sha1_constructor extends pbkdf2_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!(options.hmac instanceof hmac_sha1_constructor)) options.hmac = get_hmac_sha1_instance();\n\n    super(options);\n  }\n\n  generate(salt, count, length) {\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    if (!salt && !is_string(salt)) throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil(length / this.hmac.HMAC_SIZE);\n\n    for (var i = 1; i <= blocks; ++i) {\n      var j = (i - 1) * this.hmac.HMAC_SIZE;\n      var l = (i < blocks ? 0 : length % this.hmac.HMAC_SIZE) || this.hmac.HMAC_SIZE;\n\n      this.hmac.reset().process(salt);\n      this.hmac.hash.asm.pbkdf2_generate_block(this.hmac.hash.pos, this.hmac.hash.len, i, count, 0);\n\n      this.result.set(this.hmac.hash.heap.subarray(0, l), j);\n    }\n\n    return this;\n  }\n}\n\nvar pbkdf2_hmac_sha1_instance = null;\n\nexport function get_pbkdf2_hmac_sha1_instance() {\n  if (pbkdf2_hmac_sha1_instance === null) pbkdf2_hmac_sha1_instance = new pbkdf2_hmac_sha1_constructor();\n  return pbkdf2_hmac_sha1_instance;\n}\n","/**\n * PBKDF2-HMAC-SHA1 exports\n */\n\nimport { bytes_to_base64, bytes_to_hex } from '../utils';\nimport { get_pbkdf2_hmac_sha1_instance } from './pbkdf2-hmac-sha1';\n\nfunction pbkdf2_hmac_sha1_bytes(password, salt, iterations, dklen) {\n  if (password === undefined) throw new SyntaxError('password required');\n  if (salt === undefined) throw new SyntaxError('salt required');\n  return get_pbkdf2_hmac_sha1_instance()\n    .reset({ password: password })\n    .generate(salt, iterations, dklen).result;\n}\n\nfunction pbkdf2_hmac_sha1_hex(password, salt, iterations, dklen) {\n  var result = pbkdf2_hmac_sha1_bytes(password, salt, iterations, dklen);\n  return bytes_to_hex(result);\n}\n\nfunction pbkdf2_hmac_sha1_base64(password, salt, iterations, dklen) {\n  var result = pbkdf2_hmac_sha1_bytes(password, salt, iterations, dklen);\n  return bytes_to_base64(result);\n}\n\nexport var PBKDF2 = {\n  bytes: pbkdf2_hmac_sha1_bytes,\n  hex: pbkdf2_hmac_sha1_hex,\n  base64: pbkdf2_hmac_sha1_base64,\n};\n\nexport var PBKDF2_HMAC_SHA1 = {\n  bytes: pbkdf2_hmac_sha1_bytes,\n  hex: pbkdf2_hmac_sha1_hex,\n  base64: pbkdf2_hmac_sha1_base64,\n};\n","import { pbkdf2_constructor } from './pbkdf2';\nimport { get_hmac_sha256_instance, hmac_sha256_constructor } from '../hmac/hmac-sha256';\nimport { is_string } from '../utils';\nimport { IllegalArgumentError, IllegalStateError } from '../errors';\n\nexport class pbkdf2_hmac_sha256_constructor extends pbkdf2_constructor {\n  constructor(options) {\n    options = options || {};\n\n    if (!(options.hmac instanceof hmac_sha256_constructor)) options.hmac = get_hmac_sha256_instance();\n\n    super(options);\n  }\n\n  generate(salt, count, length) {\n    if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');\n\n    if (!salt && !is_string(salt)) throw new IllegalArgumentError(\"bad 'salt' value\");\n\n    count = count || this.count;\n    length = length || this.length;\n\n    this.result = new Uint8Array(length);\n\n    var blocks = Math.ceil(length / this.hmac.HMAC_SIZE);\n\n    for (var i = 1; i <= blocks; ++i) {\n      var j = (i - 1) * this.hmac.HMAC_SIZE;\n      var l = (i < blocks ? 0 : length % this.hmac.HMAC_SIZE) || this.hmac.HMAC_SIZE;\n\n      this.hmac.reset().process(salt);\n      this.hmac.hash.asm.pbkdf2_generate_block(this.hmac.hash.pos, this.hmac.hash.len, i, count, 0);\n\n      this.result.set(this.hmac.hash.heap.subarray(0, l), j);\n    }\n\n    return this;\n  }\n}\n\nvar pbkdf2_hmac_sha256_instance = null;\n\nexport function get_pbkdf2_hmac_sha256_instance() {\n  if (pbkdf2_hmac_sha256_instance === null) pbkdf2_hmac_sha256_instance = new pbkdf2_hmac_sha256_constructor();\n  return pbkdf2_hmac_sha256_instance;\n}\n","/**\n * PBKDF2-HMAC-SHA256 exports\n */\n\nimport { get_pbkdf2_hmac_sha256_instance } from './pbkdf2-hmac-sha256';\nimport { bytes_to_base64, bytes_to_hex } from '../utils';\n\nfunction pbkdf2_hmac_sha256_bytes(password, salt, iterations, dklen) {\n  if (password === undefined) throw new SyntaxError('password required');\n  if (salt === undefined) throw new SyntaxError('salt required');\n  return get_pbkdf2_hmac_sha256_instance()\n    .reset({ password: password })\n    .generate(salt, iterations, dklen).result;\n}\n\nfunction pbkdf2_hmac_sha256_hex(password, salt, iterations, dklen) {\n  var result = pbkdf2_hmac_sha256_bytes(password, salt, iterations, dklen);\n  return bytes_to_hex(result);\n}\n\nfunction pbkdf2_hmac_sha256_base64(password, salt, iterations, dklen) {\n  var result = pbkdf2_hmac_sha256_bytes(password, salt, iterations, dklen);\n  return bytes_to_base64(result);\n}\n\nexport var PBKDF2_HMAC_SHA256 = {\n  bytes: pbkdf2_hmac_sha256_bytes,\n  hex: pbkdf2_hmac_sha256_hex,\n  base64: pbkdf2_hmac_sha256_base64,\n};\n","import { ISAAC } from './isaac';\nimport { FloatArray, is_buffer, is_typed_array } from '../utils';\nimport { get_pbkdf2_hmac_sha256_instance } from '../pbkdf2/pbkdf2-hmac-sha256';\nimport { SecurityError } from '../errors';\n\nvar _global_console = typeof console !== 'undefined' ? console : undefined,\n  _global_date_now = Date.now,\n  _global_math_random = Math.random,\n  _global_performance = typeof performance !== 'undefined' ? performance : undefined,\n  _global_crypto = typeof crypto !== 'undefined' ? crypto : typeof msCrypto !== 'undefined' ? msCrypto : undefined,\n  _global_crypto_getRandomValues;\n\nif (_global_crypto !== undefined) _global_crypto_getRandomValues = _global_crypto.getRandomValues;\n\nvar _isaac_rand = ISAAC.rand,\n  _isaac_seed = ISAAC.seed,\n  _isaac_counter = 0,\n  _isaac_weak_seeded = false,\n  _isaac_seeded = false;\n\nvar _random_estimated_entropy = 0,\n  _random_required_entropy = 256,\n  _random_warn_callstacks = {};\n\nexport var _random_skip_system_rng_warning = false;\nexport var _random_allow_weak = false;\n\nvar _hires_now;\nif (_global_performance !== undefined) {\n  _hires_now = function() {\n    return (1000 * _global_performance.now()) | 0;\n  };\n} else {\n  var _hires_epoch = (1000 * _global_date_now()) | 0;\n  _hires_now = function() {\n    return (1000 * _global_date_now() - _hires_epoch) | 0;\n  };\n}\n\n/**\n * weak_seed\n *\n * Seeds RNG with native `crypto.getRandomValues` output or with high-resolution\n * time and single `Math.random()` value, and various other sources.\n *\n * We estimate this may give at least ~50 bits of unpredictableness,\n * but this has not been analysed thoroughly or precisely.\n */\nfunction Random_weak_seed() {\n  if (_global_crypto !== undefined) {\n    buffer = new Uint8Array(32);\n    _global_crypto_getRandomValues.call(_global_crypto, buffer);\n\n    _isaac_seed(buffer);\n  } else {\n    // Some clarification about brute-force attack cost:\n    // - entire bitcoin network operates at ~10^16 hash guesses per second;\n    // - each PBKDF2 iteration requires the same number of hashing operations as bitcoin nonce guess;\n    // - attacker having such a hashing power is able to break worst-case 50 bits of the randomness in ~3 hours;\n    // Sounds sad though attacker having such a hashing power more likely would prefer to mine bitcoins.\n    var buffer = new FloatArray(3),\n      i,\n      t;\n\n    buffer[0] = _global_math_random();\n    buffer[1] = _global_date_now();\n    buffer[2] = _hires_now();\n\n    buffer = new Uint8Array(buffer.buffer);\n\n    var salt = '';\n    if (typeof location !== 'undefined') {\n      salt += location.href;\n    } else if (typeof process !== 'undefined') {\n      salt += process.pid + process.title;\n    }\n\n    var pbkdf2 = get_pbkdf2_hmac_sha256_instance();\n    for (i = 0; i < 100; i++) {\n      buffer = pbkdf2.reset({ password: buffer }).generate(salt, 1000, 32).result;\n      t = _hires_now();\n      (buffer[0] ^= t >>> 24), (buffer[1] ^= t >>> 16), (buffer[2] ^= t >>> 8), (buffer[3] ^= t);\n    }\n\n    _isaac_seed(buffer);\n  }\n\n  _isaac_counter = 0;\n\n  _isaac_weak_seeded = true;\n}\n\n/**\n * seed\n *\n * Seeds PRNG with supplied random values if these values have enough entropy.\n *\n * A false return value means the RNG is currently insecure; however a true\n * return value does not mean it is necessarily secure (depending on how you\n * collected the seed) though asmCrypto will be forced to assume this.\n *\n * The input buffer will be zeroed to discourage reuse. You should not copy it\n * or use it anywhere else before passing it into this function.\n *\n * **DISCLAIMER!** Seeding with a poor values is an easiest way shoot your legs, so\n * do not seed until you're know what entropy is and how to obtail high-quality random values,\n * **DO NOT SEED WITH CONSTANT VALUE! YOU'LL GET NO RANDOMNESS FROM CONSTANT!**\n */\nexport function Random_seed(seed) {\n  if (!is_buffer(seed) && !is_typed_array(seed)) throw new TypeError('bad seed type');\n\n  var bpos = seed.byteOffset || 0,\n    blen = seed.byteLength || seed.length,\n    buff = new Uint8Array(seed.buffer || seed, bpos, blen);\n\n  _isaac_seed(buff);\n\n  _isaac_counter = 0;\n\n  // don't let the user use these bytes again\n  var nonzero = 0;\n  for (var i = 0; i < buff.length; i++) {\n    nonzero |= buff[i];\n    buff[i] = 0;\n  }\n\n  if (nonzero !== 0) {\n    // TODO we could make a better estimate, but half-length is a prudent\n    // simple measure that seems unlikely to over-estimate\n    _random_estimated_entropy += 4 * blen;\n  }\n\n  _isaac_seeded = _random_estimated_entropy >= _random_required_entropy;\n\n  return _isaac_seeded;\n}\n\n/**\n * getValues\n *\n * Populates the buffer with cryptographically secure random values. These are\n * calculated using `crypto.getRandomValues` if it is available, as well as our\n * own ISAAC PRNG implementation.\n *\n * If the former is not available (older browsers such as IE10 [1]), then the\n * latter *must* be seeded using `Random.seed`, unless `asmCrypto.random.allowWeak` is true.\n *\n * *We assume the system RNG is strong*; if you cannot afford this risk, then\n * you should also seed ISAAC using `Random.seed`. This is advisable for very\n * important situations, such as generation of long-term secrets. See also [2].\n *\n * [1] https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n * [2] https://en.wikipedia.org/wiki/Dual_EC_DRBG\n *\n * In all cases, we opportunistically seed using various arbitrary sources\n * such as high-resolution time and one single value from the insecure\n * Math.random(); however this is not reliable as a strong security measure.\n */\nexport function Random_getValues(buffer) {\n  // opportunistically seed ISAAC with a weak seed; this hopefully makes an\n  // attack harder in the case where the system RNG is weak *and* we haven't\n  // seeded ISAAC. but don't make any guarantees to the user about this.\n  if (!_isaac_weak_seeded) Random_weak_seed();\n\n  // if we have no strong sources then the RNG is weak, handle it\n  if (!_isaac_seeded && _global_crypto === undefined) {\n    if (!_random_allow_weak) throw new SecurityError('No strong PRNGs available. Use asmCrypto.random.seed().');\n\n    if (_global_console !== undefined)\n      _global_console.error(\n        'No strong PRNGs available; your security is greatly lowered. Use asmCrypto.random.seed().',\n      );\n  }\n\n  // separate warning about assuming system RNG strong\n  if (\n    !_random_skip_system_rng_warning &&\n    !_isaac_seeded &&\n    _global_crypto !== undefined &&\n    _global_console !== undefined\n  ) {\n    // Hacky way to get call stack\n    var s = new Error().stack;\n    _random_warn_callstacks[s] |= 0;\n    if (!_random_warn_callstacks[s]++)\n      _global_console.warn(\n        'asmCrypto PRNG not seeded; your security relies on your system PRNG. If this is not acceptable, use asmCrypto.random.seed().',\n      );\n  }\n\n  // proceed to get random values\n  if (!is_buffer(buffer) && !is_typed_array(buffer)) throw new TypeError('unexpected buffer type');\n\n  var bpos = buffer.byteOffset || 0,\n    blen = buffer.byteLength || buffer.length,\n    bytes = new Uint8Array(buffer.buffer || buffer, bpos, blen),\n    i,\n    r;\n\n  // apply system rng\n  if (_global_crypto !== undefined) _global_crypto_getRandomValues.call(_global_crypto, bytes);\n\n  // apply isaac rng\n  for (i = 0; i < blen; i++) {\n    if ((i & 3) === 0) {\n      if (_isaac_counter >= 0x10000000000) Random_weak_seed();\n      r = _isaac_rand();\n      _isaac_counter++;\n    }\n    bytes[i] ^= r;\n    r >>>= 8;\n  }\n\n  return buffer;\n}\n\n/**\n * getNumber\n *\n * A drop-in `Math.random` replacement.\n * Intended for prevention of random material leakage out of the user's host.\n */\nexport function Random_getNumber() {\n  if (!_isaac_weak_seeded || _isaac_counter >= 0x10000000000) Random_weak_seed();\n\n  var n = (0x100000 * _isaac_rand() + (_isaac_rand() >>> 12)) / 0x10000000000000;\n  _isaac_counter += 2;\n\n  return n;\n}\n\nObject.defineProperty(Random_getNumber, 'allowWeak', {\n  get: function() {\n    return _random_allow_weak;\n  },\n  set: function(a) {\n    _random_allow_weak = a;\n  },\n});\n\nObject.defineProperty(Random_getNumber, 'skipSystemRNGWarning', {\n  get: function() {\n    return _random_skip_system_rng_warning;\n  },\n  set: function(w) {\n    _random_skip_system_rng_warning = w;\n  },\n});\n\nObject.defineProperty(Random_getValues, 'allowWeak', {\n  get: function() {\n    return _random_allow_weak;\n  },\n  set: function(a) {\n    _random_allow_weak = a;\n  },\n});\n\nObject.defineProperty(Random_getValues, 'skipSystemRNGWarning', {\n  get: function() {\n    return _random_skip_system_rng_warning;\n  },\n  set: function(w) {\n    _random_skip_system_rng_warning = w;\n  },\n});\n\nRandom_getNumber.seed = Random_seed;\nRandom_getValues.seed = Random_seed;\n","/* ----------------------------------------------------------------------\n * Copyright (c) 2014 Artem S Vybornov\n *\n * Copyright (c) 2012 Yves-Marie K. Rinquin\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * ----------------------------------------------------------------------\n *\n * ISAAC is a cryptographically secure pseudo-random number generator\n * (or CSPRNG for short) designed by Robert J. Jenkins Jr. in 1996 and\n * based on RC4. It is designed for speed and security.\n *\n * ISAAC's informations & analysis:\n *   http://burtleburtle.net/bob/rand/isaac.html\n * ISAAC's implementation details:\n *   http://burtleburtle.net/bob/rand/isaacafa.html\n *\n * ISAAC succesfully passed TestU01\n */\n\nimport { FloatArray, is_buffer, is_number, is_string, is_typed_array, string_to_bytes } from '../utils';\n\nexport var ISAAC = (function() {\n  var m = new Uint32Array(256), // internal memory\n    r = new Uint32Array(256), // result array\n    acc = 0, // accumulator\n    brs = 0, // last result\n    cnt = 0, // counter\n    gnt = 0; // generation counter\n\n  /* private: randinit function, same as ISAAC reference implementation */\n  function randinit() {\n    var a, b, c, d, e, f, g, h;\n\n    /* private mixing function */\n    function mix() {\n      a ^= b << 11;\n      d = (d + a) | 0;\n      b = (b + c) | 0;\n      b ^= c >>> 2;\n      e = (e + b) | 0;\n      c = (c + d) | 0;\n      c ^= d << 8;\n      f = (f + c) | 0;\n      d = (d + e) | 0;\n      d ^= e >>> 16;\n      g = (g + d) | 0;\n      e = (e + f) | 0;\n      e ^= f << 10;\n      h = (h + e) | 0;\n      f = (f + g) | 0;\n      f ^= g >>> 4;\n      a = (a + f) | 0;\n      g = (g + h) | 0;\n      g ^= h << 8;\n      b = (b + g) | 0;\n      h = (h + a) | 0;\n      h ^= a >>> 9;\n      c = (c + h) | 0;\n      a = (a + b) | 0;\n    }\n\n    acc = brs = cnt = 0;\n\n    // the golden ratio\n    a = b = c = d = e = f = g = h = 0x9e3779b9;\n\n    // scramble it\n    for (var i = 0; i < 4; i++) mix();\n\n    // mix it and combine with the internal state\n    for (var i = 0; i < 256; i += 8) {\n      a = (a + r[i | 0]) | 0;\n      b = (b + r[i | 1]) | 0;\n      c = (c + r[i | 2]) | 0;\n      d = (d + r[i | 3]) | 0;\n      e = (e + r[i | 4]) | 0;\n      f = (f + r[i | 5]) | 0;\n      g = (g + r[i | 6]) | 0;\n      h = (h + r[i | 7]) | 0;\n      mix();\n      m.set([a, b, c, d, e, f, g, h], i);\n    }\n\n    // mix it again\n    for (var i = 0; i < 256; i += 8) {\n      a = (a + m[i | 0]) | 0;\n      b = (b + m[i | 1]) | 0;\n      c = (c + m[i | 2]) | 0;\n      d = (d + m[i | 3]) | 0;\n      e = (e + m[i | 4]) | 0;\n      f = (f + m[i | 5]) | 0;\n      g = (g + m[i | 6]) | 0;\n      h = (h + m[i | 7]) | 0;\n      mix();\n      m.set([a, b, c, d, e, f, g, h], i);\n    }\n\n    // fill in the first set of results\n    prng(1), (gnt = 256);\n  }\n\n  /* public: seeding function */\n  function seed(s) {\n    var i, j, k, n, l;\n\n    if (!is_typed_array(s)) {\n      if (is_number(s)) {\n        (n = new FloatArray(1)), (n[0] = s);\n        s = new Uint8Array(n.buffer);\n      } else if (is_string(s)) {\n        s = string_to_bytes(s);\n      } else if (is_buffer(s)) {\n        s = new Uint8Array(s);\n      } else {\n        throw new TypeError('bad seed type');\n      }\n    } else {\n      s = new Uint8Array(s.buffer);\n    }\n\n    // preprocess the seed\n    l = s.length;\n    for (j = 0; j < l; j += 1024) {\n      // xor each chunk of 1024 bytes with r, for randinit() to mix in\n      for (k = j, i = 0; i < 1024 && k < l; k = j | ++i) {\n        r[i >> 2] ^= s[k] << ((i & 3) << 3);\n      }\n      randinit();\n    }\n  }\n\n  /* public: isaac generator, n = number of run */\n  function prng(n) {\n    n = n || 1;\n\n    var i, x, y;\n\n    while (n--) {\n      cnt = (cnt + 1) | 0;\n      brs = (brs + cnt) | 0;\n\n      for (i = 0; i < 256; i += 4) {\n        acc ^= acc << 13;\n        acc = (m[(i + 128) & 0xff] + acc) | 0;\n        x = m[i | 0];\n        m[i | 0] = y = (m[(x >>> 2) & 0xff] + ((acc + brs) | 0)) | 0;\n        r[i | 0] = brs = (m[(y >>> 10) & 0xff] + x) | 0;\n\n        acc ^= acc >>> 6;\n        acc = (m[(i + 129) & 0xff] + acc) | 0;\n        x = m[i | 1];\n        m[i | 1] = y = (m[(x >>> 2) & 0xff] + ((acc + brs) | 0)) | 0;\n        r[i | 1] = brs = (m[(y >>> 10) & 0xff] + x) | 0;\n\n        acc ^= acc << 2;\n        acc = (m[(i + 130) & 0xff] + acc) | 0;\n        x = m[i | 2];\n        m[i | 2] = y = (m[(x >>> 2) & 0xff] + ((acc + brs) | 0)) | 0;\n        r[i | 2] = brs = (m[(y >>> 10) & 0xff] + x) | 0;\n\n        acc ^= acc >>> 16;\n        acc = (m[(i + 131) & 0xff] + acc) | 0;\n        x = m[i | 3];\n        m[i | 3] = y = (m[(x >>> 2) & 0xff] + ((acc + brs) | 0)) | 0;\n        r[i | 3] = brs = (m[(y >>> 10) & 0xff] + x) | 0;\n      }\n    }\n  }\n\n  /* public: return a random number */\n  function rand() {\n    if (!gnt--) prng(1), (gnt = 255);\n\n    return r[gnt];\n  }\n\n  /* return class object */\n  return {\n    seed: seed,\n    prng: prng,\n    rand: rand,\n  };\n})();\n","/**\n * Integers are represented as little endian array of 32-bit limbs.\n * Limbs number is a power of 2 and a multiple of 8 (256 bits).\n * Negative values use two's complement representation.\n */\nexport function bigint_asm ( stdlib, foreign, buffer ) {\n    \"use asm\";\n\n    var SP = 0;\n\n    var HEAP32 = new stdlib.Uint32Array(buffer);\n\n    var imul = stdlib.Math.imul;\n\n    /**\n     * Simple stack memory allocator\n     *\n     * Methods:\n     *  sreset\n     *  salloc\n     *  sfree\n     */\n\n    function sreset ( p ) {\n        p = p|0;\n        SP = p = (p + 31) & -32;\n        return p|0;\n    }\n\n    function salloc ( l ) {\n        l = l|0;\n        var p = 0; p = SP;\n        SP = p + ((l + 31) & -32)|0;\n        return p|0;\n    }\n\n    function sfree ( l ) {\n        l = l|0;\n        SP = SP - ((l + 31) & -32)|0;\n    }\n\n    /**\n     * Utility functions:\n     *  cp\n     *  z\n     */\n\n    function cp ( l, A, B ) {\n        l = l|0;\n        A = A|0;\n        B = B|0;\n\n        var i = 0;\n\n        if ( (A|0) > (B|0) ) {\n            for ( ; (i|0) < (l|0); i = (i+4)|0 ) {\n                HEAP32[(B+i)>>2] = HEAP32[(A+i)>>2];\n            }\n        }\n        else {\n            for ( i = (l-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                HEAP32[(B+i)>>2] = HEAP32[(A+i)>>2];\n            }\n        }\n    }\n\n    function z ( l, z, A ) {\n        l = l|0;\n        z = z|0;\n        A = A|0;\n\n        var i = 0;\n\n        for ( ; (i|0) < (l|0); i = (i+4)|0 ) {\n            HEAP32[(A+i)>>2] = z;\n        }\n    }\n\n    /**\n     * Negate the argument\n     *\n     * Perform two's complement transformation:\n     *\n     *  -A = ~A + 1\n     *\n     * @param A offset of the argment being negated, 32-byte aligned\n     * @param lA length of the argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function neg ( A, lA, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lR|0) <= 0 )\n            lR = lA;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        c = 1;\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            a = ~HEAP32[(A+i)>>2];\n            t = (a & 0xffff) + c|0;\n            r = (a >>> 16) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (r << 16) | (t & 0xffff);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = (c-1)|0;\n        }\n\n        return c|0;\n    }\n\n    function cmp ( A, lA, B, lB ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n\n        var a = 0, b = 0, i = 0;\n\n        if ( (lA|0) > (lB|0) ) {\n            for ( i = (lA-4)|0; (i|0) >= (lB|0); i = (i-4)|0 ) {\n                if ( HEAP32[(A+i)>>2]|0 ) return 1;\n            }\n        }\n        else {\n            for ( i = (lB-4)|0; (i|0) >= (lA|0); i = (i-4)|0 ) {\n                if ( HEAP32[(B+i)>>2]|0 ) return -1;\n            }\n        }\n\n        for ( ; (i|0) >= 0; i = (i-4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0, b = HEAP32[(B+i)>>2]|0;\n            if ( (a>>>0) < (b>>>0) ) return -1;\n            if ( (a>>>0) > (b>>>0) ) return 1;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Test the argument\n     *\n     * Same as `cmp` with zero.\n     */\n    function tst ( A, lA ) {\n        A  =  A|0;\n        lA = lA|0;\n\n        var i = 0;\n\n        for ( i = (lA-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n            if ( HEAP32[(A+i)>>2]|0 ) return (i+4)|0;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Conventional addition\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-bit aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function add ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, b = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lA|0) < (lB|0) ) {\n            t = A, A = B, B = t;\n            t = lA, lA = lB, lB = t;\n        }\n\n        if ( (lR|0) <= 0 )\n            lR = lA+4|0;\n\n        if ( (lR|0) < (lB|0) )\n            lA = lB = lR;\n\n        for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0;\n            b = HEAP32[(B+i)>>2]|0;\n            t = ( (a & 0xffff) + (b & 0xffff)|0 ) + c|0;\n            r = ( (a >>> 16) + (b >>> 16)|0 ) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            a = HEAP32[(A+i)>>2]|0;\n            t = (a & 0xffff) + c|0;\n            r = (a >>> 16) + (t >>> 16)|0;\n            HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n            c = r >>> 16;\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = c|0;\n            c = 0;\n        }\n\n        return c|0;\n    }\n\n   /**\n     * Conventional subtraction\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-bit aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function sub ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var a = 0, b = 0, c = 0, t = 0, r = 0, i = 0;\n\n        if ( (lR|0) <= 0 )\n            lR = (lA|0) > (lB|0) ? lA+4|0 : lB+4|0;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        if ( (lR|0) < (lB|0) )\n            lB = lR;\n\n        if ( (lA|0) < (lB|0) ) {\n            for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                b = HEAP32[(B+i)>>2]|0;\n                t = ( (a & 0xffff) - (b & 0xffff)|0 ) + c|0;\n                r = ( (a >>> 16) - (b >>> 16)|0 ) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n\n            for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n                b = HEAP32[(B+i)>>2]|0;\n                t = c - (b & 0xffff)|0;\n                r = (t >> 16) - (b >>> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n        }\n        else {\n            for ( ; (i|0) < (lB|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                b = HEAP32[(B+i)>>2]|0;\n                t = ( (a & 0xffff) - (b & 0xffff)|0 ) + c|0;\n                r = ( (a >>> 16) - (b >>> 16)|0 ) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n\n            for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n                a = HEAP32[(A+i)>>2]|0;\n                t = (a & 0xffff) + c|0;\n                r = (a >>> 16) + (t >> 16)|0;\n                HEAP32[(R+i)>>2] = (t & 0xffff) | (r << 16);\n                c = r >> 16;\n            }\n        }\n\n        for ( ; (i|0) < (lR|0); i = (i+4)|0 ) {\n            HEAP32[(R+i)>>2] = c|0;\n        }\n\n        return c|0;\n    }\n\n    /**\n     * Conventional multiplication\n     *\n     * TODO implement Karatsuba algorithm for large multiplicands\n     *\n     * @param A offset of the first argument, 32-byte aligned\n     * @param lA length of the first argument, multiple of 32\n     *\n     * @param B offset of the second argument, 32-byte aligned\n     * @param lB length of the second argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     * @param lR length to truncate the result to, multiple of 32\n     */\n    function mul ( A, lA, B, lB, R, lR ) {\n        A  =  A|0;\n        lA = lA|0;\n        B  =  B|0;\n        lB = lB|0;\n        R  =  R|0;\n        lR = lR|0;\n\n        var al0 = 0, al1 = 0, al2 = 0, al3 = 0, al4 = 0, al5 = 0, al6 = 0, al7 = 0, ah0 = 0, ah1 = 0, ah2 = 0, ah3 = 0, ah4 = 0, ah5 = 0, ah6 = 0, ah7 = 0,\n            bl0 = 0, bl1 = 0, bl2 = 0, bl3 = 0, bl4 = 0, bl5 = 0, bl6 = 0, bl7 = 0, bh0 = 0, bh1 = 0, bh2 = 0, bh3 = 0, bh4 = 0, bh5 = 0, bh6 = 0, bh7 = 0,\n            r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, r8 = 0, r9 = 0, r10 = 0, r11 = 0, r12 = 0, r13 = 0, r14 = 0, r15 = 0,\n            u = 0, v = 0, w = 0, m = 0,\n            i = 0, Ai = 0, j = 0, Bj = 0, Rk = 0;\n\n        if ( (lA|0) > (lB|0) ) {\n            u = A, v = lA;\n            A = B, lA = lB;\n            B = u, lB = v;\n        }\n\n        m = (lA+lB)|0;\n        if ( ( (lR|0) > (m|0) ) | ( (lR|0) <= 0 ) )\n            lR = m;\n\n        if ( (lR|0) < (lA|0) )\n            lA = lR;\n\n        if ( (lR|0) < (lB|0) )\n            lB = lR;\n\n        for ( ; (i|0) < (lA|0); i = (i+32)|0 ) {\n            Ai = (A+i)|0;\n\n            ah0 = HEAP32[(Ai|0)>>2]|0,\n            ah1 = HEAP32[(Ai|4)>>2]|0,\n            ah2 = HEAP32[(Ai|8)>>2]|0,\n            ah3 = HEAP32[(Ai|12)>>2]|0,\n            ah4 = HEAP32[(Ai|16)>>2]|0,\n            ah5 = HEAP32[(Ai|20)>>2]|0,\n            ah6 = HEAP32[(Ai|24)>>2]|0,\n            ah7 = HEAP32[(Ai|28)>>2]|0,\n            al0 = ah0 & 0xffff,\n            al1 = ah1 & 0xffff,\n            al2 = ah2 & 0xffff,\n            al3 = ah3 & 0xffff,\n            al4 = ah4 & 0xffff,\n            al5 = ah5 & 0xffff,\n            al6 = ah6 & 0xffff,\n            al7 = ah7 & 0xffff,\n            ah0 = ah0 >>> 16,\n            ah1 = ah1 >>> 16,\n            ah2 = ah2 >>> 16,\n            ah3 = ah3 >>> 16,\n            ah4 = ah4 >>> 16,\n            ah5 = ah5 >>> 16,\n            ah6 = ah6 >>> 16,\n            ah7 = ah7 >>> 16;\n\n            r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0;\n\n            for ( j = 0; (j|0) < (lB|0); j = (j+32)|0 ) {\n                Bj = (B+j)|0;\n                Rk = (R+(i+j|0))|0;\n\n                bh0 = HEAP32[(Bj|0)>>2]|0,\n                bh1 = HEAP32[(Bj|4)>>2]|0,\n                bh2 = HEAP32[(Bj|8)>>2]|0,\n                bh3 = HEAP32[(Bj|12)>>2]|0,\n                bh4 = HEAP32[(Bj|16)>>2]|0,\n                bh5 = HEAP32[(Bj|20)>>2]|0,\n                bh6 = HEAP32[(Bj|24)>>2]|0,\n                bh7 = HEAP32[(Bj|28)>>2]|0,\n                bl0 = bh0 & 0xffff,\n                bl1 = bh1 & 0xffff,\n                bl2 = bh2 & 0xffff,\n                bl3 = bh3 & 0xffff,\n                bl4 = bh4 & 0xffff,\n                bl5 = bh5 & 0xffff,\n                bl6 = bh6 & 0xffff,\n                bl7 = bh7 & 0xffff,\n                bh0 = bh0 >>> 16,\n                bh1 = bh1 >>> 16,\n                bh2 = bh2 >>> 16,\n                bh3 = bh3 >>> 16,\n                bh4 = bh4 >>> 16,\n                bh5 = bh5 >>> 16,\n                bh6 = bh6 >>> 16,\n                bh7 = bh7 >>> 16;\n\n                r0 = HEAP32[(Rk|0)>>2]|0,\n                r1 = HEAP32[(Rk|4)>>2]|0,\n                r2 = HEAP32[(Rk|8)>>2]|0,\n                r3 = HEAP32[(Rk|12)>>2]|0,\n                r4 = HEAP32[(Rk|16)>>2]|0,\n                r5 = HEAP32[(Rk|20)>>2]|0,\n                r6 = HEAP32[(Rk|24)>>2]|0,\n                r7 = HEAP32[(Rk|28)>>2]|0;\n\n                u = ((imul(al0, bl0)|0) + (r8 & 0xffff)|0) + (r0 & 0xffff)|0;\n                v = ((imul(ah0, bl0)|0) + (r8 >>> 16)|0) + (r0 >>> 16)|0;\n                w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r0 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl1)|0) + (m & 0xffff)|0) + (r1 & 0xffff)|0;\n                v = ((imul(ah0, bl1)|0) + (m >>> 16)|0) + (r1 >>> 16)|0;\n                w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r1 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl2)|0) + (m & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah0, bl2)|0) + (m >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl3)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah0, bl3)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl4)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah0, bl4)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al0, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl5)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah0, bl5)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al0, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl6)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah0, bl6)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al0, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al0, bl7)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah0, bl7)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al0, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                r8 = m;\n\n                u = ((imul(al1, bl0)|0) + (r9 & 0xffff)|0) + (r1 & 0xffff)|0;\n                v = ((imul(ah1, bl0)|0) + (r9 >>> 16)|0) + (r1 >>> 16)|0;\n                w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r1 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl1)|0) + (m & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah1, bl1)|0) + (m >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl2)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah1, bl2)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl3)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah1, bl3)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl4)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah1, bl4)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al1, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl5)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah1, bl5)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al1, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl6)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah1, bl6)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al1, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al1, bl7)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah1, bl7)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al1, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah1, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                r9 = m;\n\n                u = ((imul(al2, bl0)|0) + (r10 & 0xffff)|0) + (r2 & 0xffff)|0;\n                v = ((imul(ah2, bl0)|0) + (r10 >>> 16)|0) + (r2 >>> 16)|0;\n                w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r2 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl1)|0) + (m & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah2, bl1)|0) + (m >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl2)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah2, bl2)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl3)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah2, bl3)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl4)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah2, bl4)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al2, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl5)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah2, bl5)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al2, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl6)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah2, bl6)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al2, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al2, bl7)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah2, bl7)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al2, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah2, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                r10 = m;\n\n                u = ((imul(al3, bl0)|0) + (r11 & 0xffff)|0) + (r3 & 0xffff)|0;\n                v = ((imul(ah3, bl0)|0) + (r11 >>> 16)|0) + (r3 >>> 16)|0;\n                w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r3 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl1)|0) + (m & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah3, bl1)|0) + (m >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl2)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah3, bl2)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl3)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah3, bl3)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl4)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah3, bl4)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al3, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl5)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah3, bl5)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al3, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl6)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah3, bl6)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al3, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al3, bl7)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah3, bl7)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al3, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah3, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                r11 = m;\n\n                u = ((imul(al4, bl0)|0) + (r12 & 0xffff)|0) + (r4 & 0xffff)|0;\n                v = ((imul(ah4, bl0)|0) + (r12 >>> 16)|0) + (r4 >>> 16)|0;\n                w = ((imul(al4, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r4 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl1)|0) + (m & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah4, bl1)|0) + (m >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al4, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl2)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah4, bl2)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al4, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl3)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah4, bl3)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al4, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl4)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah4, bl4)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al4, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl5)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah4, bl5)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al4, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl6)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah4, bl6)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al4, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al4, bl7)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah4, bl7)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al4, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah4, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                r12 = m;\n\n                u = ((imul(al5, bl0)|0) + (r13 & 0xffff)|0) + (r5 & 0xffff)|0;\n                v = ((imul(ah5, bl0)|0) + (r13 >>> 16)|0) + (r5 >>> 16)|0;\n                w = ((imul(al5, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r5 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl1)|0) + (m & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah5, bl1)|0) + (m >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al5, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl2)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah5, bl2)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al5, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl3)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah5, bl3)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al5, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl4)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah5, bl4)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al5, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl5)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah5, bl5)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al5, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl6)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah5, bl6)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al5, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al5, bl7)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah5, bl7)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al5, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah5, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                r13 = m;\n\n                u = ((imul(al6, bl0)|0) + (r14 & 0xffff)|0) + (r6 & 0xffff)|0;\n                v = ((imul(ah6, bl0)|0) + (r14 >>> 16)|0) + (r6 >>> 16)|0;\n                w = ((imul(al6, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r6 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl1)|0) + (m & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah6, bl1)|0) + (m >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al6, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl2)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah6, bl2)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al6, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl3)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah6, bl3)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al6, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl4)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah6, bl4)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al6, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl5)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah6, bl5)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al6, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl6)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah6, bl6)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al6, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al6, bl7)|0) + (m & 0xffff)|0) + (r13 & 0xffff)|0;\n                v = ((imul(ah6, bl7)|0) + (m >>> 16)|0) + (r13 >>> 16)|0;\n                w = ((imul(al6, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah6, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r13 = (w << 16) | (u & 0xffff);\n\n                r14 = m;\n\n                u = ((imul(al7, bl0)|0) + (r15 & 0xffff)|0) + (r7 & 0xffff)|0;\n                v = ((imul(ah7, bl0)|0) + (r15 >>> 16)|0) + (r7 >>> 16)|0;\n                w = ((imul(al7, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r7 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl1)|0) + (m & 0xffff)|0) + (r8 & 0xffff)|0;\n                v = ((imul(ah7, bl1)|0) + (m >>> 16)|0) + (r8 >>> 16)|0;\n                w = ((imul(al7, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r8 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl2)|0) + (m & 0xffff)|0) + (r9 & 0xffff)|0;\n                v = ((imul(ah7, bl2)|0) + (m >>> 16)|0) + (r9 >>> 16)|0;\n                w = ((imul(al7, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r9 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl3)|0) + (m & 0xffff)|0) + (r10 & 0xffff)|0;\n                v = ((imul(ah7, bl3)|0) + (m >>> 16)|0) + (r10 >>> 16)|0;\n                w = ((imul(al7, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r10 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl4)|0) + (m & 0xffff)|0) + (r11 & 0xffff)|0;\n                v = ((imul(ah7, bl4)|0) + (m >>> 16)|0) + (r11 >>> 16)|0;\n                w = ((imul(al7, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r11 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl5)|0) + (m & 0xffff)|0) + (r12 & 0xffff)|0;\n                v = ((imul(ah7, bl5)|0) + (m >>> 16)|0) + (r12 >>> 16)|0;\n                w = ((imul(al7, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r12 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl6)|0) + (m & 0xffff)|0) + (r13 & 0xffff)|0;\n                v = ((imul(ah7, bl6)|0) + (m >>> 16)|0) + (r13 >>> 16)|0;\n                w = ((imul(al7, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r13 = (w << 16) | (u & 0xffff);\n\n                u = ((imul(al7, bl7)|0) + (m & 0xffff)|0) + (r14 & 0xffff)|0;\n                v = ((imul(ah7, bl7)|0) + (m >>> 16)|0) + (r14 >>> 16)|0;\n                w = ((imul(al7, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah7, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r14 = (w << 16) | (u & 0xffff);\n\n                r15 = m;\n\n                HEAP32[(Rk|0)>>2] = r0,\n                HEAP32[(Rk|4)>>2] = r1,\n                HEAP32[(Rk|8)>>2] = r2,\n                HEAP32[(Rk|12)>>2] = r3,\n                HEAP32[(Rk|16)>>2] = r4,\n                HEAP32[(Rk|20)>>2] = r5,\n                HEAP32[(Rk|24)>>2] = r6,\n                HEAP32[(Rk|28)>>2] = r7;\n            }\n\n            Rk = (R+(i+j|0))|0;\n            HEAP32[(Rk|0)>>2] = r8,\n            HEAP32[(Rk|4)>>2] = r9,\n            HEAP32[(Rk|8)>>2] = r10,\n            HEAP32[(Rk|12)>>2] = r11,\n            HEAP32[(Rk|16)>>2] = r12,\n            HEAP32[(Rk|20)>>2] = r13,\n            HEAP32[(Rk|24)>>2] = r14,\n            HEAP32[(Rk|28)>>2] = r15;\n        }\n/*\n        for ( i = lA & -32; (i|0) < (lA|0); i = (i+4)|0 ) {\n            Ai = (A+i)|0;\n\n            ah0 = HEAP32[Ai>>2]|0,\n            al0 = ah0 & 0xffff,\n            ah0 = ah0 >>> 16;\n\n            r1 = 0;\n\n            for ( j = 0; (j|0) < (lB|0); j = (j+4)|0 ) {\n                Bj = (B+j)|0;\n                Rk = (R+(i+j|0))|0;\n\n                bh0 = HEAP32[Bj>>2]|0,\n                bl0 = bh0 & 0xffff,\n                bh0 = bh0 >>> 16;\n\n                r0 = HEAP32[Rk>>2]|0;\n\n                u = ((imul(al0, bl0)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;\n                v = ((imul(ah0, bl0)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;\n                w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                r0 = (w << 16) | (u & 0xffff);\n\n                r1 = m;\n\n                HEAP32[Rk>>2] = r0;\n            }\n\n            Rk = (R+(i+j|0))|0;\n            HEAP32[Rk>>2] = r1;\n        }\n*/\n    }\n\n    /**\n     * Fast squaring\n     *\n     * Exploits the fact:\n     *\n     *  X² = ( X0 + X1*B )² = X0² + 2*X0*X1*B + X1²*B²,\n     *\n     * where B is a power of 2, so:\n     *\n     *  2*X0*X1*B = (X0*X1 << 1)*B\n     *\n     * @param A offset of the argument being squared, 32-byte aligned\n     * @param lA length of the argument, multiple of 32\n     *\n     * @param R offset where to place the result to, 32-byte aligned\n     */\n    function sqr ( A, lA, R ) {\n        A  =  A|0;\n        lA = lA|0;\n        R  =  R|0;\n\n        var al0 = 0, al1 = 0, al2 = 0, al3 = 0, al4 = 0, al5 = 0, al6 = 0, al7 = 0, ah0 = 0, ah1 = 0, ah2 = 0, ah3 = 0, ah4 = 0, ah5 = 0, ah6 = 0, ah7 = 0,\n            bl0 = 0, bl1 = 0, bl2 = 0, bl3 = 0, bl4 = 0, bl5 = 0, bl6 = 0, bl7 = 0, bh0 = 0, bh1 = 0, bh2 = 0, bh3 = 0, bh4 = 0, bh5 = 0, bh6 = 0, bh7 = 0,\n            r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0, r6 = 0, r7 = 0, r8 = 0, r9 = 0, r10 = 0, r11 = 0, r12 = 0, r13 = 0, r14 = 0, r15 = 0,\n            u = 0, v = 0, w = 0, c = 0, h = 0, m = 0, r = 0,\n            d = 0, dd = 0, p = 0, i = 0, j = 0, k = 0, Ai = 0, Aj = 0, Rk = 0;\n\n        // prepare for iterations\n        for ( ; (i|0) < (lA|0); i = (i+4)|0 ) {\n            Rk = R+(i<<1)|0;\n            ah0 = HEAP32[(A+i)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;\n            u = imul(al0,al0)|0;\n            v = (imul(al0,ah0)|0) + (u >>> 17)|0;\n            w = (imul(ah0,ah0)|0) + (v >>> 15)|0;\n            HEAP32[(Rk)>>2] = (v << 17) | (u & 0x1ffff);\n            HEAP32[(Rk|4)>>2] = w;\n        }\n\n        // unrolled 1st iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+8)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;\n\n            bh0 = HEAP32[(Ai|4)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16;\n\n            u = imul(al0,bl0)|0;\n            v = (imul(al0,bh0)|0) + (u >>> 16)|0;\n            w = (imul(ah0,bl0)|0) + (v & 0xffff)|0;\n            m = ((imul(ah0,bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n\n            r = HEAP32[(Rk|4)>>2]|0;\n            u = (r & 0xffff) + ((u & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((w & 0xffff) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|4)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|8)>>2]|0;\n            u = ((r & 0xffff) + ((m & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((m >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|8)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            if ( c ) {\n                r = HEAP32[(Rk|12)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk|12)>>2] = (w << 16) | (u & 0xffff);\n            }\n        }\n\n        // unrolled 2nd iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+16)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n            ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16;\n\n            bh0 = HEAP32[(Ai|8)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n            bh1 = HEAP32[(Ai|12)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16;\n\n            u = imul(al0, bl0)|0;\n            v = imul(ah0, bl0)|0;\n            w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r0 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl1)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl1)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            r2 = m;\n\n            u = (imul(al1, bl0)|0) + (r1 & 0xffff)|0;\n            v = (imul(ah1, bl0)|0) + (r1 >>> 16)|0;\n            w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            r3 = m;\n\n            r = HEAP32[(Rk|8)>>2]|0;\n            u = (r & 0xffff) + ((r0 & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|8)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|12)>>2]|0;\n            u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0)  + c|0;\n            w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|12)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|16)>>2]|0;\n            u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|16)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|20)>>2]|0;\n            u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|20)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            for ( k = 24; !!c & ( (k|0) < 32 ); k = (k+4)|0 ) {\n                r = HEAP32[(Rk|k)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk|k)>>2] = (w << 16) | (u & 0xffff);\n                c = w >>> 16;\n            }\n        }\n\n        // unrolled 3rd iteration\n        for ( p = 0; (p|0) < (lA|0); p = (p+32)|0 ) {\n            Ai = A+p|0, Rk = R+(p<<1)|0;\n\n            ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n            ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16,\n            ah2 = HEAP32[(Ai|8)>>2]|0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16,\n            ah3 = HEAP32[(Ai|12)>>2]|0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16;\n\n            bh0 = HEAP32[(Ai|16)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n            bh1 = HEAP32[(Ai|20)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16,\n            bh2 = HEAP32[(Ai|24)>>2]|0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16,\n            bh3 = HEAP32[(Ai|28)>>2]|0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16;\n\n            u = imul(al0, bl0)|0;\n            v = imul(ah0, bl0)|0;\n            w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r0 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl1)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl1)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl2)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl2)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = (imul(al0, bl3)|0) + (m & 0xffff)|0;\n            v = (imul(ah0, bl3)|0) + (m >>> 16)|0;\n            w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            r4 = m;\n\n            u = (imul(al1, bl0)|0) + (r1 & 0xffff)|0;\n            v = (imul(ah1, bl0)|0) + (r1 >>> 16)|0;\n            w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r1 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl2)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl2)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al1, bl3)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah1, bl3)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            r5 = m;\n\n            u = (imul(al2, bl0)|0) + (r2 & 0xffff)|0;\n            v = (imul(ah2, bl0)|0) + (r2 >>> 16)|0;\n            w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r2 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl1)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl1)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl2)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl2)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al2, bl3)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah2, bl3)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r5 = (w << 16) | (u & 0xffff);\n\n            r6 = m;\n\n            u = (imul(al3, bl0)|0) + (r3 & 0xffff)|0;\n            v = (imul(ah3, bl0)|0) + (r3 >>> 16)|0;\n            w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r3 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl1)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl1)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r4 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl2)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl2)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r5 = (w << 16) | (u & 0xffff);\n\n            u = ((imul(al3, bl3)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n            v = ((imul(ah3, bl3)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n            w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n            m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n            r6 = (w << 16) | (u & 0xffff);\n\n            r7 = m;\n\n            r = HEAP32[(Rk|16)>>2]|0;\n            u = (r & 0xffff) + ((r0 & 0xffff) << 1)|0;\n            w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|16)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|20)>>2]|0;\n            u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0)  + c|0;\n            w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|20)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|24)>>2]|0;\n            u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|24)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk|28)>>2]|0;\n            u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk|28)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+32)>>2]|0;\n            u = ((r & 0xffff) + ((r4 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r4 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+32)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+36)>>2]|0;\n            u = ((r & 0xffff) + ((r5 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r5 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+36)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+40)>>2]|0;\n            u = ((r & 0xffff) + ((r6 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r6 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+40)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            r = HEAP32[(Rk+44)>>2]|0;\n            u = ((r & 0xffff) + ((r7 & 0xffff) << 1)|0) + c|0;\n            w = ((r >>> 16) + ((r7 >>> 16) << 1)|0) + (u >>> 16)|0;\n            HEAP32[(Rk+44)>>2] = (w << 16) | (u & 0xffff);\n            c = w >>> 16;\n\n            for ( k = 48; !!c & ( (k|0) < 64 ); k = (k+4)|0 ) {\n                r = HEAP32[(Rk+k)>>2]|0;\n                u = (r & 0xffff) + c|0;\n                w = (r >>> 16) + (u >>> 16)|0;\n                HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                c = w >>> 16;\n            }\n        }\n\n        // perform iterations\n        for ( d = 32; (d|0) < (lA|0); d = d << 1 ) { // depth loop\n            dd = d << 1;\n\n            for ( p = 0; (p|0) < (lA|0); p = (p+dd)|0 ) { // part loop\n                Rk = R+(p<<1)|0;\n\n                h = 0;\n                for ( i = 0; (i|0) < (d|0); i = (i+32)|0 ) { // multiply-and-add loop\n                    Ai = (A+p|0)+i|0;\n\n                    ah0 = HEAP32[(Ai)>>2]|0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16,\n                    ah1 = HEAP32[(Ai|4)>>2]|0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16,\n                    ah2 = HEAP32[(Ai|8)>>2]|0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16,\n                    ah3 = HEAP32[(Ai|12)>>2]|0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16,\n                    ah4 = HEAP32[(Ai|16)>>2]|0, al4 = ah4 & 0xffff, ah4 = ah4 >>> 16,\n                    ah5 = HEAP32[(Ai|20)>>2]|0, al5 = ah5 & 0xffff, ah5 = ah5 >>> 16,\n                    ah6 = HEAP32[(Ai|24)>>2]|0, al6 = ah6 & 0xffff, ah6 = ah6 >>> 16,\n                    ah7 = HEAP32[(Ai|28)>>2]|0, al7 = ah7 & 0xffff, ah7 = ah7 >>> 16;\n\n                    r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = c = 0;\n\n                    for ( j = 0; (j|0) < (d|0); j = (j+32)|0 ) {\n                        Aj = ((A+p|0)+d|0)+j|0;\n\n                        bh0 = HEAP32[(Aj)>>2]|0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16,\n                        bh1 = HEAP32[(Aj|4)>>2]|0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16,\n                        bh2 = HEAP32[(Aj|8)>>2]|0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16,\n                        bh3 = HEAP32[(Aj|12)>>2]|0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16,\n                        bh4 = HEAP32[(Aj|16)>>2]|0, bl4 = bh4 & 0xffff, bh4 = bh4 >>> 16,\n                        bh5 = HEAP32[(Aj|20)>>2]|0, bl5 = bh5 & 0xffff, bh5 = bh5 >>> 16,\n                        bh6 = HEAP32[(Aj|24)>>2]|0, bl6 = bh6 & 0xffff, bh6 = bh6 >>> 16,\n                        bh7 = HEAP32[(Aj|28)>>2]|0, bl7 = bh7 & 0xffff, bh7 = bh7 >>> 16;\n\n                        r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 0;\n\n                        u = ((imul(al0, bl0)|0) + (r0 & 0xffff)|0) + (r8 & 0xffff)|0;\n                        v = ((imul(ah0, bl0)|0) + (r0 >>> 16)|0) + (r8 >>> 16)|0;\n                        w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r0 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl1)|0) + (r1 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl1)|0) + (r1 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r1 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl2)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl2)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl3)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl3)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl4)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl4)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl5)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl5)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl6)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl6)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al0, bl7)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah0, bl7)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al0, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah0, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        r8 = m;\n\n                        u = ((imul(al1, bl0)|0) + (r1 & 0xffff)|0) + (r9 & 0xffff)|0;\n                        v = ((imul(ah1, bl0)|0) + (r1 >>> 16)|0) + (r9 >>> 16)|0;\n                        w = ((imul(al1, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r1 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl1)|0) + (r2 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl1)|0) + (r2 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl2)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl2)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl3)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl3)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl4)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl4)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl5)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl5)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl6)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl6)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al1, bl7)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah1, bl7)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al1, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah1, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        r9 = m;\n\n                        u = ((imul(al2, bl0)|0) + (r2 & 0xffff)|0) + (r10 & 0xffff)|0;\n                        v = ((imul(ah2, bl0)|0) + (r2 >>> 16)|0) + (r10 >>> 16)|0;\n                        w = ((imul(al2, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r2 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl1)|0) + (r3 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl1)|0) + (r3 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl2)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl2)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl3)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl3)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl4)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl4)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl5)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl5)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl6)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl6)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al2, bl7)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah2, bl7)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al2, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah2, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        r10 = m;\n\n                        u = ((imul(al3, bl0)|0) + (r3 & 0xffff)|0) + (r11 & 0xffff)|0;\n                        v = ((imul(ah3, bl0)|0) + (r3 >>> 16)|0) + (r11 >>> 16)|0;\n                        w = ((imul(al3, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r3 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl1)|0) + (r4 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl1)|0) + (r4 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl2)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl2)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl3)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl3)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl4)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl4)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl5)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl5)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl6)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl6)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al3, bl7)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah3, bl7)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al3, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah3, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        r11 = m;\n\n                        u = ((imul(al4, bl0)|0) + (r4 & 0xffff)|0) + (r12 & 0xffff)|0;\n                        v = ((imul(ah4, bl0)|0) + (r4 >>> 16)|0) + (r12 >>> 16)|0;\n                        w = ((imul(al4, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r4 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl1)|0) + (r5 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl1)|0) + (r5 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl2)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl2)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl3)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl3)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl4)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl4)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl5)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl5)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl6)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl6)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al4, bl7)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah4, bl7)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al4, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah4, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        r12 = m;\n\n                        u = ((imul(al5, bl0)|0) + (r5 & 0xffff)|0) + (r13 & 0xffff)|0;\n                        v = ((imul(ah5, bl0)|0) + (r5 >>> 16)|0) + (r13 >>> 16)|0;\n                        w = ((imul(al5, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r5 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl1)|0) + (r6 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl1)|0) + (r6 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl2)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl2)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl3)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl3)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl4)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl4)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl5)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl5)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl6)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl6)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al5, bl7)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah5, bl7)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al5, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah5, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        r13 = m;\n\n                        u = ((imul(al6, bl0)|0) + (r6 & 0xffff)|0) + (r14 & 0xffff)|0;\n                        v = ((imul(ah6, bl0)|0) + (r6 >>> 16)|0) + (r14 >>> 16)|0;\n                        w = ((imul(al6, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r6 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl1)|0) + (r7 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl1)|0) + (r7 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl2)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl2)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl3)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl3)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl4)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl4)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl5)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl5)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl6)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl6)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al6, bl7)|0) + (r13 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah6, bl7)|0) + (r13 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al6, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah6, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r13 = (w << 16) | (u & 0xffff);\n\n                        r14 = m;\n\n                        u = ((imul(al7, bl0)|0) + (r7 & 0xffff)|0) + (r15 & 0xffff)|0;\n                        v = ((imul(ah7, bl0)|0) + (r7 >>> 16)|0) + (r15 >>> 16)|0;\n                        w = ((imul(al7, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r7 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl1)|0) + (r8 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl1)|0) + (r8 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh1)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh1)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r8 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl2)|0) + (r9 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl2)|0) + (r9 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh2)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh2)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r9 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl3)|0) + (r10 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl3)|0) + (r10 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh3)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh3)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r10 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl4)|0) + (r11 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl4)|0) + (r11 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh4)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh4)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r11 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl5)|0) + (r12 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl5)|0) + (r12 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh5)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh5)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r12 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl6)|0) + (r13 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl6)|0) + (r13 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh6)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh6)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r13 = (w << 16) | (u & 0xffff);\n\n                        u = ((imul(al7, bl7)|0) + (r14 & 0xffff)|0) + (m & 0xffff)|0;\n                        v = ((imul(ah7, bl7)|0) + (r14 >>> 16)|0) + (m >>> 16)|0;\n                        w = ((imul(al7, bh7)|0) + (v & 0xffff)|0) + (u >>> 16)|0;\n                        m = ((imul(ah7, bh7)|0) + (v >>> 16)|0) + (w >>> 16)|0;\n                        r14 = (w << 16) | (u & 0xffff);\n\n                        r15 = m;\n\n                        k = d+(i+j|0)|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r0 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r0 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r1 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r1 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r2 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r2 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r3 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r3 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r4 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r4 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r5 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r5 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r6 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r6 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n\n                        k = k+4|0;\n                        r = HEAP32[(Rk+k)>>2]|0;\n                        u = ((r & 0xffff) + ((r7 & 0xffff) << 1)|0) + c|0;\n                        w = ((r >>> 16) + ((r7 >>> 16) << 1)|0) + (u >>> 16)|0;\n                        HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                        c = w >>> 16;\n                    }\n\n                    k = d+(i+j|0)|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = (((r & 0xffff) + ((r8 & 0xffff) << 1)|0) + c|0) + h|0;\n                    w = ((r >>> 16) + ((r8 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r9 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r9 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r10 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r10 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r11 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r11 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r12 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r12 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r13 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r13 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r14 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r14 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    c = w >>> 16;\n\n                    k = k+4|0;\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = ((r & 0xffff) + ((r15 & 0xffff) << 1)|0) + c|0;\n                    w = ((r >>> 16) + ((r15 >>> 16) << 1)|0) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    h = w >>> 16;\n                }\n\n                for ( k = k+4|0; !!h & ( (k|0) < (dd<<1) ); k = (k+4)|0 ) { // carry propagation loop\n                    r = HEAP32[(Rk+k)>>2]|0;\n                    u = (r & 0xffff) + h|0;\n                    w = (r >>> 16) + (u >>> 16)|0;\n                    HEAP32[(Rk+k)>>2] = (w << 16) | (u & 0xffff);\n                    h = w >>> 16;\n                }\n            }\n        }\n    }\n\n    /**\n     * Conventional division\n     *\n     * @param A offset of the numerator, 32-byte aligned\n     * @param lA length of the numerator, multiple of 32\n     *\n     * @param B offset of the divisor, 32-byte aligned\n     * @param lB length of the divisor, multiple of 32\n     *\n     * @param R offset where to place the remainder to, 32-byte aligned\n     *\n     * @param Q offser where to place the quotient to, 32-byte aligned\n     */\n\n    function div ( N, lN, D, lD, Q ) {\n        N  =  N|0;\n        lN = lN|0\n        D  =  D|0;\n        lD = lD|0\n        Q  =  Q|0;\n\n        var n = 0, d = 0, e = 0,\n            u1 = 0, u0 = 0,\n            v0 = 0, vh = 0, vl = 0,\n            qh = 0, ql = 0, rh = 0, rl = 0,\n            t1 = 0, t2 = 0, m = 0, c = 0,\n            i = 0, j = 0, k = 0;\n\n        // number of significant limbs in `N` (multiplied by 4)\n        for ( i = (lN-1) & -4; (i|0) >= 0; i = (i-4)|0 ) {\n            n = HEAP32[(N+i)>>2]|0;\n            if ( n ) {\n                lN = i;\n                break;\n            }\n        }\n\n        // number of significant limbs in `D` (multiplied by 4)\n        for ( i = (lD-1) & -4; (i|0) >= 0; i = (i-4)|0 ) {\n            d = HEAP32[(D+i)>>2]|0;\n            if ( d ) {\n                lD = i;\n                break;\n            }\n        }\n\n        // `D` is zero? WTF?!\n\n        // calculate `e` — the power of 2 of the normalization factor\n        while ( (d & 0x80000000) == 0 ) {\n            d = d << 1;\n            e = e + 1|0;\n        }\n\n        // normalize `N` in place\n        u0 = HEAP32[(N+lN)>>2]|0;\n        if ( e ) {\n            u1 = u0>>>(32-e|0);\n            for ( i = (lN-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                n = HEAP32[(N+i)>>2]|0;\n                HEAP32[(N+i+4)>>2] = (u0 << e) | ( e ? n >>> (32-e|0) : 0 );\n                u0 = n;\n            }\n            HEAP32[N>>2] = u0 << e;\n        }\n\n        // normalize `D` in place\n        if ( e ) {\n            v0 = HEAP32[(D+lD)>>2]|0;\n            for ( i = (lD-4)|0; (i|0) >= 0; i = (i-4)|0 ) {\n                d = HEAP32[(D+i)>>2]|0;\n                HEAP32[(D+i+4)>>2] = (v0 << e) | ( d >>> (32-e|0) );\n                v0 = d;\n            }\n            HEAP32[D>>2] = v0 << e;\n        }\n\n        // divisor parts won't change\n        v0 = HEAP32[(D+lD)>>2]|0;\n        vh = v0 >>> 16, vl = v0 & 0xffff;\n\n        // perform division\n        for ( i = lN; (i|0) >= (lD|0); i = (i-4)|0 ) {\n            j = (i-lD)|0;\n\n            // estimate high part of the quotient\n            u0 = HEAP32[(N+i)>>2]|0;\n            qh = ( (u1>>>0) / (vh>>>0) )|0, rh = ( (u1>>>0) % (vh>>>0) )|0, t1 = imul(qh, vl)|0;\n            while ( ( (qh|0) == 0x10000 ) | ( (t1>>>0) > (((rh << 16)|(u0 >>> 16))>>>0) ) ) {\n                qh = (qh-1)|0, rh = (rh+vh)|0, t1 = (t1-vl)|0;\n                if ( (rh|0) >= 0x10000 ) break;\n            }\n\n            // bulk multiply-and-subtract\n            // m - multiplication carry, c - subtraction carry\n            m = 0, c = 0;\n            for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                d = HEAP32[(D+k)>>2]|0;\n                t1 = (imul(qh, d & 0xffff)|0) + (m >>> 16)|0;\n                t2 = (imul(qh, d >>> 16)|0) + (t1 >>> 16)|0;\n                d = (m & 0xffff) | (t1 << 16);\n                m = t2;\n                n = HEAP32[(N+j+k)>>2]|0;\n                t1 = ((n & 0xffff) - (d & 0xffff)|0) + c|0;\n                t2 = ((n >>> 16) - (d >>> 16)|0) + (t1 >> 16)|0;\n                HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n                c = t2 >> 16;\n            }\n            t1 = ((u1 & 0xffff) - (m & 0xffff)|0) + c|0;\n            t2 = ((u1 >>> 16) - (m >>> 16)|0) + (t1 >> 16)|0;\n            u1 = (t2 << 16) | (t1 & 0xffff);\n            c = t2 >> 16;\n\n            // add `D` back if got carry-out\n            if ( c ) {\n                qh = (qh-1)|0;\n                c = 0;\n                for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                    d = HEAP32[(D+k)>>2]|0;\n                    n = HEAP32[(N+j+k)>>2]|0;\n                    t1 = (n & 0xffff) + c|0;\n                    t2 = (n >>> 16) + d + (t1 >>> 16)|0;\n                    HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n                    c = t2 >>> 16;\n                }\n                u1 = (u1+c)|0;\n            }\n\n            // estimate low part of the quotient\n            u0 = HEAP32[(N+i)>>2]|0;\n            n = (u1 << 16) | (u0 >>> 16);\n            ql = ( (n>>>0) / (vh>>>0) )|0, rl = ( (n>>>0) % (vh>>>0) )|0, t1 = imul(ql, vl)|0;\n            while ( ( (ql|0) == 0x10000 ) | ( (t1>>>0) > (((rl << 16)|(u0 & 0xffff))>>>0) ) ) {\n                ql = (ql-1)|0, rl = (rl+vh)|0, t1 = (t1-vl)|0;\n                if ( (rl|0) >= 0x10000 ) break;\n            }\n\n            // bulk multiply-and-subtract\n            // m - multiplication carry, c - subtraction carry\n            m = 0, c = 0;\n            for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                d = HEAP32[(D+k)>>2]|0;\n                t1 = (imul(ql, d & 0xffff)|0) + (m & 0xffff)|0;\n                t2 = ((imul(ql, d >>> 16)|0) + (t1 >>> 16)|0) + (m >>> 16)|0;\n                d = (t1 & 0xffff) | (t2 << 16);\n                m = t2 >>> 16;\n                n = HEAP32[(N+j+k)>>2]|0;\n                t1 = ((n & 0xffff) - (d & 0xffff)|0) + c|0;\n                t2 = ((n >>> 16) - (d >>> 16)|0) + (t1 >> 16)|0;\n                c = t2 >> 16;\n                HEAP32[(N+j+k)>>2] = (t2 << 16) | (t1 & 0xffff);\n            }\n            t1 = ((u1 & 0xffff) - (m & 0xffff)|0) + c|0;\n            t2 = ((u1 >>> 16) - (m >>> 16)|0) + (t1 >> 16)|0;\n            c = t2 >> 16;\n\n            // add `D` back if got carry-out\n            if ( c ) {\n                ql = (ql-1)|0;\n                c = 0;\n                for ( k = 0; (k|0) <= (lD|0); k = (k+4)|0 ) {\n                    d = HEAP32[(D+k)>>2]|0;\n                    n = HEAP32[(N+j+k)>>2]|0;\n                    t1 = ((n & 0xffff) + (d & 0xffff)|0) + c|0;\n                    t2 = ((n >>> 16) + (d >>> 16)|0) + (t1 >>> 16)|0;\n                    c = t2 >>> 16;\n                    HEAP32[(N+j+k)>>2] = (t1 & 0xffff) | (t2 << 16);\n                }\n            }\n\n            // got quotient limb\n            HEAP32[(Q+j)>>2] = (qh << 16) | ql;\n\n            u1 = HEAP32[(N+i)>>2]|0;\n        }\n\n        if ( e ) {\n            // TODO denormalize `D` in place\n\n            // denormalize `N` in place\n            u0 = HEAP32[N>>2]|0;\n            for ( i = 4; (i|0) <= (lD|0); i = (i+4)|0 ) {\n                n = HEAP32[(N+i)>>2]|0;\n                HEAP32[(N+i-4)>>2] = ( n << (32-e|0) ) | (u0 >>> e);\n                u0 = n;\n            }\n            HEAP32[(N+lD)>>2] = u0 >>> e;\n        }\n    }\n\n    /**\n     * Montgomery modular reduction\n     *\n     * Definition:\n     *\n     *  MREDC(A) = A × X (mod N),\n     *  M × X = N × Y + 1,\n     *\n     * where M = 2^(32*m) such that N < M and A < N×M\n     *\n     * Numbers `X` and `Y` can be calculated using Extended Euclidean Algorithm.\n     */\n    function mredc ( A, lA, N, lN, y, R ) {\n        A  =  A|0;\n        lA = lA|0;\n        N  =  N|0;\n        lN = lN|0;\n        y  =  y|0;\n        R  =  R|0;\n\n        var T = 0,\n            c = 0, uh = 0, ul = 0, vl = 0, vh = 0, w0 = 0, w1 = 0, w2 = 0, r0 = 0, r1 = 0,\n            i = 0, j = 0, k = 0;\n\n        T = salloc(lN<<1)|0;\n        z(lN<<1, 0, T);\n\n        cp( lA, A, T );\n\n        // HAC 14.32\n        for ( i = 0; (i|0) < (lN|0); i = (i+4)|0 ) {\n            uh = HEAP32[(T+i)>>2]|0, ul = uh & 0xffff, uh = uh >>> 16;\n            vh = y >>> 16, vl = y & 0xffff;\n            w0 = imul(ul,vl)|0, w1 = ( (imul(ul,vh)|0) + (imul(uh,vl)|0) | 0 ) + (w0 >>> 16) | 0;\n            ul = w0 & 0xffff, uh = w1 & 0xffff;\n            r1 = 0;\n            for ( j = 0; (j|0) < (lN|0); j = (j+4)|0 ) {\n                k = (i+j)|0;\n                vh = HEAP32[(N+j)>>2]|0, vl = vh & 0xffff, vh = vh >>> 16;\n                r0 = HEAP32[(T+k)>>2]|0;\n                w0 = ((imul(ul, vl)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;\n                w1 = ((imul(ul, vh)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;\n                w2 = ((imul(uh, vl)|0) + (w1 & 0xffff)|0) + (w0 >>> 16)|0;\n                r1 = ((imul(uh, vh)|0) + (w2 >>> 16)|0) + (w1 >>> 16)|0;\n                r0 = (w2 << 16) | (w0 & 0xffff);\n                HEAP32[(T+k)>>2] = r0;\n            }\n            k = (i+j)|0;\n            r0 = HEAP32[(T+k)>>2]|0;\n            w0 = ((r0 & 0xffff) + (r1 & 0xffff)|0) + c|0;\n            w1 = ((r0 >>> 16) + (r1 >>> 16)|0) + (w0 >>> 16)|0;\n            HEAP32[(T+k)>>2] = (w1 << 16) | (w0 & 0xffff);\n            c = w1 >>> 16;\n        }\n\n        cp( lN, (T+lN)|0, R );\n\n        sfree(lN<<1);\n\n        if ( c | ( (cmp( N, lN, R, lN )|0) <= 0 ) ) {\n            sub( R, lN, N, lN, R, lN )|0;\n        }\n    }\n\n    return {\n        sreset: sreset,\n        salloc: salloc,\n        sfree:  sfree,\n        z: z,\n        tst: tst,\n        neg: neg,\n        cmp: cmp,\n        add: add,\n        sub: sub,\n        mul: mul,\n        sqr: sqr,\n        div: div,\n        mredc: mredc\n    };\n}\n","import { BigNumber, BigNumber_ONE, BigNumber_ZERO, is_big_number } from './bignum';\n\n/**\n * @param {number} a\n * @param {number} b\n * @return {{gcd: number, x: number, y: number}}\n * @constructor\n */\nexport function Number_extGCD(a, b) {\n  var sa = a < 0 ? -1 : 1,\n    sb = b < 0 ? -1 : 1,\n    xi = 1,\n    xj = 0,\n    yi = 0,\n    yj = 1,\n    r,\n    q,\n    t,\n    a_cmp_b;\n\n  a *= sa;\n  b *= sb;\n\n  a_cmp_b = a < b;\n  if (a_cmp_b) {\n    t = a;\n    (a = b), (b = t);\n    t = sa;\n    sa = sb;\n    sb = t;\n  }\n\n  (q = Math.floor(a / b)), (r = a - q * b);\n  while (r) {\n    (t = xi - q * xj), (xi = xj), (xj = t);\n    (t = yi - q * yj), (yi = yj), (yj = t);\n    (a = b), (b = r);\n\n    (q = Math.floor(a / b)), (r = a - q * b);\n  }\n\n  xj *= sa;\n  yj *= sb;\n\n  if (a_cmp_b) {\n    t = xj;\n    (xj = yj), (yj = t);\n  }\n\n  return {\n    gcd: b,\n    x: xj,\n    y: yj,\n  };\n}\n\n/**\n * @param a\n * @param b\n * @return {{gcd: BigNumber, x: BigNumber, y: BigNumber}}\n * @constructor\n */\nexport function BigNumber_extGCD(a, b) {\n  if (!is_big_number(a)) a = new BigNumber(a);\n\n  if (!is_big_number(b)) b = new BigNumber(b);\n\n  var sa = a.sign,\n    sb = b.sign;\n\n  if (sa < 0) a = a.negate();\n\n  if (sb < 0) b = b.negate();\n\n  var a_cmp_b = a.compare(b);\n  if (a_cmp_b < 0) {\n    var t = a;\n    (a = b), (b = t);\n    t = sa;\n    sa = sb;\n    sb = t;\n  }\n\n  var xi = BigNumber_ONE,\n    xj = BigNumber_ZERO,\n    lx = b.bitLength,\n    yi = BigNumber_ZERO,\n    yj = BigNumber_ONE,\n    ly = a.bitLength,\n    z,\n    r,\n    q;\n\n  z = a.divide(b);\n  while ((r = z.remainder) !== BigNumber_ZERO) {\n    q = z.quotient;\n\n    (z = xi.subtract(q.multiply(xj).clamp(lx)).clamp(lx)), (xi = xj), (xj = z);\n    (z = yi.subtract(q.multiply(yj).clamp(ly)).clamp(ly)), (yi = yj), (yj = z);\n\n    (a = b), (b = r);\n\n    z = a.divide(b);\n  }\n\n  if (sa < 0) xj = xj.negate();\n\n  if (sb < 0) yj = yj.negate();\n\n  if (a_cmp_b < 0) {\n    var t = xj;\n    (xj = yj), (yj = t);\n  }\n\n  return {\n    gcd: b,\n    x: xj,\n    y: yj,\n  };\n}\n","import { Random_getValues } from '../random/random';\nimport { bigint_asm } from './bigint.asm';\nimport { is_buffer, is_bytes, is_number, is_string, string_to_bytes, pow2_ceil } from '../utils';\nimport { IllegalArgumentError } from '../errors';\nimport { BigNumber_extGCD, Number_extGCD } from './extgcd';\n\nexport function is_big_number(a) {\n  return a instanceof BigNumber;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nexport var _bigint_stdlib = { Uint32Array: Uint32Array, Math: Math };\nexport var _bigint_heap = new Uint32Array(0x100000);\nexport var _bigint_asm;\n\n// Small primes for trail division\nconst _primes = [2, 3 /* and so on, computed lazily */];\n\nfunction _half_imul(a, b) {\n  return (a * b) | 0;\n}\n\nif (_bigint_stdlib.Math.imul === undefined) {\n  _bigint_stdlib.Math.imul = _half_imul;\n  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);\n  delete _bigint_stdlib.Math.imul;\n} else {\n  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nconst _BigNumber_ZERO_limbs = new Uint32Array(0);\n\nexport class BigNumber {\n  /**\n   * @param {string} str\n   * @return {BigNumber}\n   */\n  static fromString(str) {\n    const bytes = string_to_bytes(str);\n    return new BigNumber(bytes);\n  }\n\n  /**\n   * @param {number} num\n   * @return {BigNumber}\n   */\n  static fromNumber(num) {\n    let limbs = _BigNumber_ZERO_limbs;\n    let bitlen = 0;\n    let sign = 0;\n\n    var absnum = Math.abs(num);\n    if (absnum > 0xffffffff) {\n      limbs = new Uint32Array(2);\n      limbs[0] = absnum | 0;\n      limbs[1] = (absnum / 0x100000000) | 0;\n      bitlen = 52;\n    } else if (absnum > 0) {\n      limbs = new Uint32Array(1);\n      limbs[0] = absnum;\n      bitlen = 32;\n    } else {\n      limbs = _BigNumber_ZERO_limbs;\n      bitlen = 0;\n    }\n    sign = num < 0 ? -1 : 1;\n\n    return BigNumber.fromConfig({ limbs, bitLength: bitlen, sign });\n  }\n\n  /**\n   * @param {ArrayBuffer} buffer\n   * @return {BigNumber}\n   */\n  static fromArrayBuffer(buffer) {\n    return new BigNumber(new Uint8Array(buffer));\n  }\n\n  /**\n   * @param {{ limbs: Uint32Array, bitLength: number, sign: number }} obj\n   * @return {BigNumber}\n   */\n  static fromConfig(obj) {\n    const bn = new BigNumber();\n    bn.limbs = new Uint32Array(obj.limbs);\n    bn.bitLength = obj.bitLength;\n    bn.sign = obj.sign;\n    return bn;\n  }\n\n  /**\n   * @param {Uint8Array} [num]\n   * @return {BigNumber}\n   */\n  constructor(num) {\n    let limbs = _BigNumber_ZERO_limbs;\n    let bitlen = 0;\n    let sign = 0;\n\n    if (num === undefined) {\n      // do nothing\n    } else if (is_bytes(num)) {\n      for (var i = 0; !num[i]; i++);\n\n      bitlen = (num.length - i) * 8;\n      if (!bitlen) return BigNumber_ZERO;\n\n      limbs = new Uint32Array((bitlen + 31) >> 5);\n      for (var j = num.length - 4; j >= i; j -= 4) {\n        limbs[(num.length - 4 - j) >> 2] = (num[j] << 24) | (num[j + 1] << 16) | (num[j + 2] << 8) | num[j + 3];\n      }\n      if (i - j === 3) {\n        limbs[limbs.length - 1] = num[i];\n      } else if (i - j === 2) {\n        limbs[limbs.length - 1] = (num[i] << 8) | num[i + 1];\n      } else if (i - j === 1) {\n        limbs[limbs.length - 1] = (num[i] << 16) | (num[i + 1] << 8) | num[i + 2];\n      }\n\n      sign = 1;\n    } else {\n      throw new TypeError('number is of unexpected type');\n    }\n\n    this.limbs = limbs;\n    this.bitLength = bitlen;\n    this.sign = sign;\n  }\n\n  /**\n   * @param {number} radix\n   * @return {string}\n   */\n  toString(radix) {\n    radix = radix || 16;\n\n    const limbs = this.limbs;\n    const bitlen = this.bitLength;\n    let str = '';\n\n    if (radix === 16) {\n      // FIXME clamp last limb to (bitlen % 32)\n      for (var i = ((bitlen + 31) >> 5) - 1; i >= 0; i--) {\n        var h = limbs[i].toString(16);\n        str += '00000000'.substr(h.length);\n        str += h;\n      }\n\n      str = str.replace(/^0+/, '');\n\n      if (!str.length) str = '0';\n    } else {\n      throw new IllegalArgumentError('bad radix');\n    }\n\n    if (this.sign < 0) str = '-' + str;\n\n    return str;\n  }\n\n  /**\n   * @return {Uint8Array}\n   */\n  toBytes() {\n    const bitlen = this.bitLength;\n    const limbs = this.limbs;\n\n    if (bitlen === 0) return new Uint8Array(0);\n\n    const bytelen = (bitlen + 7) >> 3;\n    const bytes = new Uint8Array(bytelen);\n    for (let i = 0; i < bytelen; i++) {\n      let j = bytelen - i - 1;\n      bytes[i] = limbs[j >> 2] >> ((j & 3) << 3);\n    }\n\n    return bytes;\n  }\n\n  /**\n   * Downgrade to Number\n   *\n   * @return {number}\n   */\n  valueOf() {\n    const limbs = this.limbs;\n    const bits = this.bitLength;\n    const sign = this.sign;\n\n    if (!sign) return 0;\n\n    if (bits <= 32) return sign * (limbs[0] >>> 0);\n\n    if (bits <= 52) return sign * (0x100000000 * (limbs[1] >>> 0) + (limbs[0] >>> 0));\n\n    // normalization\n    let i,\n      l,\n      e = 0;\n    for (i = limbs.length - 1; i >= 0; i--) {\n      if ((l = limbs[i]) === 0) continue;\n      while (((l << e) & 0x80000000) === 0) e++;\n      break;\n    }\n\n    if (i === 0) return sign * (limbs[0] >>> 0);\n\n    return (\n      sign *\n      (0x100000 * (((limbs[i] << e) | (e ? limbs[i - 1] >>> (32 - e) : 0)) >>> 0) +\n        (((limbs[i - 1] << e) | (e && i > 1 ? limbs[i - 2] >>> (32 - e) : 0)) >>> 12)) *\n      Math.pow(2, 32 * i - e - 52)\n    );\n  }\n\n  /**\n   * @param {number} b\n   * @return {BigNumber}\n   */\n  clamp(b) {\n    const limbs = this.limbs;\n    const bitlen = this.bitLength;\n\n    // FIXME check b is number and in a valid range\n\n    if (b >= bitlen) return this;\n\n    const clamped = new BigNumber();\n    let n = (b + 31) >> 5;\n    let k = b % 32;\n\n    clamped.limbs = new Uint32Array(limbs.subarray(0, n));\n    clamped.bitLength = b;\n    clamped.sign = this.sign;\n\n    if (k) clamped.limbs[n - 1] &= -1 >>> (32 - k);\n\n    return clamped;\n  }\n\n  /**\n   * @param {number} f\n   * @param {number} [b]\n   * @return {BigNumber}\n   */\n  slice(f, b) {\n    if (!is_number(f)) throw new TypeError('TODO');\n\n    if (b !== undefined && !is_number(b)) throw new TypeError('TODO');\n\n    const limbs = this.limbs;\n    const bitlen = this.bitLength;\n\n    if (f < 0) throw new RangeError('TODO');\n\n    if (f >= bitlen) return BigNumber_ZERO;\n\n    if (b === undefined || b > bitlen - f) b = bitlen - f;\n\n    const sliced = new BigNumber();\n    let n = f >> 5;\n    let m = (f + b + 31) >> 5;\n    let l = (b + 31) >> 5;\n    let t = f % 32;\n    let k = b % 32;\n\n    const slimbs = new Uint32Array(l);\n    if (t) {\n      for (var i = 0; i < m - n - 1; i++) {\n        slimbs[i] = (limbs[n + i] >>> t) | (limbs[n + i + 1] << (32 - t));\n      }\n      slimbs[i] = limbs[n + i] >>> t;\n    } else {\n      slimbs.set(limbs.subarray(n, m));\n    }\n\n    if (k) {\n      slimbs[l - 1] &= -1 >>> (32 - k);\n    }\n\n    sliced.limbs = slimbs;\n    sliced.bitLength = b;\n    sliced.sign = this.sign;\n\n    return sliced;\n  }\n\n  /**\n   * @return {BigNumber}\n   */\n  negate() {\n    const negative = new BigNumber();\n\n    negative.limbs = this.limbs;\n    negative.bitLength = this.bitLength;\n    negative.sign = -1 * this.sign;\n\n    return negative;\n  }\n\n  /**\n   * @param {BigNumber} that\n   * @return {number}\n   */\n  compare(that) {\n    var alimbs = this.limbs,\n      alimbcnt = alimbs.length,\n      blimbs = that.limbs,\n      blimbcnt = blimbs.length,\n      z = 0;\n\n    if (this.sign < that.sign) return -1;\n\n    if (this.sign > that.sign) return 1;\n\n    _bigint_heap.set(alimbs, 0);\n    _bigint_heap.set(blimbs, alimbcnt);\n    z = _bigint_asm.cmp(0, alimbcnt << 2, alimbcnt << 2, blimbcnt << 2);\n\n    return z * this.sign;\n  }\n\n  /**\n   * @param {BigNumber} that\n   * @return {BigNumber}\n   */\n  add(that) {\n    if (!this.sign) return that;\n\n    if (!that.sign) return this;\n\n    var abitlen = this.bitLength,\n      alimbs = this.limbs,\n      alimbcnt = alimbs.length,\n      asign = this.sign,\n      bbitlen = that.bitLength,\n      blimbs = that.limbs,\n      blimbcnt = blimbs.length,\n      bsign = that.sign,\n      rbitlen,\n      rlimbcnt,\n      rsign,\n      rof,\n      result = new BigNumber();\n\n    rbitlen = (abitlen > bbitlen ? abitlen : bbitlen) + (asign * bsign > 0 ? 1 : 0);\n    rlimbcnt = (rbitlen + 31) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc(alimbcnt << 2),\n      pB = _bigint_asm.salloc(blimbcnt << 2),\n      pR = _bigint_asm.salloc(rlimbcnt << 2);\n\n    _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);\n\n    _bigint_heap.set(alimbs, pA >> 2);\n    _bigint_heap.set(blimbs, pB >> 2);\n\n    if (asign * bsign > 0) {\n      _bigint_asm.add(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);\n      rsign = asign;\n    } else if (asign > bsign) {\n      rof = _bigint_asm.sub(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);\n      rsign = rof ? bsign : asign;\n    } else {\n      rof = _bigint_asm.sub(pB, blimbcnt << 2, pA, alimbcnt << 2, pR, rlimbcnt << 2);\n      rsign = rof ? asign : bsign;\n    }\n\n    if (rof) _bigint_asm.neg(pR, rlimbcnt << 2, pR, rlimbcnt << 2);\n\n    if (_bigint_asm.tst(pR, rlimbcnt << 2) === 0) return BigNumber_ZERO;\n\n    result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));\n    result.bitLength = rbitlen;\n    result.sign = rsign;\n\n    return result;\n  }\n\n  /**\n   * @param {BigNumber} that\n   * @return {BigNumber}\n   */\n  subtract(that) {\n    return this.add(that.negate());\n  }\n\n  /**\n   * @return {BigNumber}\n   */\n  square() {\n    if (!this.sign) return BigNumber_ZERO;\n\n    var abitlen = this.bitLength,\n      alimbs = this.limbs,\n      alimbcnt = alimbs.length,\n      rbitlen,\n      rlimbcnt,\n      result = new BigNumber();\n\n    rbitlen = abitlen << 1;\n    rlimbcnt = (rbitlen + 31) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc(alimbcnt << 2),\n      pR = _bigint_asm.salloc(rlimbcnt << 2);\n\n    _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);\n\n    _bigint_heap.set(alimbs, pA >> 2);\n\n    _bigint_asm.sqr(pA, alimbcnt << 2, pR);\n\n    result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));\n    result.bitLength = rbitlen;\n    result.sign = 1;\n\n    return result;\n  }\n\n  /**\n   * @param {BigNumber} that\n   * @return {{quotient: BigNumber, remainder: BigNumber}}\n   */\n  divide(that) {\n    var abitlen = this.bitLength,\n      alimbs = this.limbs,\n      alimbcnt = alimbs.length,\n      bbitlen = that.bitLength,\n      blimbs = that.limbs,\n      blimbcnt = blimbs.length,\n      qlimbcnt,\n      rlimbcnt,\n      quotient = BigNumber_ZERO,\n      remainder = BigNumber_ZERO;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc(alimbcnt << 2),\n      pB = _bigint_asm.salloc(blimbcnt << 2),\n      pQ = _bigint_asm.salloc(alimbcnt << 2);\n\n    _bigint_asm.z(pQ - pA + (alimbcnt << 2), 0, pA);\n\n    _bigint_heap.set(alimbs, pA >> 2);\n    _bigint_heap.set(blimbs, pB >> 2);\n\n    _bigint_asm.div(pA, alimbcnt << 2, pB, blimbcnt << 2, pQ);\n\n    qlimbcnt = _bigint_asm.tst(pQ, alimbcnt << 2) >> 2;\n    if (qlimbcnt) {\n      quotient = new BigNumber();\n      quotient.limbs = new Uint32Array(_bigint_heap.subarray(pQ >> 2, (pQ >> 2) + qlimbcnt));\n      quotient.bitLength = abitlen < qlimbcnt << 5 ? abitlen : qlimbcnt << 5;\n      quotient.sign = this.sign * that.sign;\n    }\n\n    rlimbcnt = _bigint_asm.tst(pA, blimbcnt << 2) >> 2;\n    if (rlimbcnt) {\n      remainder = new BigNumber();\n      remainder.limbs = new Uint32Array(_bigint_heap.subarray(pA >> 2, (pA >> 2) + rlimbcnt));\n      remainder.bitLength = bbitlen < rlimbcnt << 5 ? bbitlen : rlimbcnt << 5;\n      remainder.sign = this.sign;\n    }\n\n    return {\n      quotient: quotient,\n      remainder: remainder,\n    };\n  }\n\n  /**\n   * @param {BigNumber} that\n   * @return {BigNumber}\n   */\n  multiply(that) {\n    if (!this.sign || !that.sign) return BigNumber_ZERO;\n\n    var abitlen = this.bitLength,\n      alimbs = this.limbs,\n      alimbcnt = alimbs.length,\n      bbitlen = that.bitLength,\n      blimbs = that.limbs,\n      blimbcnt = blimbs.length,\n      rbitlen,\n      rlimbcnt,\n      result = new BigNumber();\n\n    rbitlen = abitlen + bbitlen;\n    rlimbcnt = (rbitlen + 31) >> 5;\n\n    _bigint_asm.sreset();\n\n    var pA = _bigint_asm.salloc(alimbcnt << 2),\n      pB = _bigint_asm.salloc(blimbcnt << 2),\n      pR = _bigint_asm.salloc(rlimbcnt << 2);\n\n    _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);\n\n    _bigint_heap.set(alimbs, pA >> 2);\n    _bigint_heap.set(blimbs, pB >> 2);\n\n    _bigint_asm.mul(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);\n\n    result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));\n    result.sign = this.sign * that.sign;\n    result.bitLength = rbitlen;\n\n    return result;\n  }\n\n  /**\n   * @param {number} rounds\n   * @return {boolean}\n   * @private\n   */\n  isMillerRabinProbablePrime(rounds) {\n    var t = BigNumber.fromConfig(this),\n      s = 0;\n    t.limbs[0] -= 1;\n    while (t.limbs[s >> 5] === 0) s += 32;\n    while (((t.limbs[s >> 5] >> (s & 31)) & 1) === 0) s++;\n    t = t.slice(s);\n\n    var m = new Modulus(this),\n      m1 = this.subtract(BigNumber_ONE),\n      a = BigNumber.fromConfig(this),\n      l = this.limbs.length - 1;\n    while (a.limbs[l] === 0) l--;\n\n    while (--rounds >= 0) {\n      Random_getValues(a.limbs);\n      if (a.limbs[0] < 2) a.limbs[0] += 2;\n      while (a.compare(m1) >= 0) a.limbs[l] >>>= 1;\n\n      var x = m.power(a, t);\n      if (x.compare(BigNumber_ONE) === 0) continue;\n      if (x.compare(m1) === 0) continue;\n\n      var c = s;\n      while (--c > 0) {\n        x = x.square().divide(m).remainder;\n        if (x.compare(BigNumber_ONE) === 0) return false;\n        if (x.compare(m1) === 0) break;\n      }\n\n      if (c === 0) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {number} [paranoia]\n   * @return {boolean}\n   */\n  isProbablePrime(paranoia) {\n    paranoia = paranoia || 80;\n\n    var limbs = this.limbs;\n    var i = 0;\n\n    // Oddity test\n    // (50% false positive probability)\n    if ((limbs[0] & 1) === 0) return false;\n    if (paranoia <= 1) return true;\n\n    // Magic divisors (3, 5, 17) test\n    // (~25% false positive probability)\n    var s3 = 0,\n      s5 = 0,\n      s17 = 0;\n    for (i = 0; i < limbs.length; i++) {\n      var l3 = limbs[i];\n      while (l3) {\n        s3 += l3 & 3;\n        l3 >>>= 2;\n      }\n\n      var l5 = limbs[i];\n      while (l5) {\n        s5 += l5 & 3;\n        l5 >>>= 2;\n        s5 -= l5 & 3;\n        l5 >>>= 2;\n      }\n\n      var l17 = limbs[i];\n      while (l17) {\n        s17 += l17 & 15;\n        l17 >>>= 4;\n        s17 -= l17 & 15;\n        l17 >>>= 4;\n      }\n    }\n    if (!(s3 % 3) || !(s5 % 5) || !(s17 % 17)) return false;\n    if (paranoia <= 2) return true;\n\n    // Miller-Rabin test\n    // (≤ 4^(-k) false positive probability)\n    return this.isMillerRabinProbablePrime(paranoia >>> 1);\n  }\n}\n\nexport const BigNumber_ZERO = BigNumber.fromNumber(0);\nexport const BigNumber_ONE = BigNumber.fromNumber(1);\n\n/**\n * Returns an array populated with first n primes.\n *\n * @param {number} n\n * @return {number[]}\n * @private\n */\nfunction _small_primes(n) {\n  if (_primes.length >= n) return _primes.slice(0, n);\n\n  for (let p = _primes[_primes.length - 1] + 2; _primes.length < n; p += 2) {\n    for (var i = 0, d = _primes[i]; d * d <= p; d = _primes[++i]) {\n      if (p % d == 0) break;\n    }\n    if (d * d > p) _primes.push(p);\n  }\n\n  return _primes;\n}\n\n/**\n * Returns strong pseudoprime of a specified bit length\n *\n * @param {number} bitlen\n * @param {function(BigNumber): boolean} filter\n * @return {BigNumber}\n */\nexport function randomProbablePrime(bitlen, filter) {\n  let limbcnt = (bitlen + 31) >> 5;\n  const prime = BigNumber.fromConfig({ sign: 1, bitLength: bitlen, limbs: new Uint32Array(limbcnt) });\n  const limbs = prime.limbs;\n\n  // Number of small divisors to try that minimizes the total cost of the trial division\n  // along with the first round of Miller-Rabin test for a certain bit length.\n  let k = 10000;\n  if (bitlen <= 512) k = 2200;\n  if (bitlen <= 256) k = 600;\n\n  let divisors = _small_primes(k);\n  const remainders = new Uint32Array(k);\n\n  // Number of Miller-Rabin iterations for an error rate  of less than 2^-80\n  // Damgaard, Landrock, Pomerance: Average case error estimates for the strong probable prime test.\n  const s = (bitlen * Math.LN2) | 0;\n  let r = 27;\n  if (bitlen >= 250) r = 12;\n  if (bitlen >= 450) r = 6;\n  if (bitlen >= 850) r = 3;\n  if (bitlen >= 1300) r = 2;\n\n  while (true) {\n    // populate `prime` with random bits, clamp to the appropriate bit length\n    Random_getValues(limbs);\n    limbs[0] |= 1;\n    limbs[limbcnt - 1] |= 1 << ((bitlen - 1) & 31);\n    if (bitlen & 31) limbs[limbcnt - 1] &= pow2_ceil((bitlen + 1) & 31) - 1;\n\n    // remainders from division to small primes\n    remainders[0] = 1;\n    for (let i = 1; i < k; i++) {\n      remainders[i] = prime.divide(BigNumber.fromNumber(divisors[i])).remainder.valueOf();\n    }\n\n    // try no more than `s` subsequent candidates\n    seek: for (let j = 0; j < s; j += 2, limbs[0] += 2) {\n      // check for small factors\n      for (let i = 1; i < k; i++) {\n        if ((remainders[i] + j) % divisors[i] === 0) continue seek;\n      }\n\n      // additional check just before the heavy lifting\n      if (typeof filter === 'function' && !filter(prime)) continue;\n\n      // proceed to Miller-Rabin test\n      if (prime.isMillerRabinProbablePrime(r)) return prime;\n    }\n  }\n}\n\nexport class Modulus extends BigNumber {\n  /**\n   * Modulus\n   *\n   * @param {BigNumber} number\n   */\n  constructor(number) {\n    super();\n    this.limbs = number.limbs;\n    this.bitLength = number.bitLength;\n    this.sign = number.sign;\n\n    if (this.valueOf() < 1) throw new RangeError();\n\n    if (this.bitLength <= 32) return;\n\n    let comodulus;\n\n    if (this.limbs[0] & 1) {\n      const bitlen = ((this.bitLength + 31) & -32) + 1;\n      const limbs = new Uint32Array((bitlen + 31) >> 5);\n      limbs[limbs.length - 1] = 1;\n      comodulus = new BigNumber();\n      comodulus.sign = 1;\n      comodulus.bitLength = bitlen;\n      comodulus.limbs = limbs;\n\n      const k = Number_extGCD(0x100000000, this.limbs[0]).y;\n      this.coefficient = k < 0 ? -k : 0x100000000 - k;\n    } else {\n      /**\n       * TODO even modulus reduction\n       * Modulus represented as `N = 2^U * V`, where `V` is odd and thus `GCD(2^U, V) = 1`.\n       * Calculation `A = TR' mod V` is made as for odd modulo using Montgomery method.\n       * Calculation `B = TR' mod 2^U` is easy as modulus is a power of 2.\n       * Using Chinese Remainder Theorem and Garner's Algorithm restore `TR' mod N` from `A` and `B`.\n       */\n      return;\n    }\n\n    this.comodulus = comodulus;\n    this.comodulusRemainder = comodulus.divide(this).remainder;\n    this.comodulusRemainderSquare = comodulus.square().divide(this).remainder;\n  }\n\n  /**\n   * Modular reduction\n   *\n   * @param {BigNumber} a\n   * @return {BigNumber}\n   * @constructor\n   */\n  reduce(a) {\n    if (a.bitLength <= 32 && this.bitLength <= 32) return BigNumber.fromNumber(a.valueOf() % this.valueOf());\n\n    if (a.compare(this) < 0) return a;\n\n    return a.divide(this).remainder;\n  }\n\n  /**\n   * Modular inverse\n   *\n   * @param {BigNumber} a\n   * @return {BigNumber}\n   * @constructor\n   */\n  inverse(a) {\n    a = this.reduce(a);\n\n    const r = BigNumber_extGCD(this, a);\n    if (r.gcd.valueOf() !== 1) return null;\n\n    if (r.y.sign < 0) return r.y.add(this).clamp(this.bitLength);\n\n    return r.y;\n  }\n\n  /**\n   * Modular exponentiation\n   *\n   * @param {BigNumber} g\n   * @param {BigNumber} e\n   * @return {BigNumber}\n   * @constructor\n   */\n  power(g, e) {\n    // count exponent set bits\n    let c = 0;\n    for (let i = 0; i < e.limbs.length; i++) {\n      let t = e.limbs[i];\n      while (t) {\n        if (t & 1) c++;\n        t >>>= 1;\n      }\n    }\n\n    // window size parameter\n    let k = 8;\n    if (e.bitLength <= 4536) k = 7;\n    if (e.bitLength <= 1736) k = 6;\n    if (e.bitLength <= 630) k = 5;\n    if (e.bitLength <= 210) k = 4;\n    if (e.bitLength <= 60) k = 3;\n    if (e.bitLength <= 12) k = 2;\n    if (c <= 1 << (k - 1)) k = 1;\n\n    // montgomerize base\n    g = _Montgomery_reduce(this.reduce(g).multiply(this.comodulusRemainderSquare), this);\n\n    // precompute odd powers\n    const g2 = _Montgomery_reduce(g.square(), this),\n      gn = new Array(1 << (k - 1));\n    gn[0] = g;\n    gn[1] = _Montgomery_reduce(g.multiply(g2), this);\n    for (let i = 2; i < 1 << (k - 1); i++) {\n      gn[i] = _Montgomery_reduce(gn[i - 1].multiply(g2), this);\n    }\n\n    // perform exponentiation\n    const u = this.comodulusRemainder;\n    let r = u;\n    for (let i = e.limbs.length - 1; i >= 0; i--) {\n      let t = e.limbs[i];\n      for (let j = 32; j > 0; ) {\n        if (t & 0x80000000) {\n          let n = t >>> (32 - k),\n            l = k;\n          while ((n & 1) === 0) {\n            n >>>= 1;\n            l--;\n          }\n          var m = gn[n >>> 1];\n          while (n) {\n            n >>>= 1;\n            if (r !== u) r = _Montgomery_reduce(r.square(), this);\n          }\n          r = r !== u ? _Montgomery_reduce(r.multiply(m), this) : m;\n          (t <<= l), (j -= l);\n        } else {\n          if (r !== u) r = _Montgomery_reduce(r.square(), this);\n          (t <<= 1), j--;\n        }\n      }\n    }\n\n    // de-montgomerize result\n    return _Montgomery_reduce(r, this);\n  }\n}\n\n/**\n * @param {BigNumber} a\n * @param {Modulus} n\n * @return {BigNumber}\n * @private\n */\nfunction _Montgomery_reduce(a, n) {\n  const alimbs = a.limbs;\n  const alimbcnt = alimbs.length;\n  const nlimbs = n.limbs;\n  const nlimbcnt = nlimbs.length;\n  const y = n.coefficient;\n\n  _bigint_asm.sreset();\n\n  const pA = _bigint_asm.salloc(alimbcnt << 2),\n    pN = _bigint_asm.salloc(nlimbcnt << 2),\n    pR = _bigint_asm.salloc(nlimbcnt << 2);\n\n  _bigint_asm.z(pR - pA + (nlimbcnt << 2), 0, pA);\n\n  _bigint_heap.set(alimbs, pA >> 2);\n  _bigint_heap.set(nlimbs, pN >> 2);\n\n  _bigint_asm.mredc(pA, alimbcnt << 2, pN, nlimbcnt << 2, y, pR);\n\n  const result = new BigNumber();\n  result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + nlimbcnt));\n  result.bitLength = n.bitLength;\n  result.sign = 1;\n\n  return result;\n}\n","import { BigNumber, is_big_number, Modulus } from '../bignum/bignum';\nimport { is_buffer, is_bytes, is_string, string_to_bytes } from '../utils';\nimport { IllegalStateError } from '../errors';\n\nexport function RSA(options) {\n  options = options || {};\n\n  this.key = null;\n  this.result = null;\n\n  this.reset(options);\n}\n\nexport function RSA_reset(options) {\n  options = options || {};\n\n  this.result = null;\n\n  var key = options.key;\n  if (key !== undefined) {\n    if (key instanceof Array) {\n      var l = key.length;\n      if (l !== 2 && l !== 3 && l !== 8) throw new SyntaxError('unexpected key type');\n\n      var k = [];\n      k[0] = new Modulus(new BigNumber(key[0]));\n      k[1] = new BigNumber(key[1]);\n      if (l > 2) {\n        k[2] = new BigNumber(key[2]);\n      }\n      if (l > 3) {\n        k[3] = new Modulus(new BigNumber(key[3]));\n        k[4] = new Modulus(new BigNumber(key[4]));\n        k[5] = new BigNumber(key[5]);\n        k[6] = new BigNumber(key[6]);\n        k[7] = new BigNumber(key[7]);\n      }\n\n      this.key = k;\n    } else {\n      throw new TypeError('unexpected key type');\n    }\n  }\n\n  return this;\n}\n\nexport function RSA_encrypt(data) {\n  if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n  if (is_string(data)) data = string_to_bytes(data);\n\n  if (is_buffer(data)) data = new Uint8Array(data);\n\n  var msg;\n  if (is_bytes(data)) {\n    msg = new BigNumber(data);\n  } else if (is_big_number(data)) {\n    msg = data;\n  } else {\n    throw new TypeError('unexpected data type');\n  }\n\n  if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');\n\n  var m = this.key[0],\n    e = this.key[1];\n\n  var result = m.power(msg, e).toBytes();\n\n  var bytelen = (m.bitLength + 7) >> 3;\n  if (result.length < bytelen) {\n    var r = new Uint8Array(bytelen);\n    r.set(result, bytelen - result.length);\n    result = r;\n  }\n\n  this.result = result;\n\n  return this;\n}\n\nexport function RSA_decrypt(data) {\n  if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n  if (this.key.length < 3) throw new IllegalStateError(\"key isn't suitable for decription\");\n\n  if (is_string(data)) data = string_to_bytes(data);\n\n  if (is_buffer(data)) data = new Uint8Array(data);\n\n  var msg;\n  if (is_bytes(data)) {\n    msg = new BigNumber(data);\n  } else if (is_big_number(data)) {\n    msg = data;\n  } else {\n    throw new TypeError('unexpected data type');\n  }\n\n  if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');\n\n  var result;\n  if (this.key.length > 3) {\n    var m = this.key[0],\n      p = this.key[3],\n      q = this.key[4],\n      dp = this.key[5],\n      dq = this.key[6],\n      u = this.key[7];\n\n    var x = p.power(msg, dp),\n      y = q.power(msg, dq);\n\n    var t = x.subtract(y);\n    while (t.sign < 0) t = t.add(p);\n\n    var h = p.reduce(u.multiply(t));\n\n    result = h\n      .multiply(q)\n      .add(y)\n      .clamp(m.bitLength)\n      .toBytes();\n  } else {\n    var m = this.key[0],\n      d = this.key[2];\n\n    result = m.power(msg, d).toBytes();\n  }\n\n  var bytelen = (m.bitLength + 7) >> 3;\n  if (result.length < bytelen) {\n    var r = new Uint8Array(bytelen);\n    r.set(result, bytelen - result.length);\n    result = r;\n  }\n\n  this.result = result;\n\n  return this;\n}\n\nvar RSA_prototype = RSA.prototype;\nRSA_prototype.reset = RSA_reset;\nRSA_prototype.encrypt = RSA_encrypt;\nRSA_prototype.decrypt = RSA_decrypt;\n","import { BigNumber, BigNumber_ONE, BigNumber_ZERO, Modulus } from './bignum';\nimport { BigNumber_extGCD } from './extgcd';\n\nBigNumber.ZERO = BigNumber_ZERO;\nBigNumber.ONE = BigNumber_ONE;\n\nBigNumber.extGCD = BigNumber_extGCD;\n\nexport { BigNumber, Modulus };\n","import { RSA_reset, RSA_encrypt, RSA_decrypt } from './rsa';\nimport { Random_getValues } from '../random/random';\nimport { is_buffer, is_bytes, is_number, is_string, string_to_bytes } from '../utils';\nimport { IllegalArgumentError, IllegalStateError, SecurityError } from '../errors';\n\nexport class RSA_OAEP {\n  constructor(options) {\n    options = options || {};\n\n    if (!options.hash) throw new SyntaxError(\"option 'hash' is required\");\n\n    if (!options.hash.HASH_SIZE)\n      throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.label = null;\n\n    this.reset(options);\n  }\n\n  reset(options) {\n    options = options || {};\n\n    var label = options.label;\n    if (label !== undefined) {\n      if (is_buffer(label) || is_bytes(label)) {\n        label = new Uint8Array(label);\n      } else if (is_string(label)) {\n        label = string_to_bytes(label);\n      } else {\n        throw new TypeError('unexpected label type');\n      }\n\n      this.label = label.length > 0 ? label : null;\n    } else {\n      this.label = null;\n    }\n\n    RSA_reset.call(this, options);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @return {RSA_OAEP}\n   */\n  encrypt(data) {\n    if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n    var key_size = Math.ceil(this.key[0].bitLength / 8),\n      hash_size = this.hash.HASH_SIZE,\n      data_length = data.byteLength || data.length || 0,\n      ps_length = key_size - data_length - 2 * hash_size - 2;\n\n    if (data_length > key_size - 2 * this.hash.HASH_SIZE - 2) throw new IllegalArgumentError('data too large');\n\n    var message = new Uint8Array(key_size),\n      seed = message.subarray(1, hash_size + 1),\n      data_block = message.subarray(hash_size + 1);\n\n    if (is_bytes(data)) {\n      data_block.set(data, hash_size + ps_length + 1);\n    } else if (is_buffer(data)) {\n      data_block.set(new Uint8Array(data), hash_size + ps_length + 1);\n    } else if (is_string(data)) {\n      data_block.set(string_to_bytes(data), hash_size + ps_length + 1);\n    } else {\n      throw new TypeError('unexpected data type');\n    }\n\n    data_block.set(\n      this.hash\n        .reset()\n        .process(this.label || '')\n        .finish().result,\n      0,\n    );\n    data_block[hash_size + ps_length] = 1;\n\n    Random_getValues(seed);\n\n    var data_block_mask = RSA_MGF1_generate.call(this, seed, data_block.length);\n    for (var i = 0; i < data_block.length; i++) data_block[i] ^= data_block_mask[i];\n\n    var seed_mask = RSA_MGF1_generate.call(this, data_block, seed.length);\n    for (var i = 0; i < seed.length; i++) seed[i] ^= seed_mask[i];\n\n    RSA_encrypt.call(this, message);\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @return {RSA_OAEP}\n   */\n  decrypt(data) {\n    if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n    var key_size = Math.ceil(this.key[0].bitLength / 8),\n      hash_size = this.hash.HASH_SIZE,\n      data_length = data.byteLength || data.length || 0;\n\n    if (data_length !== key_size) throw new IllegalArgumentError('bad data');\n\n    RSA_decrypt.call(this, data);\n\n    var z = this.result[0],\n      seed = this.result.subarray(1, hash_size + 1),\n      data_block = this.result.subarray(hash_size + 1);\n\n    if (z !== 0) throw new SecurityError('decryption failed');\n\n    var seed_mask = RSA_MGF1_generate.call(this, data_block, seed.length);\n    for (var i = 0; i < seed.length; i++) seed[i] ^= seed_mask[i];\n\n    var data_block_mask = RSA_MGF1_generate.call(this, seed, data_block.length);\n    for (var i = 0; i < data_block.length; i++) data_block[i] ^= data_block_mask[i];\n\n    var lhash = this.hash\n      .reset()\n      .process(this.label || '')\n      .finish().result;\n    for (var i = 0; i < hash_size; i++) {\n      if (lhash[i] !== data_block[i]) throw new SecurityError('decryption failed');\n    }\n\n    var ps_end = hash_size;\n    for (; ps_end < data_block.length; ps_end++) {\n      var psz = data_block[ps_end];\n      if (psz === 1) break;\n      if (psz !== 0) throw new SecurityError('decryption failed');\n    }\n    if (ps_end === data_block.length) throw new SecurityError('decryption failed');\n\n    this.result = data_block.subarray(ps_end + 1);\n\n    return this;\n  }\n}\n\n/**\n * @param {Uint8Array} seed\n * @param {number} length\n * @return {Uint8Array}\n * @constructor\n */\nfunction RSA_MGF1_generate(seed, length) {\n  seed = seed || '';\n  length = length || 0;\n\n  var hash_size = this.hash.HASH_SIZE;\n  //    if ( length > (hash_size * 0x100000000) )\n  //        throw new IllegalArgumentError(\"mask length too large\");\n\n  var mask = new Uint8Array(length),\n    counter = new Uint8Array(4),\n    chunks = Math.ceil(length / hash_size);\n  for (var i = 0; i < chunks; i++) {\n    (counter[0] = i >>> 24), (counter[1] = (i >>> 16) & 255), (counter[2] = (i >>> 8) & 255), (counter[3] = i & 255);\n\n    var submask = mask.subarray(i * hash_size);\n\n    var chunk = this.hash\n      .reset()\n      .process(seed)\n      .process(counter)\n      .finish().result;\n    if (chunk.length > submask.length) chunk = chunk.subarray(0, submask.length);\n\n    submask.set(chunk);\n  }\n\n  return mask;\n}\n\nexport class RSA_PSS {\n  constructor(options) {\n    options = options || {};\n\n    if (!options.hash) throw new SyntaxError(\"option 'hash' is required\");\n\n    if (!options.hash.HASH_SIZE)\n      throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.saltLength = 4;\n\n    this.reset(options);\n  }\n\n  reset(options) {\n    options = options || {};\n\n    RSA_reset.call(this, options);\n\n    var slen = options.saltLength;\n    if (slen !== undefined) {\n      if (!is_number(slen) || slen < 0) throw new TypeError('saltLength should be a non-negative number');\n\n      if (this.key !== null && Math.ceil((this.key[0].bitLength - 1) / 8) < this.hash.HASH_SIZE + slen + 2)\n        throw new SyntaxError('saltLength is too large');\n\n      this.saltLength = slen;\n    } else {\n      this.saltLength = 4;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @return {RSA_PSS}\n   */\n  sign(data) {\n    if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n    var key_bits = this.key[0].bitLength,\n      hash_size = this.hash.HASH_SIZE,\n      message_length = Math.ceil((key_bits - 1) / 8),\n      salt_length = this.saltLength,\n      ps_length = message_length - salt_length - hash_size - 2;\n\n    var message = new Uint8Array(message_length),\n      h_block = message.subarray(message_length - hash_size - 1, message_length - 1),\n      d_block = message.subarray(0, message_length - hash_size - 1),\n      d_salt = d_block.subarray(ps_length + 1);\n\n    var m_block = new Uint8Array(8 + hash_size + salt_length),\n      m_hash = m_block.subarray(8, 8 + hash_size),\n      m_salt = m_block.subarray(8 + hash_size);\n\n    m_hash.set(\n      this.hash\n        .reset()\n        .process(data)\n        .finish().result,\n    );\n\n    if (salt_length > 0) Random_getValues(m_salt);\n\n    d_block[ps_length] = 1;\n    d_salt.set(m_salt);\n\n    h_block.set(\n      this.hash\n        .reset()\n        .process(m_block)\n        .finish().result,\n    );\n\n    var d_block_mask = RSA_MGF1_generate.call(this, h_block, d_block.length);\n    for (var i = 0; i < d_block.length; i++) d_block[i] ^= d_block_mask[i];\n\n    message[message_length - 1] = 0xbc;\n\n    var zbits = 8 * message_length - key_bits + 1;\n    if (zbits % 8) message[0] &= 0xff >>> zbits;\n\n    RSA_decrypt.call(this, message);\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} signature\n   * @param {Uint8Array} data\n   * @return {RSA_PSS}\n   */\n  verify(signature, data) {\n    if (!this.key) throw new IllegalStateError('no key is associated with the instance');\n\n    var key_bits = this.key[0].bitLength,\n      hash_size = this.hash.HASH_SIZE,\n      message_length = Math.ceil((key_bits - 1) / 8),\n      salt_length = this.saltLength,\n      ps_length = message_length - salt_length - hash_size - 2;\n\n    RSA_encrypt.call(this, signature);\n\n    var message = this.result;\n    if (message[message_length - 1] !== 0xbc) throw new SecurityError('bad signature');\n\n    var h_block = message.subarray(message_length - hash_size - 1, message_length - 1),\n      d_block = message.subarray(0, message_length - hash_size - 1),\n      d_salt = d_block.subarray(ps_length + 1);\n\n    var zbits = 8 * message_length - key_bits + 1;\n    if (zbits % 8 && message[0] >>> (8 - zbits)) throw new SecurityError('bad signature');\n\n    var d_block_mask = RSA_MGF1_generate.call(this, h_block, d_block.length);\n    for (var i = 0; i < d_block.length; i++) d_block[i] ^= d_block_mask[i];\n\n    if (zbits % 8) message[0] &= 0xff >>> zbits;\n\n    for (var i = 0; i < ps_length; i++) {\n      if (d_block[i] !== 0) throw new SecurityError('bad signature');\n    }\n    if (d_block[ps_length] !== 1) throw new SecurityError('bad signature');\n\n    var m_block = new Uint8Array(8 + hash_size + salt_length),\n      m_hash = m_block.subarray(8, 8 + hash_size),\n      m_salt = m_block.subarray(8 + hash_size);\n\n    m_hash.set(\n      this.hash\n        .reset()\n        .process(data)\n        .finish().result,\n    );\n    m_salt.set(d_salt);\n\n    var h_block_verify = this.hash\n      .reset()\n      .process(m_block)\n      .finish().result;\n    for (var i = 0; i < hash_size; i++) {\n      if (h_block[i] !== h_block_verify[i]) throw new SecurityError('bad signature');\n    }\n\n    return this;\n  }\n}\n\nexport class RSA_PKCS1_v1_5 {\n  constructor(options) {\n    options = options || {};\n\n    if (!options.hash) throw new SyntaxError(\"option 'hash' is required\");\n\n    if (!options.hash.HASH_SIZE)\n      throw new SyntaxError(\"option 'hash' supplied doesn't seem to be a valid hash function\");\n\n    this.hash = options.hash;\n\n    this.reset(options);\n  }\n\n  reset(options) {\n    options = options || {};\n\n    RSA_reset.call(this, options);\n  }\n\n  /**\n   * @param {Uint8Array} data\n   * @return {RSA_PKCS1_v1_5}\n   */\n  sign(data) {\n    if (!this.key) {\n      throw new IllegalStateError('no key is associated with the instance');\n    }\n    var prefix = getHashPrefix(this.hash);\n    var hash_size = this.hash.HASH_SIZE;\n\n    var t_len = prefix.length + hash_size;\n    var k = (this.key[0].bitLength + 7) >> 3;\n    if (k < t_len + 11) {\n      throw new Error('Message too long');\n    }\n\n    var m_hash = new Uint8Array(hash_size);\n    m_hash.set(\n      this.hash\n        .reset()\n        .process(data)\n        .finish().result,\n    );\n\n    // EM = 0x00 || 0x01 || PS || 0x00 || T\n    var em = new Uint8Array(k);\n    var i = 0;\n    em[i++] = 0; // 0x00\n    em[i++] = 1; // 0x01\n    // PS\n    for (i; i < k - t_len - 1; i++) {\n      em[i] = 0xff;\n    }\n    em[i++] = 0;\n    em.set(prefix, i); // 0x00\n    // T\n    em.set(m_hash, em.length - hash_size);\n\n    RSA_decrypt.call(this, em);\n\n    return this;\n  }\n\n  /**\n   * @param {Uint8Array} signature\n   * @param {Uint8Array} data\n   * @return {RSA_PKCS1_v1_5}\n   */\n  verify(signature, data) {\n    if (!this.key) {\n      throw new IllegalStateError('no key is associated with the instance');\n    }\n    var prefix = getHashPrefix(this.hash);\n    var hash_size = this.hash.HASH_SIZE;\n\n    var t_len = prefix.length + hash_size;\n    var k = (this.key[0].bitLength + 7) >> 3;\n    if (k < t_len + 11) {\n      throw new SecurityError('Bad signature');\n    }\n\n    RSA_encrypt.call(this, signature);\n\n    var m_hash = new Uint8Array(hash_size);\n    m_hash.set(\n      this.hash\n        .reset()\n        .process(data)\n        .finish().result,\n    );\n\n    var res = 1;\n    // EM = 0x00 || 0x01 || PS || 0x00 || T\n    var decryptedSignature = this.result;\n    var i = 0;\n    res &= decryptedSignature[i++] === 0; // 0x00\n    res &= decryptedSignature[i++] === 1; // 0x01\n    // PS\n    for (i; i < k - t_len - 1; i++) {\n      res &= decryptedSignature[i] === 0xff;\n    }\n    res &= decryptedSignature[i++] === 0; // 0x00\n    // T\n    var j = 0;\n    var n = i + prefix.length;\n    // prefix\n    for (i; i < n; i++) {\n      res &= decryptedSignature[i] === prefix[j++];\n    }\n    j = 0;\n    n = i + m_hash.length;\n    // hash\n    for (i; i < n; i++) {\n      res &= decryptedSignature[i] === m_hash[j++];\n    }\n\n    if (!res) {\n      throw new SecurityError('Bad signature');\n    }\n\n    return this;\n  }\n}\n\nconst HASH_PREFIXES = {\n  sha1: new Uint8Array([0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14]),\n  sha256: new Uint8Array([\n    0x30,\n    0x31,\n    0x30,\n    0x0d,\n    0x06,\n    0x09,\n    0x60,\n    0x86,\n    0x48,\n    0x01,\n    0x65,\n    0x03,\n    0x04,\n    0x02,\n    0x01,\n    0x05,\n    0x00,\n    0x04,\n    0x20,\n  ]),\n  sha384: new Uint8Array([\n    0x30,\n    0x41,\n    0x30,\n    0x0d,\n    0x06,\n    0x09,\n    0x60,\n    0x86,\n    0x48,\n    0x01,\n    0x65,\n    0x03,\n    0x04,\n    0x02,\n    0x02,\n    0x05,\n    0x00,\n    0x04,\n    0x30,\n  ]),\n  sha512: new Uint8Array([\n    0x30,\n    0x51,\n    0x30,\n    0x0d,\n    0x06,\n    0x09,\n    0x60,\n    0x86,\n    0x48,\n    0x01,\n    0x65,\n    0x03,\n    0x04,\n    0x02,\n    0x03,\n    0x05,\n    0x00,\n    0x04,\n    0x40,\n  ]),\n};\n\n/**\n * @param hash\n * @return {Uint8Array}\n */\nfunction getHashPrefix(hash) {\n  var hashName = hash.constructor.NAME;\n  var prefix = HASH_PREFIXES[hashName];\n  if (!prefix) {\n    throw new Error(\"Cannot get hash prefix for hash algorithm '\" + hashName + \"'\");\n  }\n  return prefix;\n}\n","var _global_console = typeof console !== 'undefined' ? console : undefined;\n\nvar _secure_origin =\n  typeof location === 'undefined' || !location.protocol.search(/https:|file:|chrome:|chrome-extension:|moz-extension:/);\n\nif (!_secure_origin && _global_console !== undefined) {\n  _global_console.warn(\n    'asmCrypto seems to be load from an insecure origin; this may cause to MitM-attack vulnerability. Consider using secure transport protocol.',\n  );\n}\n"]}